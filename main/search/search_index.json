{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Overview","text":"<p><code>molfeat</code> is a python library to featurize molecules. It offers a growing list of featurization schemes, including:</p> <ul> <li>Molecular descriptors (rdkit and mordred)</li> <li>2D and 3D pharmacophores</li> <li>Pretrained featurizers (chemberta, chemgpt, etc)</li> <li>Graph featurization (tensors and dgl)</li> <li>Fingerprints </li> <li>Scaffold Key</li> </ul>"},{"location":"index.html#installation","title":"Installation","text":""},{"location":"index.html#installing-molfeat","title":"Installing MolFeat","text":"<p>Use conda:</p> <pre><code>mamba install -c invivoai -c conda-forge molfeat\n</code></pre>"},{"location":"index.html#installing-plugins","title":"Installing Plugins","text":"<p>The functionality of <code>MolFeat</code> can be extended through plugins. There are various types of functionality (new calculators, support for 3D, new pretrained featurizers, etc) that can be extended through plugins.</p> <p>Any additional plugins to <code>MolFeat</code> can be installed using the prefered installation guide of the extension (mainly through <code>pip</code> or <code>conda</code>):</p> <p>Note that all <code>MolFeat</code> extensions follows the <code>molfeat-{myplugin}</code> naming convention.</p>"},{"location":"index.html#dependencies","title":"Dependencies","text":"<p><code>molfeat</code> depends primarly on <code>rdkit</code> and <code>datamol</code>. However, a few featurization methods require the installation of additional packages. For example, 3D pharmacophore featurization requires <code>pmapper</code>, while the DGL graph featurizers require <code>dgl</code> and in some rare cases <code>dgllife</code>.</p> <p>Except for <code>dgllife</code> and <code>map4</code>, all the optional dependencies are installed through conda.</p> <ul> <li>To install <code>dgllife</code>, run <code>mamba install -c dglteam dgllife</code></li> <li>To install <code>map4</code>: see https://github.com/reymond-group/map4</li> </ul> <p>For the dependencies of any specific plugin, please refer to the plugin installation guide. </p>"},{"location":"index.html#more","title":"More","text":"<ul> <li>Check the getting started tutorial to learn more how to use <code>molfeat</code></li> <li>Check the Developers section if you plan to extend molfeat functionalities with new featurizers</li> <li>Check the API to get the full documentation</li> </ul>"},{"location":"index.html#licence","title":"Licence","text":"<p><code>MolFeat</code> is under the <code>Apache 2.0</code> Licence. For more information, see Licence</p>"},{"location":"license.html","title":"License","text":"<pre><code>Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright 2023 Valence\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n</code></pre>"},{"location":"api/molfeat.calc.html","title":"<code>Calculators</code>","text":""},{"location":"api/molfeat.calc.html#molfeat.calc.get_calculator","title":"<code>get_calculator(name, **params)</code>","text":"<p>Get molecular calculator based on name</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of the featurizer</p> required <code>params</code> <code>dict</code> <p>Parameters of the featurizer</p> <code>{}</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>When featurizer is not supported</p> <p>Returns:</p> Name Type Description <code>featurizer</code> <p>Callable</p> Source code in <code>molfeat/calc/__init__.py</code> <pre><code>def get_calculator(name: str, **params):\n\"\"\"Get molecular calculator based on name\n\n    Args:\n        name: Name of the featurizer\n        params (dict): Parameters of the featurizer\n\n    Raises:\n        ValueError: When featurizer is not supported\n\n    Returns:\n        featurizer: Callable\n    \"\"\"\n    if not isinstance(name, str):\n        return name\n\n    CALC_MAP = {k.lower(): v for k, v in _CALCULATORS.items()}\n    name = name.lower()\n    if name in FP_FUNCS.keys():\n        featurizer = FPCalculator(name, **params)\n    elif name == \"desc3d\":\n        featurizer = RDKitDescriptors3D(**params)\n    elif name == \"desc2d\":\n        featurizer = RDKitDescriptors2D(**params)\n    elif name == \"mordred\":\n        featurizer = MordredDescriptors(**params)\n    elif name == \"cats\":\n        featurizer = CATS(**params)\n    elif name == \"cats2d\":\n        params[\"use_3d_distances\"] = False\n        featurizer = CATS(**params)\n    elif name == \"cats3d\":\n        params[\"use_3d_distances\"] = True\n        featurizer = CATS(**params)\n    elif name == \"pharm2d\":\n        featurizer = Pharmacophore2D(**params)\n    elif name == \"pharm3d\":\n        featurizer = Pharmacophore3D(**params)\n    elif name.startswith(\"usr\"):\n        params[\"method\"] = name\n        featurizer = USRDescriptors(**params)\n    elif name == \"electroshape\":\n        featurizer = ElectroShapeDescriptors(**params)\n    elif name in [\"scaffoldkeys\", \"skeys\", \"scaffkeys\"]:\n        featurizer = ScaffoldKeyCalculator(**params)\n    elif name == \"none\":\n        featurizer = None\n    # for any generic calculator that has been automatically registered\n    elif name in CALC_MAP.keys():\n        featurizer = CALC_MAP[name](**params)\n    else:\n        raise ValueError(f\"{name} is not a supported internal featurizer\")\n    return featurizer\n</code></pre>"},{"location":"api/molfeat.calc.html#fingerprints","title":"<code>Fingerprints</code>","text":""},{"location":"api/molfeat.calc.html#molfeat.calc.fingerprints.FP_DEF_PARAMS","title":"<code>FP_DEF_PARAMS = {'maccs': {}, 'avalon': {'nBits': 512, 'isQuery': False, 'resetVect': False, 'bitFlags': pyAvalonTools.avalonSimilarityBits}, 'ecfp': {'radius': 2, 'nBits': 2048, 'invariants': [], 'fromAtoms': [], 'useChirality': False, 'useBondTypes': True, 'useFeatures': False}, 'fcfp': {'radius': 2, 'nBits': 2048, 'invariants': [], 'fromAtoms': [], 'useChirality': False, 'useBondTypes': True, 'useFeatures': True}, 'topological': {'nBits': 2048, 'targetSize': 4, 'fromAtoms': 0, 'ignoreAtoms': 0, 'atomInvariants': 0, 'nBitsPerEntry': 4, 'includeChirality': False}, 'atompair': {'nBits': 2048, 'minLength': 1, 'maxLength': 30, 'fromAtoms': 0, 'ignoreAtoms': 0, 'atomInvariants': 0, 'nBitsPerEntry': 4, 'includeChirality': False, 'use2D': True, 'confId': -1}, 'rdkit': {'minPath': 1, 'maxPath': 7, 'fpSize': 2048, 'nBitsPerHash': 2, 'useHs': True, 'tgtDensity': 0.0, 'minSize': 128, 'branchedPaths': True, 'useBondOrder': True, 'atomInvariants': 0, 'fromAtoms': 0, 'atomBits': None, 'bitInfo': None}, 'pattern': {'fpSize': 2048, 'atomCounts': [], 'setOnlyBits': None}, 'layered': {'fpSize': 2048, 'minPath': 1, 'maxPath': 7, 'atomCounts': [], 'setOnlyBits': None, 'branchedPaths': True, 'fromAtoms': 0}, 'map4': {'dimensions': 2048, 'radius': 2}, 'secfp': {'n_permutations': 128, 'nBits': 2048, 'radius': 3, 'min_radius': 1, 'rings': True, 'kekulize': False, 'isomeric': False, 'seed': 0}, 'mhfp': {'n_permutations': 128, 'radius': 3, 'min_radius': 1, 'rings': True, 'kekulize': False, 'isomeric': False, 'seed': 0}, 'erg': {'atomTypes': 0, 'fuzzIncrement': 0.3, 'minPath': 1, 'maxPath': 15}, 'estate': {}, 'ecfp-count': {'radius': 2, 'nBits': 2048, 'invariants': [], 'fromAtoms': [], 'useChirality': False, 'useBondTypes': True, 'useFeatures': False, 'includeRedundantEnvironments': False}, 'fcfp-count': {'radius': 2, 'nBits': 2048, 'invariants': [], 'fromAtoms': [], 'useChirality': False, 'useBondTypes': True, 'useFeatures': True, 'includeRedundantEnvironments': False}, 'topological-count': {'nBits': 2048, 'targetSize': 4, 'fromAtoms': 0, 'ignoreAtoms': 0, 'atomInvariants': 0, 'includeChirality': False}, 'avalon-count': {'nBits': 512, 'isQuery': False, 'bitFlags': pyAvalonTools.avalonSimilarityBits}, 'rdkit-count': {'minPath': 1, 'maxPath': 7, 'useHs': True, 'branchedPaths': True, 'useBondOrder': True, 'atomInvariants': 0, 'fromAtoms': 0, 'atomBits': None, 'bitInfo': None}, 'atompair-count': {'nBits': 2048, 'minLength': 1, 'maxLength': 30, 'fromAtoms': 0, 'ignoreAtoms': 0, 'atomInvariants': 0, 'includeChirality': False, 'use2D': True, 'confId': -1}}</code>  <code>module-attribute</code>","text":""},{"location":"api/molfeat.calc.html#molfeat.calc.fingerprints.FP_FUNCS","title":"<code>FP_FUNCS = {'maccs': rdMolDescriptors.GetMACCSKeysFingerprint, 'avalon': pyAvalonTools.GetAvalonFP, 'ecfp': rdMolDescriptors.GetMorganFingerprintAsBitVect, 'fcfp': partial(rdMolDescriptors.GetMorganFingerprintAsBitVect, useFeatures=True), 'topological': rdMolDescriptors.GetHashedTopologicalTorsionFingerprintAsBitVect, 'atompair': rdMolDescriptors.GetHashedAtomPairFingerprintAsBitVect, 'rdkit': rdmolops.RDKFingerprint, 'pattern': rdmolops.PatternFingerprint, 'layered': rdmolops.LayeredFingerprint, 'map4': MAP4, 'secfp': SECFP, 'erg': rdReducedGraphs.GetErGFingerprint, 'estate': lambda x: EStateFingerprinter.FingerprintMol(x)[0], 'avalon-count': pyAvalonTools.GetAvalonCountFP, 'rdkit-count': rdmolops.UnfoldedRDKFingerprintCountBased, 'ecfp-count': rdMolDescriptors.GetHashedMorganFingerprint, 'fcfp-count': rdMolDescriptors.GetHashedMorganFingerprint, 'topological-count': rdMolDescriptors.GetHashedTopologicalTorsionFingerprint, 'atompair-count': rdMolDescriptors.GetHashedAtomPairFingerprint}</code>  <code>module-attribute</code>","text":""},{"location":"api/molfeat.calc.html#molfeat.calc.fingerprints.FPCalculator","title":"<code>FPCalculator</code>","text":"<p>         Bases: <code>SerializableCalculator</code></p> <p>Fingerprint bit calculator for a molecule</p> Source code in <code>molfeat/calc/fingerprints.py</code> <pre><code>class FPCalculator(SerializableCalculator):\n\"\"\"Fingerprint bit calculator for a molecule\"\"\"\n\n    def __init__(\n        self,\n        method: str,\n        length: Optional[int] = None,\n        counting: bool = False,\n        **kwargs,\n    ):\n\"\"\"Compute the given fingeprint for a molecule\n\n        !!! note\n            For efficiency reason, count fingerprints are hashed and potentially\n            re-folded and the count corresponds to the number of bits set to true\n\n        Args:\n            method (str): Name of the fingerprint method to use\n            length (int, optional): Length of the fingerprint. Defaults to None.\n                The default corresponds to the fingerpint default.\n            counting (bool, optional): Whether to use the count version of the fingerprint\n            kwargs (dict): any parameters to the fingerprint algorithm\n        \"\"\"\n        self.method = method.lower()\n        self.counting = counting or \"-count\" in self.method\n        if self.counting and not \"-count\" in self.method:\n            self.method = self.method + \"-count\"\n        self.input_length = length\n        if self.method not in FP_FUNCS:\n            raise ValueError(f\"Method {self.method} is not a supported featurizer\")\n        default_params = copy.deepcopy(FP_DEF_PARAMS[method])\n        unknown_params = set(kwargs.keys()).difference(set(default_params.keys()))\n        if unknown_params:\n            logger.error(f\"Params: {unknown_params} are not valid for {method}\")\n        self.params = default_params\n        self.params.update({k: kwargs[k] for k in kwargs if k in default_params.keys()})\n        self._length = self._set_length(length)\n\n    @property\n    def columns(self):\n\"\"\"\n        Get the name of all the descriptors of this calculator\n        \"\"\"\n        return [f\"fp_{i}\" for i in range(self._length)]\n\n    def __len__(self):\n\"\"\"Return the length of the calculator\"\"\"\n        return self._length\n\n    def _set_length(self, length=None):\n\"\"\"Get the length of the featurizer\"\"\"\n        fplen = length\n        len_key = None\n        if self.method == \"maccs\":\n            fplen = 167\n        elif self.method == \"estate\":\n            fplen = 79\n        elif self.method == \"erg\":\n            fplen = 315\n        elif self.method == \"rdkit-count\" and not fplen:\n            fplen = 2048\n        elif \"nBits\" in self.params.keys():\n            len_key = \"nBits\"\n            fplen = self.params[len_key]\n        elif \"n_permutations\" in self.params.keys():\n            # special case for mhfp\n            len_key = \"n_permutations\"\n            fplen = self.params[len_key]\n        elif \"fpSize\" in self.params.keys():\n            len_key = \"fpSize\"\n            fplen = self.params[len_key]\n        elif \"dimensions\" in self.params.keys():\n            len_key = \"dimensions\"\n            fplen = self.params[len_key]\n        if len_key is not None and length:\n            self.params[len_key] = length\n            fplen = length\n        return fplen\n\n    def __call__(self, mol: Union[rdchem.Mol, str], raw: bool = False):\nr\"\"\"\n        Compute the Fingerprint of a molecule\n\n        Args:\n            mol: the molecule of interest\n            raw: whether to keep original datatype or convert to numpy. Useful for rdkit's similarity functions\n\n        Returns:\n            props (np.ndarray): list of computed rdkit molecular descriptors\n        \"\"\"\n        mol = dm.to_mol(mol)\n        fp_val = FP_FUNCS[self.method](mol, **self.params)\n        if self.counting:\n            fp_val = fold_count_fp(fp_val, self._length)\n        if not raw:\n            fp_val = to_numpy(fp_val)\n        if self.counting and raw:\n            # converint the counted values to SparseInt again\n            fp_val = to_fp(fp_val, bitvect=False)\n        return fp_val\n\n    def __getstate__(self):\n        # EN: note that the state is standardized with all the parameter\n        # because of the possibility of default changing after\n        state = {}\n        state[\"length\"] = self.input_length\n        state[\"input_length\"] = self.input_length\n        state[\"method\"] = self.method\n        state[\"counting\"] = self.counting\n        state[\"params\"] = self.params\n        return state\n\n    def __setstate__(self, state: dict):\n\"\"\"Set the state of the featurizer\"\"\"\n        self.__dict__.update(state)\n        self._length = self._set_length(self.input_length)\n\n    def to_state_dict(self):\n\"\"\"Get the state dictionary\"\"\"\n        state_dict = super().to_state_dict()\n        cur_params = self.params\n        default_params = copy.deepcopy(FP_DEF_PARAMS[state_dict[\"args\"][\"method\"]])\n        state_dict[\"args\"].update(\n            {\n                k: cur_params[k]\n                for k in cur_params\n                if (cur_params[k] != default_params[k] and cur_params[k] is not None)\n            }\n        )\n        # we want to keep all the additional parameters in the state dict\n        return state_dict\n</code></pre>"},{"location":"api/molfeat.calc.html#molfeat.calc.fingerprints.FPCalculator.columns","title":"<code>columns</code>  <code>property</code>","text":"<p>Get the name of all the descriptors of this calculator</p>"},{"location":"api/molfeat.calc.html#molfeat.calc.fingerprints.FPCalculator.counting","title":"<code>counting = counting or '-count' in self.method</code>  <code>instance-attribute</code>","text":""},{"location":"api/molfeat.calc.html#molfeat.calc.fingerprints.FPCalculator.input_length","title":"<code>input_length = length</code>  <code>instance-attribute</code>","text":""},{"location":"api/molfeat.calc.html#molfeat.calc.fingerprints.FPCalculator.method","title":"<code>method = method.lower()</code>  <code>instance-attribute</code>","text":""},{"location":"api/molfeat.calc.html#molfeat.calc.fingerprints.FPCalculator.params","title":"<code>params = default_params</code>  <code>instance-attribute</code>","text":""},{"location":"api/molfeat.calc.html#molfeat.calc.fingerprints.FPCalculator.__call__","title":"<code>__call__(mol, raw=False)</code>","text":"<p>Compute the Fingerprint of a molecule</p> <p>Parameters:</p> Name Type Description Default <code>mol</code> <code>Union[rdchem.Mol, str]</code> <p>the molecule of interest</p> required <code>raw</code> <code>bool</code> <p>whether to keep original datatype or convert to numpy. Useful for rdkit's similarity functions</p> <code>False</code> <p>Returns:</p> Name Type Description <code>props</code> <code>np.ndarray</code> <p>list of computed rdkit molecular descriptors</p> Source code in <code>molfeat/calc/fingerprints.py</code> <pre><code>def __call__(self, mol: Union[rdchem.Mol, str], raw: bool = False):\nr\"\"\"\n    Compute the Fingerprint of a molecule\n\n    Args:\n        mol: the molecule of interest\n        raw: whether to keep original datatype or convert to numpy. Useful for rdkit's similarity functions\n\n    Returns:\n        props (np.ndarray): list of computed rdkit molecular descriptors\n    \"\"\"\n    mol = dm.to_mol(mol)\n    fp_val = FP_FUNCS[self.method](mol, **self.params)\n    if self.counting:\n        fp_val = fold_count_fp(fp_val, self._length)\n    if not raw:\n        fp_val = to_numpy(fp_val)\n    if self.counting and raw:\n        # converint the counted values to SparseInt again\n        fp_val = to_fp(fp_val, bitvect=False)\n    return fp_val\n</code></pre>"},{"location":"api/molfeat.calc.html#molfeat.calc.fingerprints.FPCalculator.__getstate__","title":"<code>__getstate__()</code>","text":"Source code in <code>molfeat/calc/fingerprints.py</code> <pre><code>def __getstate__(self):\n    # EN: note that the state is standardized with all the parameter\n    # because of the possibility of default changing after\n    state = {}\n    state[\"length\"] = self.input_length\n    state[\"input_length\"] = self.input_length\n    state[\"method\"] = self.method\n    state[\"counting\"] = self.counting\n    state[\"params\"] = self.params\n    return state\n</code></pre>"},{"location":"api/molfeat.calc.html#molfeat.calc.fingerprints.FPCalculator.__init__","title":"<code>__init__(method, length=None, counting=False, **kwargs)</code>","text":"<p>Compute the given fingeprint for a molecule</p> <p>Note</p> <p>For efficiency reason, count fingerprints are hashed and potentially re-folded and the count corresponds to the number of bits set to true</p> <p>Parameters:</p> Name Type Description Default <code>method</code> <code>str</code> <p>Name of the fingerprint method to use</p> required <code>length</code> <code>int</code> <p>Length of the fingerprint. Defaults to None. The default corresponds to the fingerpint default.</p> <code>None</code> <code>counting</code> <code>bool</code> <p>Whether to use the count version of the fingerprint</p> <code>False</code> <code>kwargs</code> <code>dict</code> <p>any parameters to the fingerprint algorithm</p> <code>{}</code> Source code in <code>molfeat/calc/fingerprints.py</code> <pre><code>def __init__(\n    self,\n    method: str,\n    length: Optional[int] = None,\n    counting: bool = False,\n    **kwargs,\n):\n\"\"\"Compute the given fingeprint for a molecule\n\n    !!! note\n        For efficiency reason, count fingerprints are hashed and potentially\n        re-folded and the count corresponds to the number of bits set to true\n\n    Args:\n        method (str): Name of the fingerprint method to use\n        length (int, optional): Length of the fingerprint. Defaults to None.\n            The default corresponds to the fingerpint default.\n        counting (bool, optional): Whether to use the count version of the fingerprint\n        kwargs (dict): any parameters to the fingerprint algorithm\n    \"\"\"\n    self.method = method.lower()\n    self.counting = counting or \"-count\" in self.method\n    if self.counting and not \"-count\" in self.method:\n        self.method = self.method + \"-count\"\n    self.input_length = length\n    if self.method not in FP_FUNCS:\n        raise ValueError(f\"Method {self.method} is not a supported featurizer\")\n    default_params = copy.deepcopy(FP_DEF_PARAMS[method])\n    unknown_params = set(kwargs.keys()).difference(set(default_params.keys()))\n    if unknown_params:\n        logger.error(f\"Params: {unknown_params} are not valid for {method}\")\n    self.params = default_params\n    self.params.update({k: kwargs[k] for k in kwargs if k in default_params.keys()})\n    self._length = self._set_length(length)\n</code></pre>"},{"location":"api/molfeat.calc.html#molfeat.calc.fingerprints.FPCalculator.__len__","title":"<code>__len__()</code>","text":"<p>Return the length of the calculator</p> Source code in <code>molfeat/calc/fingerprints.py</code> <pre><code>def __len__(self):\n\"\"\"Return the length of the calculator\"\"\"\n    return self._length\n</code></pre>"},{"location":"api/molfeat.calc.html#molfeat.calc.fingerprints.FPCalculator.__setstate__","title":"<code>__setstate__(state)</code>","text":"<p>Set the state of the featurizer</p> Source code in <code>molfeat/calc/fingerprints.py</code> <pre><code>def __setstate__(self, state: dict):\n\"\"\"Set the state of the featurizer\"\"\"\n    self.__dict__.update(state)\n    self._length = self._set_length(self.input_length)\n</code></pre>"},{"location":"api/molfeat.calc.html#molfeat.calc.fingerprints.FPCalculator.to_state_dict","title":"<code>to_state_dict()</code>","text":"<p>Get the state dictionary</p> Source code in <code>molfeat/calc/fingerprints.py</code> <pre><code>def to_state_dict(self):\n\"\"\"Get the state dictionary\"\"\"\n    state_dict = super().to_state_dict()\n    cur_params = self.params\n    default_params = copy.deepcopy(FP_DEF_PARAMS[state_dict[\"args\"][\"method\"]])\n    state_dict[\"args\"].update(\n        {\n            k: cur_params[k]\n            for k in cur_params\n            if (cur_params[k] != default_params[k] and cur_params[k] is not None)\n        }\n    )\n    # we want to keep all the additional parameters in the state dict\n    return state_dict\n</code></pre>"},{"location":"api/molfeat.calc.html#descriptors","title":"<code>Descriptors</code>","text":""},{"location":"api/molfeat.calc.html#molfeat.calc.descriptors.MordredDescriptors","title":"<code>MordredDescriptors</code>","text":"<p>         Bases: <code>SerializableCalculator</code></p> <p>Compute mordred descriptors. The descriptor calculator does not mask errors in featurization and will propagate them.</p> <p>Note</p> <p>Mordred descriptors can results in undefined or nan behaviour depending on your input molecule. It is recommended that the user handles those nan values himself by either removing the descriptor or imputing the missing values.</p> Source code in <code>molfeat/calc/descriptors.py</code> <pre><code>class MordredDescriptors(SerializableCalculator):\nr\"\"\"\n    Compute mordred descriptors.\n    The descriptor calculator does not mask errors in featurization and will propagate them.\n\n    !!! note\n        Mordred descriptors can results in undefined or nan behaviour depending on your input molecule.\n        It is recommended that the user handles those nan values himself by either removing the descriptor\n        or imputing the missing values.\n    \"\"\"\n\n    def __init__(\n        self,\n        ignore_3D: bool = True,\n        replace_nan: bool = False,\n        do_not_standardize: bool = False,\n        **kwargs,\n    ):\n\"\"\"Mordred descriptor computation\n\n        Args:\n            ignore_3D (bool, optional): Whether to ignore 3D descriptors or include them\n            replace_nan (bool, optional): Whether to replace nan or infinite values. Defaults to False.\n            do_not_standardize: Whether to force standardize molecules or keep it the same\n\n        \"\"\"\n        if not requires.check(\"mordred\"):\n            logger.error(\n                \"`mordred` is not available, please install it `pip install 'mordred[full]'`\"\n            )\n            raise ImportError(\"Cannot import `mordred`\")\n        self.replace_nan = replace_nan\n        self.ignore_3D = ignore_3D\n        self.do_not_standardize = do_not_standardize\n        self._calc = None\n        self._init_calc()\n\n    def _init_calc(self):\n\"\"\"Initialize mordred calculator\"\"\"\n        self._calc = MordredCalculator(mordred_descriptors, ignore_3D=self.ignore_3D)\n\n    @property\n    def columns(self):\n\"\"\"\n        Get the name of all the descriptors of this calculator\n        \"\"\"\n        return [str(x) for x in self._calc.descriptors]\n\n    def __len__(self):\n\"\"\"Return the length of the calculator\"\"\"\n        return len(self._calc)\n\n    def __getstate__(self):\n\"\"\"Serialize the class for pickling.\"\"\"\n        state = {}\n        state[\"ignore_3D\"] = self.ignore_3D\n        state[\"replace_nan\"] = self.replace_nan\n        state[\"do_not_standardize\"] = getattr(self, \"do_not_standardize\", False)\n        return state\n\n    def __setstate__(self, state: dict):\n\"\"\"Reload the class from pickling.\"\"\"\n        self.__dict__.update(state)\n        self._init_calc()\n\n    def __call__(self, mol: Union[rdchem.Mol, str], conformer_id: Optional[int] = -1):\nr\"\"\"\n        Get rdkit basic descriptors for a molecule\n\n        Args:\n            mol: the molecule of interest\n            conformer_id (int, optional): Optional\n\n        Returns:\n            props (np.ndarray): list of computed mordred molecular descriptors\n        \"\"\"\n        mol = dm.to_mol(mol)\n        vals = self._calc(mol, conformer_id).fill_missing()\n        vals = to_numpy(vals)\n        if self.replace_nan:\n            vals = np.nan_to_num(vals)\n        return vals\n</code></pre>"},{"location":"api/molfeat.calc.html#molfeat.calc.descriptors.MordredDescriptors.columns","title":"<code>columns</code>  <code>property</code>","text":"<p>Get the name of all the descriptors of this calculator</p>"},{"location":"api/molfeat.calc.html#molfeat.calc.descriptors.MordredDescriptors.do_not_standardize","title":"<code>do_not_standardize = do_not_standardize</code>  <code>instance-attribute</code>","text":""},{"location":"api/molfeat.calc.html#molfeat.calc.descriptors.MordredDescriptors.ignore_3D","title":"<code>ignore_3D = ignore_3D</code>  <code>instance-attribute</code>","text":""},{"location":"api/molfeat.calc.html#molfeat.calc.descriptors.MordredDescriptors.replace_nan","title":"<code>replace_nan = replace_nan</code>  <code>instance-attribute</code>","text":""},{"location":"api/molfeat.calc.html#molfeat.calc.descriptors.MordredDescriptors.__call__","title":"<code>__call__(mol, conformer_id=-1)</code>","text":"<p>Get rdkit basic descriptors for a molecule</p> <p>Parameters:</p> Name Type Description Default <code>mol</code> <code>Union[rdchem.Mol, str]</code> <p>the molecule of interest</p> required <code>conformer_id</code> <code>int</code> <p>Optional</p> <code>-1</code> <p>Returns:</p> Name Type Description <code>props</code> <code>np.ndarray</code> <p>list of computed mordred molecular descriptors</p> Source code in <code>molfeat/calc/descriptors.py</code> <pre><code>def __call__(self, mol: Union[rdchem.Mol, str], conformer_id: Optional[int] = -1):\nr\"\"\"\n    Get rdkit basic descriptors for a molecule\n\n    Args:\n        mol: the molecule of interest\n        conformer_id (int, optional): Optional\n\n    Returns:\n        props (np.ndarray): list of computed mordred molecular descriptors\n    \"\"\"\n    mol = dm.to_mol(mol)\n    vals = self._calc(mol, conformer_id).fill_missing()\n    vals = to_numpy(vals)\n    if self.replace_nan:\n        vals = np.nan_to_num(vals)\n    return vals\n</code></pre>"},{"location":"api/molfeat.calc.html#molfeat.calc.descriptors.MordredDescriptors.__getstate__","title":"<code>__getstate__()</code>","text":"<p>Serialize the class for pickling.</p> Source code in <code>molfeat/calc/descriptors.py</code> <pre><code>def __getstate__(self):\n\"\"\"Serialize the class for pickling.\"\"\"\n    state = {}\n    state[\"ignore_3D\"] = self.ignore_3D\n    state[\"replace_nan\"] = self.replace_nan\n    state[\"do_not_standardize\"] = getattr(self, \"do_not_standardize\", False)\n    return state\n</code></pre>"},{"location":"api/molfeat.calc.html#molfeat.calc.descriptors.MordredDescriptors.__init__","title":"<code>__init__(ignore_3D=True, replace_nan=False, do_not_standardize=False, **kwargs)</code>","text":"<p>Mordred descriptor computation</p> <p>Parameters:</p> Name Type Description Default <code>ignore_3D</code> <code>bool</code> <p>Whether to ignore 3D descriptors or include them</p> <code>True</code> <code>replace_nan</code> <code>bool</code> <p>Whether to replace nan or infinite values. Defaults to False.</p> <code>False</code> <code>do_not_standardize</code> <code>bool</code> <p>Whether to force standardize molecules or keep it the same</p> <code>False</code> Source code in <code>molfeat/calc/descriptors.py</code> <pre><code>def __init__(\n    self,\n    ignore_3D: bool = True,\n    replace_nan: bool = False,\n    do_not_standardize: bool = False,\n    **kwargs,\n):\n\"\"\"Mordred descriptor computation\n\n    Args:\n        ignore_3D (bool, optional): Whether to ignore 3D descriptors or include them\n        replace_nan (bool, optional): Whether to replace nan or infinite values. Defaults to False.\n        do_not_standardize: Whether to force standardize molecules or keep it the same\n\n    \"\"\"\n    if not requires.check(\"mordred\"):\n        logger.error(\n            \"`mordred` is not available, please install it `pip install 'mordred[full]'`\"\n        )\n        raise ImportError(\"Cannot import `mordred`\")\n    self.replace_nan = replace_nan\n    self.ignore_3D = ignore_3D\n    self.do_not_standardize = do_not_standardize\n    self._calc = None\n    self._init_calc()\n</code></pre>"},{"location":"api/molfeat.calc.html#molfeat.calc.descriptors.MordredDescriptors.__len__","title":"<code>__len__()</code>","text":"<p>Return the length of the calculator</p> Source code in <code>molfeat/calc/descriptors.py</code> <pre><code>def __len__(self):\n\"\"\"Return the length of the calculator\"\"\"\n    return len(self._calc)\n</code></pre>"},{"location":"api/molfeat.calc.html#molfeat.calc.descriptors.MordredDescriptors.__setstate__","title":"<code>__setstate__(state)</code>","text":"<p>Reload the class from pickling.</p> Source code in <code>molfeat/calc/descriptors.py</code> <pre><code>def __setstate__(self, state: dict):\n\"\"\"Reload the class from pickling.\"\"\"\n    self.__dict__.update(state)\n    self._init_calc()\n</code></pre>"},{"location":"api/molfeat.calc.html#molfeat.calc.descriptors.RDKitDescriptors2D","title":"<code>RDKitDescriptors2D</code>","text":"<p>         Bases: <code>SerializableCalculator</code></p> <p>Compute a list of available  rdkit 2D descriptors for a molecule. The descriptor calculator does not mask errors in featurization and will propagate them</p> Source code in <code>molfeat/calc/descriptors.py</code> <pre><code>class RDKitDescriptors2D(SerializableCalculator):\nr\"\"\"\n    Compute a list of available  rdkit 2D descriptors for a molecule.\n    The descriptor calculator does not mask errors in featurization and will propagate them\n    \"\"\"\n\n    DESCRIPTORS_FN = {name: fn for (name, fn) in Descriptors.descList}\n\n    def __init__(\n        self,\n        replace_nan: Optional[bool] = False,\n        augment: Optional[bool] = True,\n        descrs: List = None,\n        avg_ipc: Optional[bool] = True,\n        do_not_standardize: Optional[bool] = False,\n        **kwargs,\n    ):\n\"\"\"RDKit descriptor computation\n\n        Args:\n            replace_nan: Whether to replace nan or infinite values. Defaults to False.\n            augment: Whether to augment the descriptors with some additional custom features\n            descrs: Subset of available features to consider if not None\n            avg_ipc: Whether to average IPC values or to use rdkit original\n            do_not_standardize: Whether to force standardization of molecule before computation of the descriptor.\n                Set to True if you want molfeat&lt;=0.5.3 behaviour\n        \"\"\"\n        self.replace_nan = replace_nan\n        self.augment = augment\n        self.descrs = descrs\n        self.avg_ipc = avg_ipc\n        self.do_not_standardize = do_not_standardize\n        all_features = [d[0] for d in Descriptors.descList]\n        if self.augment:\n            all_features += [\n                \"NumAtomStereoCenters\",\n                \"NumUnspecifiedAtomStereoCenters\",\n                \"NumBridgeheadAtoms\",\n                \"NumAmideBonds\",\n                \"NumSpiroAtoms\",\n                \"Alerts\",\n            ]\n        if descrs is not None:\n            self._columns = [x for x in descrs if x in all_features]\n            unknown_descrs = set(descrs) - set(all_features)\n            if len(unknown_descrs) &gt; 0:\n                logger.warning(f\"Following features are not supported: {unknown_descrs}\")\n        else:\n            self._columns = all_features\n\n    def __getstate__(self):\n\"\"\"Serialize the class for pickling.\"\"\"\n        state = {}\n        state[\"replace_nan\"] = self.replace_nan\n        state[\"augment\"] = self.augment\n        state[\"descrs\"] = self.descrs\n        state[\"_columns\"] = self._columns\n\n        # EN: set `avg_ipc` and `standardize`` default value to False for compat until next release\n        state[\"avg_ipc\"] = getattr(self, \"avg_ipc\", False)\n        state[\"do_not_standardize\"] = getattr(self, \"do_not_standardize\", False)\n        return state\n\n    def _compute_extra_features(self, mol: Union[rdchem.Mol, str]):\n\"\"\"Compute the extra properties required for the augmented features version\n\n        Args:\n            mol: Input molecule\n\n        Returns:\n            props (dict): Dict of extra molecular properties\n        \"\"\"\n        mol = copy.deepcopy(mol)\n        FindMolChiralCenters(mol, force=True)\n        # \"NumAtomStereoCenters\", \"NumUnspecifiedAtomStereoCenters\", \"NumBridgeheadAtoms\", \"NumAmideBonds\", \"NumSpiroAtoms\"\n        p_obj = rdMolDescriptors.Properties()\n        props = OrderedDict(zip(p_obj.GetPropertyNames(), p_obj.ComputeProperties(mol)))\n        # Alerts\n        qed_props = properties(mol)\n        props[\"Alerts\"] = qed_props.ALERTS\n        return props\n\n    @property\n    def columns(self):\n\"\"\"\n        Get the name of all the descriptors of this calculator\n        \"\"\"\n        return self._columns\n\n    def __len__(self):\n\"\"\"Return the length of the calculator\"\"\"\n        return len(self._columns)\n\n    @requires_standardization(disconnect_metals=True, remove_salt=True)\n    def __call__(self, mol: Union[rdchem.Mol, str]):\nr\"\"\"\n        Get rdkit basic descriptors for a molecule\n\n        Args:\n            mol: the molecule of interest\n\n        Returns:\n            props (np.ndarray): list of computed rdkit molecular descriptors\n        \"\"\"\n        mol = dm.to_mol(mol)\n        vals = []\n        props = {}\n        if self.augment:\n            props = self._compute_extra_features(mol)\n        fixed_charge_descr = _charge_descriptors_computation(mol)\n        for name in self.columns:\n            val = float(\"nan\")\n            if name in fixed_charge_descr:\n                val = fixed_charge_descr[name]\n            elif name == \"Ipc\" and self.avg_ipc:  # bug fix of the rdkit IPC value\n                val = self.DESCRIPTORS_FN[name](mol, avg=True)\n            elif name in self.DESCRIPTORS_FN:\n                val = self.DESCRIPTORS_FN[name](mol)\n            elif name in props:\n                val = props[name]\n            else:\n                raise ValueError(f\"Property: {name} is not supported !\")\n            vals.append(val)\n        vals = to_numpy(vals)\n        if self.replace_nan:\n            vals = np.nan_to_num(vals)\n        return vals\n</code></pre>"},{"location":"api/molfeat.calc.html#molfeat.calc.descriptors.RDKitDescriptors2D.DESCRIPTORS_FN","title":"<code>DESCRIPTORS_FN = {name: fn for (name, fn) in Descriptors.descList}</code>  <code>class-attribute</code>","text":""},{"location":"api/molfeat.calc.html#molfeat.calc.descriptors.RDKitDescriptors2D.augment","title":"<code>augment = augment</code>  <code>instance-attribute</code>","text":""},{"location":"api/molfeat.calc.html#molfeat.calc.descriptors.RDKitDescriptors2D.avg_ipc","title":"<code>avg_ipc = avg_ipc</code>  <code>instance-attribute</code>","text":""},{"location":"api/molfeat.calc.html#molfeat.calc.descriptors.RDKitDescriptors2D.columns","title":"<code>columns</code>  <code>property</code>","text":"<p>Get the name of all the descriptors of this calculator</p>"},{"location":"api/molfeat.calc.html#molfeat.calc.descriptors.RDKitDescriptors2D.descrs","title":"<code>descrs = descrs</code>  <code>instance-attribute</code>","text":""},{"location":"api/molfeat.calc.html#molfeat.calc.descriptors.RDKitDescriptors2D.do_not_standardize","title":"<code>do_not_standardize = do_not_standardize</code>  <code>instance-attribute</code>","text":""},{"location":"api/molfeat.calc.html#molfeat.calc.descriptors.RDKitDescriptors2D.replace_nan","title":"<code>replace_nan = replace_nan</code>  <code>instance-attribute</code>","text":""},{"location":"api/molfeat.calc.html#molfeat.calc.descriptors.RDKitDescriptors2D.__call__","title":"<code>__call__(mol)</code>","text":"<p>Get rdkit basic descriptors for a molecule</p> <p>Parameters:</p> Name Type Description Default <code>mol</code> <code>Union[rdchem.Mol, str]</code> <p>the molecule of interest</p> required <p>Returns:</p> Name Type Description <code>props</code> <code>np.ndarray</code> <p>list of computed rdkit molecular descriptors</p> Source code in <code>molfeat/calc/descriptors.py</code> <pre><code>@requires_standardization(disconnect_metals=True, remove_salt=True)\ndef __call__(self, mol: Union[rdchem.Mol, str]):\nr\"\"\"\n    Get rdkit basic descriptors for a molecule\n\n    Args:\n        mol: the molecule of interest\n\n    Returns:\n        props (np.ndarray): list of computed rdkit molecular descriptors\n    \"\"\"\n    mol = dm.to_mol(mol)\n    vals = []\n    props = {}\n    if self.augment:\n        props = self._compute_extra_features(mol)\n    fixed_charge_descr = _charge_descriptors_computation(mol)\n    for name in self.columns:\n        val = float(\"nan\")\n        if name in fixed_charge_descr:\n            val = fixed_charge_descr[name]\n        elif name == \"Ipc\" and self.avg_ipc:  # bug fix of the rdkit IPC value\n            val = self.DESCRIPTORS_FN[name](mol, avg=True)\n        elif name in self.DESCRIPTORS_FN:\n            val = self.DESCRIPTORS_FN[name](mol)\n        elif name in props:\n            val = props[name]\n        else:\n            raise ValueError(f\"Property: {name} is not supported !\")\n        vals.append(val)\n    vals = to_numpy(vals)\n    if self.replace_nan:\n        vals = np.nan_to_num(vals)\n    return vals\n</code></pre>"},{"location":"api/molfeat.calc.html#molfeat.calc.descriptors.RDKitDescriptors2D.__getstate__","title":"<code>__getstate__()</code>","text":"<p>Serialize the class for pickling.</p> Source code in <code>molfeat/calc/descriptors.py</code> <pre><code>def __getstate__(self):\n\"\"\"Serialize the class for pickling.\"\"\"\n    state = {}\n    state[\"replace_nan\"] = self.replace_nan\n    state[\"augment\"] = self.augment\n    state[\"descrs\"] = self.descrs\n    state[\"_columns\"] = self._columns\n\n    # EN: set `avg_ipc` and `standardize`` default value to False for compat until next release\n    state[\"avg_ipc\"] = getattr(self, \"avg_ipc\", False)\n    state[\"do_not_standardize\"] = getattr(self, \"do_not_standardize\", False)\n    return state\n</code></pre>"},{"location":"api/molfeat.calc.html#molfeat.calc.descriptors.RDKitDescriptors2D.__init__","title":"<code>__init__(replace_nan=False, augment=True, descrs=None, avg_ipc=True, do_not_standardize=False, **kwargs)</code>","text":"<p>RDKit descriptor computation</p> <p>Parameters:</p> Name Type Description Default <code>replace_nan</code> <code>Optional[bool]</code> <p>Whether to replace nan or infinite values. Defaults to False.</p> <code>False</code> <code>augment</code> <code>Optional[bool]</code> <p>Whether to augment the descriptors with some additional custom features</p> <code>True</code> <code>descrs</code> <code>List</code> <p>Subset of available features to consider if not None</p> <code>None</code> <code>avg_ipc</code> <code>Optional[bool]</code> <p>Whether to average IPC values or to use rdkit original</p> <code>True</code> <code>do_not_standardize</code> <code>Optional[bool]</code> <p>Whether to force standardization of molecule before computation of the descriptor. Set to True if you want molfeat&lt;=0.5.3 behaviour</p> <code>False</code> Source code in <code>molfeat/calc/descriptors.py</code> <pre><code>def __init__(\n    self,\n    replace_nan: Optional[bool] = False,\n    augment: Optional[bool] = True,\n    descrs: List = None,\n    avg_ipc: Optional[bool] = True,\n    do_not_standardize: Optional[bool] = False,\n    **kwargs,\n):\n\"\"\"RDKit descriptor computation\n\n    Args:\n        replace_nan: Whether to replace nan or infinite values. Defaults to False.\n        augment: Whether to augment the descriptors with some additional custom features\n        descrs: Subset of available features to consider if not None\n        avg_ipc: Whether to average IPC values or to use rdkit original\n        do_not_standardize: Whether to force standardization of molecule before computation of the descriptor.\n            Set to True if you want molfeat&lt;=0.5.3 behaviour\n    \"\"\"\n    self.replace_nan = replace_nan\n    self.augment = augment\n    self.descrs = descrs\n    self.avg_ipc = avg_ipc\n    self.do_not_standardize = do_not_standardize\n    all_features = [d[0] for d in Descriptors.descList]\n    if self.augment:\n        all_features += [\n            \"NumAtomStereoCenters\",\n            \"NumUnspecifiedAtomStereoCenters\",\n            \"NumBridgeheadAtoms\",\n            \"NumAmideBonds\",\n            \"NumSpiroAtoms\",\n            \"Alerts\",\n        ]\n    if descrs is not None:\n        self._columns = [x for x in descrs if x in all_features]\n        unknown_descrs = set(descrs) - set(all_features)\n        if len(unknown_descrs) &gt; 0:\n            logger.warning(f\"Following features are not supported: {unknown_descrs}\")\n    else:\n        self._columns = all_features\n</code></pre>"},{"location":"api/molfeat.calc.html#molfeat.calc.descriptors.RDKitDescriptors2D.__len__","title":"<code>__len__()</code>","text":"<p>Return the length of the calculator</p> Source code in <code>molfeat/calc/descriptors.py</code> <pre><code>def __len__(self):\n\"\"\"Return the length of the calculator\"\"\"\n    return len(self._columns)\n</code></pre>"},{"location":"api/molfeat.calc.html#molfeat.calc.descriptors.RDKitDescriptors3D","title":"<code>RDKitDescriptors3D</code>","text":"<p>         Bases: <code>SerializableCalculator</code></p> <p>Compute a list of 3D rdkit descriptors</p> Source code in <code>molfeat/calc/descriptors.py</code> <pre><code>class RDKitDescriptors3D(SerializableCalculator):\n\"\"\"\n    Compute a list of 3D rdkit descriptors\n    \"\"\"\n\n    def __init__(\n        self,\n        replace_nan: bool = False,\n        ignore_descrs: list = [\"CalcGETAWAY\"],\n        **kwargs,\n    ):\n\"\"\"Compute 3D descriptors\n\n        Args:\n            replace_nan (bool, optional): Whether to replace nan or infinite values. Defaults to False.\n            ignore_descrs (list, optional): Descriptors to ignore for performance issues. Defaults to [\"CalcGETAWAY\"].\n        \"\"\"\n        self.replace_nan = replace_nan\n\n        self._descr = [\n            \"CalcAsphericity\",\n            \"CalcEccentricity\",\n            \"CalcInertialShapeFactor\",\n            \"CalcNPR1\",\n            \"CalcNPR2\",\n            \"CalcPMI1\",\n            \"CalcPMI2\",\n            \"CalcPMI3\",\n            \"CalcRadiusOfGyration\",\n            \"CalcSpherocityIndex\",\n            \"CalcPBF\",\n        ]\n\n        self.ignore_descrs = ignore_descrs or []\n        self._vec_descr = [\n            \"CalcAUTOCORR3D\",\n            \"CalcRDF\",\n            \"CalcMORSE\",\n            \"CalcWHIM\",\n            \"CalcGETAWAY\",\n        ]\n        self._vec_descr_length = [80, 210, 224, 114, 273]\n        self._columns = [x for x in self._descr if x not in self.ignore_descrs]\n        for desc, desc_len in zip(self._vec_descr, self._vec_descr_length):\n            if desc in self.ignore_descrs:\n                continue\n            for pos in range(desc_len):\n                self._columns.append(f\"{desc}_{pos}\")\n\n    def __getstate__(self):\n\"\"\"Serialize the class for pickling.\"\"\"\n        state = {}\n        state[\"replace_nan\"] = self.replace_nan\n        state[\"ignore_descrs\"] = self.ignore_descrs\n        state[\"_columns\"] = self._columns\n        return state\n\n    def __len__(self):\n\"\"\"Get the length of the descriptor\"\"\"\n        return len(self._columns)\n\n    @property\n    def columns(self):\n\"\"\"Get the descriptors columns\"\"\"\n        return self._columns\n\n    @requires_conformer\n    def __call__(self, mol: Union[rdchem.Mol, str], conformer_id: Optional[int] = -1):\nr\"\"\"\n        Get rdkit 3D descriptors for a molecule\n\n        Args:\n            mol: the molecule of interest\n            conformer_id (int, optional): Optional conformer id. Defaults to -1.\n\n        Returns:\n            props (np.ndarray): list of computed mordred molecular descriptors\n        \"\"\"\n\n        mol = dm.to_mol(mol)\n        desc_val = []\n        for desc in self._descr:\n            val = float(\"nan\")\n            if desc not in self.ignore_descrs:\n                try:\n                    val = getattr(Descriptors3D.rdMolDescriptors, desc)(mol, confId=conformer_id)\n                except:\n                    pass\n                desc_val.append(val)\n        for i, desc in enumerate(self._vec_descr):\n            val = [float(\"nan\")] * self._vec_descr_length[i]\n            if desc not in self.ignore_descrs:\n                try:\n                    val = getattr(Descriptors3D.rdMolDescriptors, desc)(mol, confId=conformer_id)\n                except:\n                    pass\n                desc_val.extend(val)\n\n        desc_val = to_numpy(desc_val)\n        if self.replace_nan:\n            desc_val = np.nan_to_num(desc_val)\n        return desc_val\n</code></pre>"},{"location":"api/molfeat.calc.html#molfeat.calc.descriptors.RDKitDescriptors3D.columns","title":"<code>columns</code>  <code>property</code>","text":"<p>Get the descriptors columns</p>"},{"location":"api/molfeat.calc.html#molfeat.calc.descriptors.RDKitDescriptors3D.ignore_descrs","title":"<code>ignore_descrs = ignore_descrs or []</code>  <code>instance-attribute</code>","text":""},{"location":"api/molfeat.calc.html#molfeat.calc.descriptors.RDKitDescriptors3D.replace_nan","title":"<code>replace_nan = replace_nan</code>  <code>instance-attribute</code>","text":""},{"location":"api/molfeat.calc.html#molfeat.calc.descriptors.RDKitDescriptors3D.__call__","title":"<code>__call__(mol, conformer_id=-1)</code>","text":"<p>Get rdkit 3D descriptors for a molecule</p> <p>Parameters:</p> Name Type Description Default <code>mol</code> <code>Union[rdchem.Mol, str]</code> <p>the molecule of interest</p> required <code>conformer_id</code> <code>int</code> <p>Optional conformer id. Defaults to -1.</p> <code>-1</code> <p>Returns:</p> Name Type Description <code>props</code> <code>np.ndarray</code> <p>list of computed mordred molecular descriptors</p> Source code in <code>molfeat/calc/descriptors.py</code> <pre><code>@requires_conformer\ndef __call__(self, mol: Union[rdchem.Mol, str], conformer_id: Optional[int] = -1):\nr\"\"\"\n    Get rdkit 3D descriptors for a molecule\n\n    Args:\n        mol: the molecule of interest\n        conformer_id (int, optional): Optional conformer id. Defaults to -1.\n\n    Returns:\n        props (np.ndarray): list of computed mordred molecular descriptors\n    \"\"\"\n\n    mol = dm.to_mol(mol)\n    desc_val = []\n    for desc in self._descr:\n        val = float(\"nan\")\n        if desc not in self.ignore_descrs:\n            try:\n                val = getattr(Descriptors3D.rdMolDescriptors, desc)(mol, confId=conformer_id)\n            except:\n                pass\n            desc_val.append(val)\n    for i, desc in enumerate(self._vec_descr):\n        val = [float(\"nan\")] * self._vec_descr_length[i]\n        if desc not in self.ignore_descrs:\n            try:\n                val = getattr(Descriptors3D.rdMolDescriptors, desc)(mol, confId=conformer_id)\n            except:\n                pass\n            desc_val.extend(val)\n\n    desc_val = to_numpy(desc_val)\n    if self.replace_nan:\n        desc_val = np.nan_to_num(desc_val)\n    return desc_val\n</code></pre>"},{"location":"api/molfeat.calc.html#molfeat.calc.descriptors.RDKitDescriptors3D.__getstate__","title":"<code>__getstate__()</code>","text":"<p>Serialize the class for pickling.</p> Source code in <code>molfeat/calc/descriptors.py</code> <pre><code>def __getstate__(self):\n\"\"\"Serialize the class for pickling.\"\"\"\n    state = {}\n    state[\"replace_nan\"] = self.replace_nan\n    state[\"ignore_descrs\"] = self.ignore_descrs\n    state[\"_columns\"] = self._columns\n    return state\n</code></pre>"},{"location":"api/molfeat.calc.html#molfeat.calc.descriptors.RDKitDescriptors3D.__init__","title":"<code>__init__(replace_nan=False, ignore_descrs=['CalcGETAWAY'], **kwargs)</code>","text":"<p>Compute 3D descriptors</p> <p>Parameters:</p> Name Type Description Default <code>replace_nan</code> <code>bool</code> <p>Whether to replace nan or infinite values. Defaults to False.</p> <code>False</code> <code>ignore_descrs</code> <code>list</code> <p>Descriptors to ignore for performance issues. Defaults to [\"CalcGETAWAY\"].</p> <code>['CalcGETAWAY']</code> Source code in <code>molfeat/calc/descriptors.py</code> <pre><code>def __init__(\n    self,\n    replace_nan: bool = False,\n    ignore_descrs: list = [\"CalcGETAWAY\"],\n    **kwargs,\n):\n\"\"\"Compute 3D descriptors\n\n    Args:\n        replace_nan (bool, optional): Whether to replace nan or infinite values. Defaults to False.\n        ignore_descrs (list, optional): Descriptors to ignore for performance issues. Defaults to [\"CalcGETAWAY\"].\n    \"\"\"\n    self.replace_nan = replace_nan\n\n    self._descr = [\n        \"CalcAsphericity\",\n        \"CalcEccentricity\",\n        \"CalcInertialShapeFactor\",\n        \"CalcNPR1\",\n        \"CalcNPR2\",\n        \"CalcPMI1\",\n        \"CalcPMI2\",\n        \"CalcPMI3\",\n        \"CalcRadiusOfGyration\",\n        \"CalcSpherocityIndex\",\n        \"CalcPBF\",\n    ]\n\n    self.ignore_descrs = ignore_descrs or []\n    self._vec_descr = [\n        \"CalcAUTOCORR3D\",\n        \"CalcRDF\",\n        \"CalcMORSE\",\n        \"CalcWHIM\",\n        \"CalcGETAWAY\",\n    ]\n    self._vec_descr_length = [80, 210, 224, 114, 273]\n    self._columns = [x for x in self._descr if x not in self.ignore_descrs]\n    for desc, desc_len in zip(self._vec_descr, self._vec_descr_length):\n        if desc in self.ignore_descrs:\n            continue\n        for pos in range(desc_len):\n            self._columns.append(f\"{desc}_{pos}\")\n</code></pre>"},{"location":"api/molfeat.calc.html#molfeat.calc.descriptors.RDKitDescriptors3D.__len__","title":"<code>__len__()</code>","text":"<p>Get the length of the descriptor</p> Source code in <code>molfeat/calc/descriptors.py</code> <pre><code>def __len__(self):\n\"\"\"Get the length of the descriptor\"\"\"\n    return len(self._columns)\n</code></pre>"},{"location":"api/molfeat.calc.html#cats","title":"<code>CATS</code>","text":"<p>CATS 2D and 3D implementation based on original work by Rajarshi Guha rguha@indiana.edu 08/26/07 and Chris Arthur 1/11/2015 Rdkit port This version modernizes the code, improve performance, add supports for 3D as well as allowing distance binning. see: https://masterchemoinfo.u-strasbg.fr/Documents/Conferences/Lecture1_Pharmacophores_Schneider.pdf</p>"},{"location":"api/molfeat.calc.html#molfeat.calc.cats.CATS","title":"<code>CATS</code>","text":"<p>         Bases: <code>SerializableCalculator</code></p> <p>Cats descriptors calculator based on PPPs (potential pharmacophore points). Can be either 2D or 3D.</p> <p>!!! note:     We need to consider all pairwise combination of the 6 PPPs described in <code>CATS2D.SMARTS</code>     which would be $P(6,2) + 6$. However, as we only consider lexicographic order, the total size     is then $\frac{P(6,2)}{2} + 6 = 21$, explaining the size of <code>CATS2D.DESCRIPTORS</code></p> <p>Tip</p> <p>The CATS descriptor are sensitive to the number of atoms in a molecule, meaning, you would get different results if you add or remove hydrogen atoms</p> Source code in <code>molfeat/calc/cats.py</code> <pre><code>class CATS(SerializableCalculator):\n\"\"\"Cats descriptors calculator based on PPPs (potential pharmacophore points). Can be either 2D or 3D.\n\n    !!! note:\n        We need to consider all pairwise combination of the 6 PPPs described in `CATS2D.SMARTS`\n        which would be $P(6,2) + 6$. However, as we only consider lexicographic order, the total size\n        is then $\\frac{P(6,2)}{2} + 6 = 21$, explaining the size of `CATS2D.DESCRIPTORS`\n\n    !!! tip\n        The CATS descriptor are sensitive to the number of atoms in a molecule, meaning, you would get different\n        results if you add or remove hydrogen atoms\n\n    \"\"\"\n\n    SMARTS = {\n        \"D\": [\"[!$([#6,H0,-,-2,-3])]\"],\n        \"A\": [\"[!$([#6,F,Cl,Br,I,o,s,nX3,#7v5,#15v5,#16v4,#16v6,*+1,*+2,*+3])]\"],\n        \"P\": [\"[*+]\", \"[#7H2]\"],\n        \"N\": [\"[*-]\", \"[C&amp;$(C(=O)O),P&amp;$(P(=O)),S&amp;$(S(=O)O)]\"],\n        \"L\": [\n            \"[Cl,Br,I]\",\n            \"[S;D2;$(S(C)(C))]\",\n            \"[C;D2;$(C(=C)(=C))]\",\n            \"[C;D3;$(C(=C)(C)(C))]\",\n            \"[C;D4;$(C(C)(C)(C)(C))]\",\n            \"[C;D3;H1;$(C(C)(C)(C))]\",\n            \"[C;D2;H2;$(C(C)(C))]\",\n        ],\n        \"R\": [\"[a]\"],\n    }\n\n    DESCRIPTORS = [\n        \"DD\",\n        \"AD\",\n        \"DP\",\n        \"DN\",\n        \"DL\",\n        \"DR\",\n        \"AA\",\n        \"AP\",\n        \"AN\",\n        \"AL\",\n        \"AR\",\n        \"PP\",\n        \"NP\",\n        \"LP\",\n        \"PR\",\n        \"NN\",\n        \"LN\",\n        \"NR\",\n        \"LL\",\n        \"LR\",\n        \"RR\",\n    ]\n\n    MAX_DIST_DEFAULT_2D = 8\n    MAX_DIST_DEFAULT_3D = 5\n\n    def __init__(\n        self,\n        max_dist: Union[float, int] = None,\n        bins: List[int] = None,\n        scale: str = \"raw\",\n        use_3d_distances: bool = False,\n        **kwargs,\n    ):\n\"\"\"Calculator for the CATS descriptors.\n\n        `max_dist` and `bins` will both determine the length of the fingerprint vector,\n        which you can get by calling `len(calc)`\n\n        Args:\n            max_dist: Maximum distance between pairs. When set to None, the default for 2D is\n                set to `max_dist=8` and for 3D to `max_dist=5`.\n            bins: Bins to use. Defaults to equal spacing `[0, max_dist[`.\n            scale: How to scale the values. Supported values are:\n                 - 'raw' for the raw values.\n                 - 'num' for values normalized by the number of atoms.\n                 - 'count' for scaling based on occurence of the PPP.\n            use_3d_distances: Whether to use the 3D distances instead of the topological distances.\n                If set to True, the input molecules must contain a conformer.\n            kwargs: silently ignored extra parameters for compatibility with other calculators.\n        \"\"\"\n\n        # Set the max_dist default is set to None\n        if max_dist is None:\n            if use_3d_distances:\n                max_dist = CATS.MAX_DIST_DEFAULT_3D\n            else:\n                max_dist = CATS.MAX_DIST_DEFAULT_2D\n\n        self.max_dist = max_dist\n        self.use_3d_distances = use_3d_distances\n\n        if bins is None:\n            bins = list(np.arange(1, np.floor(self.max_dist + 1), 1))\n\n        # we don't allow interaction that exceed our distance threshold.\n        bins = [x for x in bins if x &lt;= self.max_dist]\n\n        # we start distance indexing at 0\n        if 0 not in bins:\n            bins += [0]\n\n        self.bins = list(sorted(bins))\n\n        self.scale = scale\n\n        self._set_columns()\n\n    def _set_columns(self):\n        self._columns = []\n        for label in self.DESCRIPTORS:\n            for i in range(len(self.bins)):\n                self._columns.append(f\"{label}.bins-{i}\")\n\n    @classmethod\n    @functools.lru_cache(maxsize=None)\n    def _pattern_to_mols(cls, smarts_dict=None):\n\"\"\"Convert dict of list of smarts to rdkit molecules\"\"\"\n\n        if smarts_dict is None:\n            smarts_dict = cls.SMARTS\n\n        smarts_mols = ddict(list)\n        for label, patterns in smarts_dict.items():\n            patterns = [dm.from_smarts(patt) for patt in patterns]\n            smarts_mols[label] = patterns\n\n        return smarts_mols\n\n    def _get_pcore_group(self, mol: Union[rdchem.Mol, str]):\n\"\"\"\n        Assign a PPP (potential pharmacophore points) to individual atoms of a molecule.\n\n        !!! note\n            The return value is a list of length `N_atoms` of the\n            input molecule. The i'th element of the list contains\n            a list of PPP labels that were identified for the i'th atom\n\n        Args:\n            mol: the molecule of interest\n\n        Returns:\n            ppp_labels (List[list]): list of all PPP labels for each atoms\n        \"\"\"\n\n        smarts_mols = CATS._pattern_to_mols()\n\n        ppp_labels = [\"\" for x in range(0, mol.GetNumAtoms())]\n        for label, patterns in smarts_mols.items():\n            for pattern in patterns:\n                matched = False\n                for matchbase in mol.GetSubstructMatches(pattern, uniquify=True):\n                    for idx in matchbase:\n                        if ppp_labels[idx] == \"\":\n                            ppp_labels[idx] = [label]\n                        else:\n                            tmp = ppp_labels[idx]\n                            tmp.append(label)\n                            ppp_labels[idx] = tmp\n                    matched = True\n                if matched:\n                    break\n        return ppp_labels\n\n    def _get_ppp_matrix(self, n_atoms: int, ppp_labels: List):\n\"\"\"Compute PPP matrix from label list\n\n        Args:\n            n_atoms (int): number of atoms\n            ppp_labels (list): PPP labels returned by\n\n        Returns:\n            pppm (dict): PPP matrix where the keys are the coordinate\n        \"\"\"\n\n        pppm = {}\n        for i in range(0, n_atoms):\n            ppp_i = ppp_labels[i]\n            if ppp_i == \"\":\n                continue\n            for j in range(0, n_atoms):\n                ppp_j = ppp_labels[j]\n                if ppp_j == \"\":\n                    continue\n                pairs = []\n                for x in ppp_i:\n                    for y in ppp_j:\n                        if (x, y) not in pairs and (y, x) not in pairs:\n                            ## make sure to add the labels in increasing\n                            ## lexicographical order\n                            if x &lt; y:\n                                tmp = (x, y)\n                            else:\n                                tmp = (y, x)\n                            pairs.append(tmp)\n                pppm[(i, j)] = pairs\n        return pppm\n\n    def _calculate(self, mol, dist_mat):\n\"\"\"Calculate the CATS2D descriptors for current molecule, given a distance matrix\"\"\"\n\n        n_atoms = mol.GetNumAtoms()\n        ppp_labels = self._get_pcore_group(mol)\n        ppp_mat = self._get_ppp_matrix(n_atoms, ppp_labels)\n\n        # get the counturence of each of the PPP's\n        ppp_count = dict(zip([\"D\", \"N\", \"A\", \"P\", \"L\", \"R\"], [0] * 6))\n        for label in ppp_labels:\n            for ppp in label:\n                ppp_count[ppp] = ppp_count[ppp] + 1\n\n        # lets calculate the CATS2D raw descriptor\n        # bins: a, b, c ==&gt; [a, b], [b, c], [c, *]\n        # a is always 0\n        desc = [[0 for x in range(len(self.bins))] for x in range(0, len(self.DESCRIPTORS))]\n        for (x, y), labels in ppp_mat.items():\n            dist = dist_mat[x, y]\n            # ignore all interactions greater than the max distance we set\n            # we cannot have negative distance\n            if dist &gt; self.max_dist or dist &lt; 0:\n                continue\n\n            for pair in labels:\n                idx = self.DESCRIPTORS.index(f\"{pair[0]}{pair[1]}\")\n                vals = desc[idx]\n                dist_bin = np.digitize(dist, self.bins)\n                # indexing at 0\n                vals[dist_bin - 1] += 1\n                desc[idx] = vals\n\n        if self.scale == \"num\":\n            for row in range(0, len(desc)):\n                for col in range(0, len(desc[0])):\n                    desc[row][col] = float(desc[row][col]) / n_atoms\n\n        elif self.scale == \"count\":\n            #  get the scaling factors\n            facs = [0] * len(self.DESCRIPTORS)\n            count = 0\n            for ppp in self.DESCRIPTORS:\n                facs[count] = ppp_count[ppp[0]] + ppp_count[ppp[1]]\n                count += 1\n\n            # each row in desc corresponds to a PPP pair\n            # so the scale factor is constant over cols of a row\n            count = 0\n            for i in range(0, len(desc)):\n                if facs[i] == 0:\n                    continue\n                for j in range(0, len(desc[0])):\n                    desc[i][j] = desc[i][j] / float(facs[i])\n\n        res = []\n        for row in desc:\n            for col in row:\n                res.append(col)\n        return res\n\n    def __len__(self):\n\"\"\"Return the length of the calculator\"\"\"\n        return len(self._columns)\n\n    def __call__(self, mol: Union[dm.Mol, str], conformer_id: int = -1):\n\"\"\"Get CATS 2D descriptors for a molecule\n\n        Args:\n            mol: the molecule of interest.\n            conformer_id: Optional conformer id. Only relevant when `use_3d_distances`\n                is set to True.\n\n        Returns:\n            props (np.ndarray): list of computed rdkit molecular descriptors\n        \"\"\"\n\n        mol = dm.to_mol(mol)\n\n        if self.use_3d_distances:\n            if mol.GetNumConformers() &lt; 1:  # type: ignore\n                raise ValueError(\"Expected a molecule with conformers information.\")\n\n            dist_mat = Get3DDistanceMatrix(mol, confId=conformer_id)\n\n        else:\n            dist_mat = GetDistanceMatrix(mol).astype(int)\n\n        out = self._calculate(mol, dist_mat)\n        return to_numpy(out)\n\n    @property\n    def columns(self):\n\"\"\"Get the descriptors columns\"\"\"\n        return self._columns\n\n    def __getstate__(self):\n\"\"\"Serialize the class for pickling.\"\"\"\n        state = {}\n        state[\"max_dist\"] = self.max_dist\n        state[\"bins\"] = self.bins\n        state[\"scale\"] = self.scale\n        state[\"use_3d_distances\"] = self.use_3d_distances\n        return state\n\n    def __setstate__(self, state: dict):\n\"\"\"Reload the class from pickling.\"\"\"\n        self.__dict__.update(state)\n        self._set_columns()\n</code></pre>"},{"location":"api/molfeat.calc.html#molfeat.calc.cats.CATS.DESCRIPTORS","title":"<code>DESCRIPTORS = ['DD', 'AD', 'DP', 'DN', 'DL', 'DR', 'AA', 'AP', 'AN', 'AL', 'AR', 'PP', 'NP', 'LP', 'PR', 'NN', 'LN', 'NR', 'LL', 'LR', 'RR']</code>  <code>class-attribute</code>","text":""},{"location":"api/molfeat.calc.html#molfeat.calc.cats.CATS.MAX_DIST_DEFAULT_2D","title":"<code>MAX_DIST_DEFAULT_2D = 8</code>  <code>class-attribute</code>","text":""},{"location":"api/molfeat.calc.html#molfeat.calc.cats.CATS.MAX_DIST_DEFAULT_3D","title":"<code>MAX_DIST_DEFAULT_3D = 5</code>  <code>class-attribute</code>","text":""},{"location":"api/molfeat.calc.html#molfeat.calc.cats.CATS.SMARTS","title":"<code>SMARTS = {'D': ['[!$([#6,H0,-,-2,-3])]'], 'A': ['[!$([#6,F,Cl,Br,I,o,s,nX3,#7v5,#15v5,#16v4,#16v6,*+1,*+2,*+3])]'], 'P': ['[*+]', '[#7H2]'], 'N': ['[*-]', '[C&amp;$(C(=O)O),P&amp;$(P(=O)),S&amp;$(S(=O)O)]'], 'L': ['[Cl,Br,I]', '[S;D2;$(S(C)(C))]', '[C;D2;$(C(=C)(=C))]', '[C;D3;$(C(=C)(C)(C))]', '[C;D4;$(C(C)(C)(C)(C))]', '[C;D3;H1;$(C(C)(C)(C))]', '[C;D2;H2;$(C(C)(C))]'], 'R': ['[a]']}</code>  <code>class-attribute</code>","text":""},{"location":"api/molfeat.calc.html#molfeat.calc.cats.CATS.bins","title":"<code>bins = list(sorted(bins))</code>  <code>instance-attribute</code>","text":""},{"location":"api/molfeat.calc.html#molfeat.calc.cats.CATS.columns","title":"<code>columns</code>  <code>property</code>","text":"<p>Get the descriptors columns</p>"},{"location":"api/molfeat.calc.html#molfeat.calc.cats.CATS.max_dist","title":"<code>max_dist = max_dist</code>  <code>instance-attribute</code>","text":""},{"location":"api/molfeat.calc.html#molfeat.calc.cats.CATS.scale","title":"<code>scale = scale</code>  <code>instance-attribute</code>","text":""},{"location":"api/molfeat.calc.html#molfeat.calc.cats.CATS.use_3d_distances","title":"<code>use_3d_distances = use_3d_distances</code>  <code>instance-attribute</code>","text":""},{"location":"api/molfeat.calc.html#molfeat.calc.cats.CATS.__call__","title":"<code>__call__(mol, conformer_id=-1)</code>","text":"<p>Get CATS 2D descriptors for a molecule</p> <p>Parameters:</p> Name Type Description Default <code>mol</code> <code>Union[dm.Mol, str]</code> <p>the molecule of interest.</p> required <code>conformer_id</code> <code>int</code> <p>Optional conformer id. Only relevant when <code>use_3d_distances</code> is set to True.</p> <code>-1</code> <p>Returns:</p> Name Type Description <code>props</code> <code>np.ndarray</code> <p>list of computed rdkit molecular descriptors</p> Source code in <code>molfeat/calc/cats.py</code> <pre><code>def __call__(self, mol: Union[dm.Mol, str], conformer_id: int = -1):\n\"\"\"Get CATS 2D descriptors for a molecule\n\n    Args:\n        mol: the molecule of interest.\n        conformer_id: Optional conformer id. Only relevant when `use_3d_distances`\n            is set to True.\n\n    Returns:\n        props (np.ndarray): list of computed rdkit molecular descriptors\n    \"\"\"\n\n    mol = dm.to_mol(mol)\n\n    if self.use_3d_distances:\n        if mol.GetNumConformers() &lt; 1:  # type: ignore\n            raise ValueError(\"Expected a molecule with conformers information.\")\n\n        dist_mat = Get3DDistanceMatrix(mol, confId=conformer_id)\n\n    else:\n        dist_mat = GetDistanceMatrix(mol).astype(int)\n\n    out = self._calculate(mol, dist_mat)\n    return to_numpy(out)\n</code></pre>"},{"location":"api/molfeat.calc.html#molfeat.calc.cats.CATS.__getstate__","title":"<code>__getstate__()</code>","text":"<p>Serialize the class for pickling.</p> Source code in <code>molfeat/calc/cats.py</code> <pre><code>def __getstate__(self):\n\"\"\"Serialize the class for pickling.\"\"\"\n    state = {}\n    state[\"max_dist\"] = self.max_dist\n    state[\"bins\"] = self.bins\n    state[\"scale\"] = self.scale\n    state[\"use_3d_distances\"] = self.use_3d_distances\n    return state\n</code></pre>"},{"location":"api/molfeat.calc.html#molfeat.calc.cats.CATS.__init__","title":"<code>__init__(max_dist=None, bins=None, scale='raw', use_3d_distances=False, **kwargs)</code>","text":"<p>Calculator for the CATS descriptors.</p> <p><code>max_dist</code> and <code>bins</code> will both determine the length of the fingerprint vector, which you can get by calling <code>len(calc)</code></p> <p>Parameters:</p> Name Type Description Default <code>max_dist</code> <code>Union[float, int]</code> <p>Maximum distance between pairs. When set to None, the default for 2D is set to <code>max_dist=8</code> and for 3D to <code>max_dist=5</code>.</p> <code>None</code> <code>bins</code> <code>List[int]</code> <p>Bins to use. Defaults to equal spacing <code>[0, max_dist[</code>.</p> <code>None</code> <code>scale</code> <code>str</code> <p>How to scale the values. Supported values are:  - 'raw' for the raw values.  - 'num' for values normalized by the number of atoms.  - 'count' for scaling based on occurence of the PPP.</p> <code>'raw'</code> <code>use_3d_distances</code> <code>bool</code> <p>Whether to use the 3D distances instead of the topological distances. If set to True, the input molecules must contain a conformer.</p> <code>False</code> <code>kwargs</code> <p>silently ignored extra parameters for compatibility with other calculators.</p> <code>{}</code> Source code in <code>molfeat/calc/cats.py</code> <pre><code>def __init__(\n    self,\n    max_dist: Union[float, int] = None,\n    bins: List[int] = None,\n    scale: str = \"raw\",\n    use_3d_distances: bool = False,\n    **kwargs,\n):\n\"\"\"Calculator for the CATS descriptors.\n\n    `max_dist` and `bins` will both determine the length of the fingerprint vector,\n    which you can get by calling `len(calc)`\n\n    Args:\n        max_dist: Maximum distance between pairs. When set to None, the default for 2D is\n            set to `max_dist=8` and for 3D to `max_dist=5`.\n        bins: Bins to use. Defaults to equal spacing `[0, max_dist[`.\n        scale: How to scale the values. Supported values are:\n             - 'raw' for the raw values.\n             - 'num' for values normalized by the number of atoms.\n             - 'count' for scaling based on occurence of the PPP.\n        use_3d_distances: Whether to use the 3D distances instead of the topological distances.\n            If set to True, the input molecules must contain a conformer.\n        kwargs: silently ignored extra parameters for compatibility with other calculators.\n    \"\"\"\n\n    # Set the max_dist default is set to None\n    if max_dist is None:\n        if use_3d_distances:\n            max_dist = CATS.MAX_DIST_DEFAULT_3D\n        else:\n            max_dist = CATS.MAX_DIST_DEFAULT_2D\n\n    self.max_dist = max_dist\n    self.use_3d_distances = use_3d_distances\n\n    if bins is None:\n        bins = list(np.arange(1, np.floor(self.max_dist + 1), 1))\n\n    # we don't allow interaction that exceed our distance threshold.\n    bins = [x for x in bins if x &lt;= self.max_dist]\n\n    # we start distance indexing at 0\n    if 0 not in bins:\n        bins += [0]\n\n    self.bins = list(sorted(bins))\n\n    self.scale = scale\n\n    self._set_columns()\n</code></pre>"},{"location":"api/molfeat.calc.html#molfeat.calc.cats.CATS.__len__","title":"<code>__len__()</code>","text":"<p>Return the length of the calculator</p> Source code in <code>molfeat/calc/cats.py</code> <pre><code>def __len__(self):\n\"\"\"Return the length of the calculator\"\"\"\n    return len(self._columns)\n</code></pre>"},{"location":"api/molfeat.calc.html#molfeat.calc.cats.CATS.__setstate__","title":"<code>__setstate__(state)</code>","text":"<p>Reload the class from pickling.</p> Source code in <code>molfeat/calc/cats.py</code> <pre><code>def __setstate__(self, state: dict):\n\"\"\"Reload the class from pickling.\"\"\"\n    self.__dict__.update(state)\n    self._set_columns()\n</code></pre>"},{"location":"api/molfeat.calc.html#pharmacophore","title":"<code>Pharmacophore</code>","text":""},{"location":"api/molfeat.calc.html#molfeat.calc.pharmacophore.Pharmacophore2D","title":"<code>Pharmacophore2D</code>","text":"<p>         Bases: <code>SerializableCalculator</code></p> <p>2D Pharmacophore.</p> <p>The fingerprint is computed using <code>Generate.Gen2DFingerprint</code> from RDKit.</p> <p>An explanation of pharmacophore fingerprints and how the bits are set is available in the RDKit book. In particular the following figure describes the process. { align=left }</p> Source code in <code>molfeat/calc/pharmacophore.py</code> <pre><code>class Pharmacophore2D(SerializableCalculator):\n\"\"\"2D Pharmacophore.\n\n    The fingerprint is computed using `Generate.Gen2DFingerprint` from RDKit.\n\n    An explanation of pharmacophore fingerprints and how the bits are set\n    is available in the RDKit book. In particular the following figure describes the process.\n    ![Pharmacophore](https://www.rdkit.org/docs/_images/picture_10.jpg){ align=left }\n    \"\"\"\n\n    def __init__(\n        self,\n        factory: Union[str, MolChemicalFeatureFactory] = \"pmapper\",\n        length: Optional[int] = 2048,\n        useCounts: bool = None,\n        minPointCount: int = None,\n        maxPointCount: int = None,\n        shortestPathsOnly: bool = None,\n        includeBondOrder: bool = None,\n        skipFeats: List[str] = None,\n        trianglePruneBins: bool = None,\n        bins: List[Tuple[int, int]] = None,\n        **kwargs,\n    ):\n\"\"\"Pharmacophore computation.\n\n        Args:\n            factory: Which features factory to use. One of \"default\", \"cats\", \"gobbi\" , \"pmapper\" or path\n                to a feature definition or a feature factory object\n            length: Optional desired length. If provided, the fp will be refold or padded to that length.\n                If set to None, fallback to the default for the provided sig factory.\n            minPointCount: Minimum number of points.\n            maxPointCount: Maximum number of points.\n            trianglePruneBins: Whether to prune the triangle inequality.\n            includeBondOrder: Whether to consider bond order.\n            shortestPathsOnly: Whether to only use the shortest path between pharmacophores.\n            useCounts: Whether take into account the count information. This will also impact how the folding works.\n            bins: Bins to use.\n        \"\"\"\n\n        self.factory = factory\n        self.useCounts = useCounts\n        self.minPointCount = minPointCount\n        self.maxPointCount = maxPointCount\n        self.shortestPathsOnly = shortestPathsOnly\n        self.includeBondOrder = includeBondOrder\n        self.skipFeats = skipFeats\n        self.trianglePruneBins = trianglePruneBins\n        self.bins = bins\n\n        self.length = length\n\n        self._init_sig_factory()\n\n    def __call__(self, mol: Union[dm.Mol, str], raw: bool = False):\n\"\"\"Compute the Pharmacophore fingeprint for the input molecule.\n\n        Args:\n            mol: the molecule of interest\n            raw: Whether to return the raw fingerprint or a Numpy array.\n\n        Returns:\n            fp: the computed fingerprint as a Numpy array or as a raw object.\n        \"\"\"\n\n        # Get a molecule\n        mol = dm.to_mol(mol)\n\n        if mol is None:\n            raise ValueError(\"The input molecule is not valid.\")\n\n        # Get distance matrix\n        use_bond_order = self.sig_factory.includeBondOrder\n        d_mat = rdmolops.GetDistanceMatrix(mol, use_bond_order)\n\n        # Generate the fingerprint\n        fp = Generate.Gen2DFingerprint(mol, self.sig_factory, dMat=d_mat)\n\n        # Posprocessing\n        if self.length and self._should_fold:\n            # refold the fingerprint\n            fp = fold_count_fp(fp, dim=self.length, binary=not (self.useCounts or False))\n            if raw:\n                fp = to_fp(fp, bitvect=True)\n\n        if not raw:\n            fp = to_numpy(fp)\n\n        return fp\n\n    def _init_sig_factory(self):\n\"\"\"Init the feature factory for this pharmacophore.\"\"\"\n\n        self.sig_factory = get_sig_factory(\n            self.factory,\n            useCounts=self.useCounts,\n            minPointCount=self.minPointCount,\n            maxPointCount=self.maxPointCount,\n            shortestPathsOnly=self.shortestPathsOnly,\n            includeBondOrder=self.includeBondOrder,\n            skipFeats=self.skipFeats,\n            trianglePruneBins=self.trianglePruneBins,\n            bins=self.bins,\n        )\n\n        # Reinject used params to the class attributes\n        # It might be useful in case the default values are changed\n        # and when serializing the object.\n        self.useCounts = self.sig_factory.useCounts\n        self.minPointCount = self.sig_factory.minPointCount\n        self.maxPointCount = self.sig_factory.maxPointCount\n        self.shortestPathsOnly = self.sig_factory.shortestPathsOnly\n        self.includeBondOrder = self.sig_factory.includeBondOrder\n        self.skipFeats = self.sig_factory.skipFeats\n        self.trianglePruneBins = self.sig_factory.trianglePruneBins\n        self.bins = self.sig_factory.GetBins()\n\n    @property\n    @functools.lru_cache(maxsize=None)\n    def _should_fold(self):\n        return self.sig_factory.GetSigSize() != len(self)\n\n    @property\n    def feature_factory(self):\n        return self.sig_factory.featFactory\n\n    def __len__(self):\n\"\"\"Returns the length of the pharmacophore\"\"\"\n        return self.length or self.sig_factory.GetSigSize()\n\n    @property\n    def columns(self):\n\"\"\"Get the name of all the descriptors of this calculator.\"\"\"\n\n        if not self.length:\n            return [self.sig_factory.GetBitDescription(x) for x in range(len(self))]\n        else:\n            return [f\"Desc:{i}\" for i in range(self.length)]\n\n    def __getstate__(self):\n\"\"\"Serialize the class for pickling.\"\"\"\n        state = {}\n        state[\"factory\"] = self.factory\n        state[\"useCounts\"] = self.useCounts\n        state[\"minPointCount\"] = self.minPointCount\n        state[\"maxPointCount\"] = self.maxPointCount\n        state[\"shortestPathsOnly\"] = self.shortestPathsOnly\n        state[\"includeBondOrder\"] = self.includeBondOrder\n        state[\"skipFeats\"] = self.skipFeats\n        state[\"trianglePruneBins\"] = self.trianglePruneBins\n        state[\"bins\"] = self.bins\n        state[\"length\"] = self.length\n        return state\n\n    def __setstate__(self, state: dict):\n\"\"\"Reload the class from pickling.\"\"\"\n        self.__dict__.update(state)\n        self._init_sig_factory()\n</code></pre>"},{"location":"api/molfeat.calc.html#molfeat.calc.pharmacophore.Pharmacophore2D.bins","title":"<code>bins = bins</code>  <code>instance-attribute</code>","text":""},{"location":"api/molfeat.calc.html#molfeat.calc.pharmacophore.Pharmacophore2D.columns","title":"<code>columns</code>  <code>property</code>","text":"<p>Get the name of all the descriptors of this calculator.</p>"},{"location":"api/molfeat.calc.html#molfeat.calc.pharmacophore.Pharmacophore2D.factory","title":"<code>factory = factory</code>  <code>instance-attribute</code>","text":""},{"location":"api/molfeat.calc.html#molfeat.calc.pharmacophore.Pharmacophore2D.feature_factory","title":"<code>feature_factory</code>  <code>property</code>","text":""},{"location":"api/molfeat.calc.html#molfeat.calc.pharmacophore.Pharmacophore2D.includeBondOrder","title":"<code>includeBondOrder = includeBondOrder</code>  <code>instance-attribute</code>","text":""},{"location":"api/molfeat.calc.html#molfeat.calc.pharmacophore.Pharmacophore2D.length","title":"<code>length = length</code>  <code>instance-attribute</code>","text":""},{"location":"api/molfeat.calc.html#molfeat.calc.pharmacophore.Pharmacophore2D.maxPointCount","title":"<code>maxPointCount = maxPointCount</code>  <code>instance-attribute</code>","text":""},{"location":"api/molfeat.calc.html#molfeat.calc.pharmacophore.Pharmacophore2D.minPointCount","title":"<code>minPointCount = minPointCount</code>  <code>instance-attribute</code>","text":""},{"location":"api/molfeat.calc.html#molfeat.calc.pharmacophore.Pharmacophore2D.shortestPathsOnly","title":"<code>shortestPathsOnly = shortestPathsOnly</code>  <code>instance-attribute</code>","text":""},{"location":"api/molfeat.calc.html#molfeat.calc.pharmacophore.Pharmacophore2D.skipFeats","title":"<code>skipFeats = skipFeats</code>  <code>instance-attribute</code>","text":""},{"location":"api/molfeat.calc.html#molfeat.calc.pharmacophore.Pharmacophore2D.trianglePruneBins","title":"<code>trianglePruneBins = trianglePruneBins</code>  <code>instance-attribute</code>","text":""},{"location":"api/molfeat.calc.html#molfeat.calc.pharmacophore.Pharmacophore2D.useCounts","title":"<code>useCounts = useCounts</code>  <code>instance-attribute</code>","text":""},{"location":"api/molfeat.calc.html#molfeat.calc.pharmacophore.Pharmacophore2D.__call__","title":"<code>__call__(mol, raw=False)</code>","text":"<p>Compute the Pharmacophore fingeprint for the input molecule.</p> <p>Parameters:</p> Name Type Description Default <code>mol</code> <code>Union[dm.Mol, str]</code> <p>the molecule of interest</p> required <code>raw</code> <code>bool</code> <p>Whether to return the raw fingerprint or a Numpy array.</p> <code>False</code> <p>Returns:</p> Name Type Description <code>fp</code> <p>the computed fingerprint as a Numpy array or as a raw object.</p> Source code in <code>molfeat/calc/pharmacophore.py</code> <pre><code>def __call__(self, mol: Union[dm.Mol, str], raw: bool = False):\n\"\"\"Compute the Pharmacophore fingeprint for the input molecule.\n\n    Args:\n        mol: the molecule of interest\n        raw: Whether to return the raw fingerprint or a Numpy array.\n\n    Returns:\n        fp: the computed fingerprint as a Numpy array or as a raw object.\n    \"\"\"\n\n    # Get a molecule\n    mol = dm.to_mol(mol)\n\n    if mol is None:\n        raise ValueError(\"The input molecule is not valid.\")\n\n    # Get distance matrix\n    use_bond_order = self.sig_factory.includeBondOrder\n    d_mat = rdmolops.GetDistanceMatrix(mol, use_bond_order)\n\n    # Generate the fingerprint\n    fp = Generate.Gen2DFingerprint(mol, self.sig_factory, dMat=d_mat)\n\n    # Posprocessing\n    if self.length and self._should_fold:\n        # refold the fingerprint\n        fp = fold_count_fp(fp, dim=self.length, binary=not (self.useCounts or False))\n        if raw:\n            fp = to_fp(fp, bitvect=True)\n\n    if not raw:\n        fp = to_numpy(fp)\n\n    return fp\n</code></pre>"},{"location":"api/molfeat.calc.html#molfeat.calc.pharmacophore.Pharmacophore2D.__getstate__","title":"<code>__getstate__()</code>","text":"<p>Serialize the class for pickling.</p> Source code in <code>molfeat/calc/pharmacophore.py</code> <pre><code>def __getstate__(self):\n\"\"\"Serialize the class for pickling.\"\"\"\n    state = {}\n    state[\"factory\"] = self.factory\n    state[\"useCounts\"] = self.useCounts\n    state[\"minPointCount\"] = self.minPointCount\n    state[\"maxPointCount\"] = self.maxPointCount\n    state[\"shortestPathsOnly\"] = self.shortestPathsOnly\n    state[\"includeBondOrder\"] = self.includeBondOrder\n    state[\"skipFeats\"] = self.skipFeats\n    state[\"trianglePruneBins\"] = self.trianglePruneBins\n    state[\"bins\"] = self.bins\n    state[\"length\"] = self.length\n    return state\n</code></pre>"},{"location":"api/molfeat.calc.html#molfeat.calc.pharmacophore.Pharmacophore2D.__init__","title":"<code>__init__(factory='pmapper', length=2048, useCounts=None, minPointCount=None, maxPointCount=None, shortestPathsOnly=None, includeBondOrder=None, skipFeats=None, trianglePruneBins=None, bins=None, **kwargs)</code>","text":"<p>Pharmacophore computation.</p> <p>Parameters:</p> Name Type Description Default <code>factory</code> <code>Union[str, MolChemicalFeatureFactory]</code> <p>Which features factory to use. One of \"default\", \"cats\", \"gobbi\" , \"pmapper\" or path to a feature definition or a feature factory object</p> <code>'pmapper'</code> <code>length</code> <code>Optional[int]</code> <p>Optional desired length. If provided, the fp will be refold or padded to that length. If set to None, fallback to the default for the provided sig factory.</p> <code>2048</code> <code>minPointCount</code> <code>int</code> <p>Minimum number of points.</p> <code>None</code> <code>maxPointCount</code> <code>int</code> <p>Maximum number of points.</p> <code>None</code> <code>trianglePruneBins</code> <code>bool</code> <p>Whether to prune the triangle inequality.</p> <code>None</code> <code>includeBondOrder</code> <code>bool</code> <p>Whether to consider bond order.</p> <code>None</code> <code>shortestPathsOnly</code> <code>bool</code> <p>Whether to only use the shortest path between pharmacophores.</p> <code>None</code> <code>useCounts</code> <code>bool</code> <p>Whether take into account the count information. This will also impact how the folding works.</p> <code>None</code> <code>bins</code> <code>List[Tuple[int, int]]</code> <p>Bins to use.</p> <code>None</code> Source code in <code>molfeat/calc/pharmacophore.py</code> <pre><code>def __init__(\n    self,\n    factory: Union[str, MolChemicalFeatureFactory] = \"pmapper\",\n    length: Optional[int] = 2048,\n    useCounts: bool = None,\n    minPointCount: int = None,\n    maxPointCount: int = None,\n    shortestPathsOnly: bool = None,\n    includeBondOrder: bool = None,\n    skipFeats: List[str] = None,\n    trianglePruneBins: bool = None,\n    bins: List[Tuple[int, int]] = None,\n    **kwargs,\n):\n\"\"\"Pharmacophore computation.\n\n    Args:\n        factory: Which features factory to use. One of \"default\", \"cats\", \"gobbi\" , \"pmapper\" or path\n            to a feature definition or a feature factory object\n        length: Optional desired length. If provided, the fp will be refold or padded to that length.\n            If set to None, fallback to the default for the provided sig factory.\n        minPointCount: Minimum number of points.\n        maxPointCount: Maximum number of points.\n        trianglePruneBins: Whether to prune the triangle inequality.\n        includeBondOrder: Whether to consider bond order.\n        shortestPathsOnly: Whether to only use the shortest path between pharmacophores.\n        useCounts: Whether take into account the count information. This will also impact how the folding works.\n        bins: Bins to use.\n    \"\"\"\n\n    self.factory = factory\n    self.useCounts = useCounts\n    self.minPointCount = minPointCount\n    self.maxPointCount = maxPointCount\n    self.shortestPathsOnly = shortestPathsOnly\n    self.includeBondOrder = includeBondOrder\n    self.skipFeats = skipFeats\n    self.trianglePruneBins = trianglePruneBins\n    self.bins = bins\n\n    self.length = length\n\n    self._init_sig_factory()\n</code></pre>"},{"location":"api/molfeat.calc.html#molfeat.calc.pharmacophore.Pharmacophore2D.__len__","title":"<code>__len__()</code>","text":"<p>Returns the length of the pharmacophore</p> Source code in <code>molfeat/calc/pharmacophore.py</code> <pre><code>def __len__(self):\n\"\"\"Returns the length of the pharmacophore\"\"\"\n    return self.length or self.sig_factory.GetSigSize()\n</code></pre>"},{"location":"api/molfeat.calc.html#molfeat.calc.pharmacophore.Pharmacophore2D.__setstate__","title":"<code>__setstate__(state)</code>","text":"<p>Reload the class from pickling.</p> Source code in <code>molfeat/calc/pharmacophore.py</code> <pre><code>def __setstate__(self, state: dict):\n\"\"\"Reload the class from pickling.\"\"\"\n    self.__dict__.update(state)\n    self._init_sig_factory()\n</code></pre>"},{"location":"api/molfeat.calc.html#molfeat.calc.pharmacophore.Pharmacophore3D","title":"<code>Pharmacophore3D</code>","text":"<p>         Bases: <code>SerializableCalculator</code></p> <p>3D Pharmacophore.</p> <p>The fingerprint is computed using <code>pmapper</code>.</p> <p>This featurizer supports building a consensus pharmacophore from a set of molecules.</p> Source code in <code>molfeat/calc/pharmacophore.py</code> <pre><code>class Pharmacophore3D(SerializableCalculator):\n\"\"\"3D Pharmacophore.\n\n    The fingerprint is computed using [`pmapper`](https://github.com/DrrDom/pmapper).\n\n    This featurizer supports building a consensus pharmacophore from a set of molecules.\n    \"\"\"\n\n    def __init__(\n        self,\n        factory: Union[str, MolChemicalFeatureFactory] = \"pmapper\",\n        length: int = 2048,\n        bin_step: float = 1,\n        min_features: int = 2,\n        max_features: int = 3,\n        use_modulo: bool = True,\n        tolerance: float = 0,\n    ):\n\"\"\"Pharmacophore computation.\n\n        Args:\n            factory: Which features factory to use. One of \"default\", \"cats\", \"gobbi\" , \"pmapper\" or path\n                to a feature definition or a feature factory object\n            length: Optional desired length. If provided, the fp will be refold or padded to that length.\n                If set to None, fallback to the default for the provided sig factory.\n            minPointCount: Minimum number of points.\n            maxPointCount: Maximum number of points.\n            trianglePruneBins: Whether to prune the triangle inequality.\n            includeBondOrder: Whether to consider bond order.\n            shortestPathsOnly: Whether to only use the shortest path between pharmacophores.\n            useCounts: Whether take into account the count information. This will also impact how the folding works.\n            bins: Bins to use.\n        \"\"\"\n\n        self.factory = factory\n        self.length = length\n        self.bin_step = bin_step\n        self.min_features = min_features\n        self.max_features = max_features\n        self.use_modulo = use_modulo\n        self.tolerance = tolerance\n\n        self._init_feature_factory()\n\n    def __call__(self, mol: Union[dm.Mol, str], conformer_id: int = -1, raw: bool = False):\n\"\"\"Compute the Pharmacophore fingeprint for the input molecule.\n\n        Args:\n            mol: the molecule of interest\n            conformer_id: the conformer id to use.\n            raw: Whether to return the raw fingerprint or a Numpy array.\n\n        Returns:\n            fp: the computed fingerprint as a Numpy array.\n        \"\"\"\n\n        # Get a molecule\n        mol = dm.to_mol(mol)\n\n        if mol is None:\n            raise ValueError(\"The input molecule is not valid.\")\n\n        if mol.GetNumConformers() &lt; 1:  # type: ignore\n            raise ValueError(\"Expected a molecule with conformers information.\")\n\n        # Get the features for the mol\n        features = self.get_features(mol, conformer_id=conformer_id)\n\n        # Convert features dataframe to coordinates\n        if features.empty:\n            features_coords = []\n        else:\n            features_coords = features[[\"feature_name\", \"coords\"]].values.tolist()\n\n        # Compute the fingerprint\n        fp = self.compute_fp_from_coords(features_coords, raw=raw)\n\n        return fp\n\n    def consensus_fp(\n        self,\n        mols: List[dm.Mol],\n        align: bool = True,\n        conformer_id: int = -1,\n        copy: bool = True,\n        min_samples_ratio: float = 0.5,\n        eps: float = 2,\n        raw: bool = False,\n        **cluster_kwargs,\n    ):\n\"\"\"Compute a consensus fingerprint from a list of molecules.\n\n        Args:\n            mols: a list of molecules.\n            align: Whether to align the conformers of the molecules.\n            conformer_id: Optional conformer id.\n            copy: Whether to copy the molecules before clustering.\n            min_samples_ratio: Percentages of mols that must contain a pharmacophoric point\n                to be considered as a core point.\n            eps: The maximum distance between two samples for one to be considered as\n                in the neighborhood of the other.\n            raw: Whether to return the raw fingerprint or a Numpy array.\n            cluster_kwargs: additional keyword arguments for the clustering algorithm.\n        \"\"\"\n\n        # Get all the features\n        features = self.get_features_from_many(\n            mols,\n            keep_mols=True,\n            align=align,\n            conformer_id=conformer_id,\n            copy=copy,\n        )\n\n        # Retrieve the aligned molecules\n        mols = features.groupby(\"mol_index\").first()[\"mol\"].tolist()\n        # Cluster the features\n        clustered_features = self.cluster_features(\n            features, min_samples_ratio=min_samples_ratio, eps=eps, **cluster_kwargs\n        )\n        # Convert features dataframe to coordinates\n        if clustered_features.empty:\n            features_coords = []\n        else:\n            features_coords = clustered_features[[\"feature_name\", \"coords\"]].values.tolist()\n        # Compute the fingerprint\n        fp = self.compute_fp_from_coords(features_coords, raw=raw)\n\n        return fp\n\n    def _init_feature_factory(self):\n\"\"\"Init the feature factory.\"\"\"\n        self.feature_factory = get_feature_factory(self.factory)\n\n    def get_features(self, mol: dm.Mol, conformer_id: int = -1) -&gt; pd.DataFrame:\n\"\"\"Retrieve the features for a given molecule.\n\n        Args:\n            mol: the molecule of interest\n\n        Returns:\n            features: the features as a Numpy array\n        \"\"\"\n        features_data = []\n\n        # Extract the features for this molecule\n        features = self.feature_factory.GetFeaturesForMol(mol, confId=conformer_id)\n\n        # Extract all the feature atom indices for this molecule\n        for feature in features:\n            datum = {}\n            datum[\"feature_id\"] = feature.GetId()\n            datum[\"feature_name\"] = feature.GetFamily()\n            datum[\"feature_type\"] = feature.GetType()\n            datum[\"atom_indices\"] = feature.GetAtomIds()\n            datum[\"coords\"] = np.array(feature.GetPos())\n\n            features_data.append(datum)\n\n        features_data = pd.DataFrame(features_data)\n\n        return features_data\n\n    def get_features_from_many(\n        self,\n        mols: List[dm.Mol],\n        align: bool = True,\n        conformer_id: int = -1,\n        copy: bool = True,\n        keep_mols: bool = False,\n    ):\n\"\"\"Extract all the features from a list of molecules after an optional\n        alignement step.\n\n        Args:\n            mols: List of molecules with conformers.\n            align: Whether to align the conformers of the molecules.\n            conformer_id: Optional conformer id.\n            copy: Whether to copy the molecules before clustering.\n            keep_mols: Whether to keep the molecules in the returned dataframe.\n        \"\"\"\n\n        if not all([mol.GetNumConformers() &gt;= 1 for mol in mols]):\n            raise ValueError(\"One or more input molecules is missing a conformer.\")\n\n        # Make a copy of the molecules since they are going to be modified\n        if copy:\n            mols = [dm.copy_mol(mol) for mol in mols]\n\n        # Align the conformers\n        if align:\n            mols, _ = commons.align_conformers(mols, copy=False, conformer_id=conformer_id)\n\n        all_features = pd.DataFrame()\n\n        for i, mol in enumerate(mols):\n            features = self.get_features(mol)\n            features[\"mol_index\"] = i\n\n            if keep_mols:\n                features[\"mol\"] = mol\n\n            all_features = pd.concat([all_features, features], ignore_index=True)\n\n        return all_features\n\n    def compute_fp_from_coords(\n        self,\n        features_coords: List[Tuple[str, Tuple[float]]],\n        raw: bool = False,\n    ):\n\"\"\"Compute a fingerprint from a list of features.\n\n        Args:\n            features_coords: Features coords: `[('A', (1.23, 2.34, 3.45)), ('A', (4.56, 5.67, 6.78)), ...]`.\n            raw: Whether to return the raw fingerprint or a Numpy array.\n        \"\"\"\n\n        # Init the pmapper engine\n        ph_engine = Pharm(bin_step=self.bin_step)\n        # Convert coords to list in case those are arrays\n        features_coords = [(name, tuple(coords)) for name, coords in features_coords]\n        # Load pharmacophore points\n        ph_engine.load_from_feature_coords(features_coords)\n        # Init the iterator over the pharmacophore points\n        points_iterator = ph_engine.iterate_pharm(\n            min_features=self.min_features,\n            max_features=self.max_features,\n            tol=self.tolerance,\n            return_feature_ids=False,\n        )\n\n        # Compute the fingerprint\n        on_bits = set()\n        for h in points_iterator:\n            if self.use_modulo:\n                on_bits.add(int(h, 16) % self.length)  # type: ignore\n            else:\n                random.seed(int(h, 16))  # type: ignore\n                on_bits.add(random.randrange(self.length))\n\n        if raw:\n            return np.array(on_bits)\n\n        fp = np.zeros(self.length, dtype=int)\n        fp[list(on_bits)] = 1\n\n        return fp\n\n    def cluster_features(\n        self,\n        features: pd.DataFrame,\n        min_samples_ratio: float = 0.5,\n        n_mols: int = None,\n        eps: float = np.inf,\n        **kwargs,\n    ):\n\"\"\"Cluster a set of pharmacophoric features using OPTICS.\n        The only reason why we are not using SpectralClustering is because of the need to provide\n        the number of clusters.\n\n        Args:\n            features: A dataframe of features.\n            min_samples_ratio: Percentages of mols that must contain a pharmacophoric point\n                to be considered as a core point.\n            n_mols: Optional number of compounds to compute `min_samples` from the\n                `min_samples_ratio` value. If not set it will use `mol_index` from\n                the `features` dataframe.\n            eps: The maximum distance between two samples for one to be considered as\n                in the neighborhood of the other. This is max_eps in OPTICS\n            kwargs: Any additional parameters to pass to `sklearn.cluster.OPTICS`.\n        \"\"\"\n\n        if n_mols is None:\n            n_mols = len(features[\"mol_index\"].unique())\n\n        # Compute min_samples\n        min_samples = max(int(round(min_samples_ratio * n_mols, 0)), 1)\n        clusters = []\n        feature_id = 0\n        for _, rows in features.groupby(\"feature_name\"):\n            feature_name = rows.iloc[0][\"feature_name\"]\n            if min_samples &gt; rows.shape[0]:\n                logger.info(\n                    f\"Feature {feature_name} does not have enough molecule ({len(rows)}), skipping\"\n                )\n                continue\n            coords = np.vstack(rows[\"coords\"].values)\n\n            # Init clustering\n            optics = OPTICS(min_samples=min_samples, max_eps=eps, **kwargs)\n            optics = optics.fit(coords)\n            labels = optics.labels_\n            # a node that is not a core would basically be a node that cannot be labeled\n            # thus border nodes are considered core\n            core_samples_mask = np.zeros_like(labels, dtype=bool)\n            core_samples_mask[labels == 1] = True\n\n            # Find the centroids (consensus points)\n            unique_labels = set(labels)\n            for k in unique_labels:\n                if k == -1:\n                    continue\n                class_member_mask = labels == k\n                cluster_coords = coords[class_member_mask &amp; core_samples_mask]\n                if len(cluster_coords) == 0:\n                    continue\n                cluster_centroid = cluster_coords.mean(axis=0)\n\n                cluster = {}\n                cluster[\"feature_id\"] = feature_id\n                cluster[\"feature_name\"] = feature_name\n                cluster[\"coords\"] = cluster_centroid\n                cluster[\"cluster_size\"] = len(cluster_coords)\n\n                clusters.append(cluster)\n                feature_id += 1\n\n        clusters = pd.DataFrame(clusters)\n\n        return clusters\n\n    ## Viz methods\n\n    def show(\n        self,\n        mol: dm.Mol,\n        features: pd.DataFrame = None,\n        alpha: float = 1.0,\n        sphere_radius: float = 0.4,\n        show_legend: bool = True,\n    ):\n\"\"\"Show a 3D view of a given molecule with the pharmacophoric features.\n\n        Args:\n            mol: the molecule of interest\n            alpha: Alpha value for the colors (currently not working).\n            sphere_radius: Radius of the spheres for the features.\n            show_legend: Display the legend (the layout is bad but at least it\n                shows the legend).\n        \"\"\"\n\n        if features is None:\n            features = self.get_features(mol)\n\n        return viz.show_pharm_features(\n            mol,\n            features=features,\n            feature_factory=self.feature_factory,\n            alpha=alpha,\n            sphere_radius=sphere_radius,\n            show_legend=show_legend,\n        )\n\n    def show_many(\n        self,\n        mols: List[dm.Mol],\n        align: bool = True,\n        conformer_id: int = -1,\n        copy: bool = True,\n        min_samples_ratio: float = 0.5,\n        eps: float = 2,\n        alpha: float = 1.0,\n        sphere_radius: float = 0.4,\n        show_legend: bool = True,\n    ):\n\"\"\"Show a 3D view of a given molecule with the pharmacophoric features.\n\n        Args:\n            mols: a list of molecules.\n            align: Whether to align the conformers of the molecules.\n            conformer_id: Optional conformer id.\n            copy: Whether to copy the molecules before clustering.\n            min_samples_ratio: Percentages of mols that must contain a pharmacophoric point\n                to be considered as a core point.\n            eps: The maximum distance between two samples for one to be considered as\n                in the neighborhood of the other.\n            alpha: Alpha value for the colors (currently not working).\n            sphere_radius: Radius of the spheres for the features.\n            show_legend: Display the legend (the layout is bad but at least it\n                shows the legend).\n        \"\"\"\n\n        # Get all the features\n        features = self.get_features_from_many(\n            mols,\n            keep_mols=True,\n            align=align,\n            conformer_id=conformer_id,\n            copy=copy,\n        )\n\n        # Retrieve the aligned molecules\n        mols = features.groupby(\"mol_index\").first()[\"mol\"].tolist()\n\n        # Cluster the features\n        clustered_features = self.cluster_features(\n            features,\n            min_samples_ratio=min_samples_ratio,\n            eps=eps,\n        )\n\n        return viz.show_pharm_features(\n            mols,\n            features=clustered_features,\n            feature_factory=self.feature_factory,\n            alpha=alpha,\n            sphere_radius=sphere_radius,\n            show_legend=show_legend,\n        )\n\n    def __getstate__(self):\n\"\"\"Serialize the class for pickling.\"\"\"\n        state = {}\n        state[\"factory\"] = self.factory\n        state[\"length\"] = self.length\n        state[\"bin_step\"] = self.bin_step\n        state[\"min_features\"] = self.min_features\n        state[\"max_features\"] = self.max_features\n        state[\"use_modulo\"] = self.use_modulo\n        state[\"tolerance\"] = self.tolerance\n        return state\n\n    def __setstate__(self, state: dict):\n\"\"\"Reload the class from pickling.\"\"\"\n        self.__dict__.update(state)\n        self._init_feature_factory()\n</code></pre>"},{"location":"api/molfeat.calc.html#molfeat.calc.pharmacophore.Pharmacophore3D.bin_step","title":"<code>bin_step = bin_step</code>  <code>instance-attribute</code>","text":""},{"location":"api/molfeat.calc.html#molfeat.calc.pharmacophore.Pharmacophore3D.factory","title":"<code>factory = factory</code>  <code>instance-attribute</code>","text":""},{"location":"api/molfeat.calc.html#molfeat.calc.pharmacophore.Pharmacophore3D.length","title":"<code>length = length</code>  <code>instance-attribute</code>","text":""},{"location":"api/molfeat.calc.html#molfeat.calc.pharmacophore.Pharmacophore3D.max_features","title":"<code>max_features = max_features</code>  <code>instance-attribute</code>","text":""},{"location":"api/molfeat.calc.html#molfeat.calc.pharmacophore.Pharmacophore3D.min_features","title":"<code>min_features = min_features</code>  <code>instance-attribute</code>","text":""},{"location":"api/molfeat.calc.html#molfeat.calc.pharmacophore.Pharmacophore3D.tolerance","title":"<code>tolerance = tolerance</code>  <code>instance-attribute</code>","text":""},{"location":"api/molfeat.calc.html#molfeat.calc.pharmacophore.Pharmacophore3D.use_modulo","title":"<code>use_modulo = use_modulo</code>  <code>instance-attribute</code>","text":""},{"location":"api/molfeat.calc.html#molfeat.calc.pharmacophore.Pharmacophore3D.__call__","title":"<code>__call__(mol, conformer_id=-1, raw=False)</code>","text":"<p>Compute the Pharmacophore fingeprint for the input molecule.</p> <p>Parameters:</p> Name Type Description Default <code>mol</code> <code>Union[dm.Mol, str]</code> <p>the molecule of interest</p> required <code>conformer_id</code> <code>int</code> <p>the conformer id to use.</p> <code>-1</code> <code>raw</code> <code>bool</code> <p>Whether to return the raw fingerprint or a Numpy array.</p> <code>False</code> <p>Returns:</p> Name Type Description <code>fp</code> <p>the computed fingerprint as a Numpy array.</p> Source code in <code>molfeat/calc/pharmacophore.py</code> <pre><code>def __call__(self, mol: Union[dm.Mol, str], conformer_id: int = -1, raw: bool = False):\n\"\"\"Compute the Pharmacophore fingeprint for the input molecule.\n\n    Args:\n        mol: the molecule of interest\n        conformer_id: the conformer id to use.\n        raw: Whether to return the raw fingerprint or a Numpy array.\n\n    Returns:\n        fp: the computed fingerprint as a Numpy array.\n    \"\"\"\n\n    # Get a molecule\n    mol = dm.to_mol(mol)\n\n    if mol is None:\n        raise ValueError(\"The input molecule is not valid.\")\n\n    if mol.GetNumConformers() &lt; 1:  # type: ignore\n        raise ValueError(\"Expected a molecule with conformers information.\")\n\n    # Get the features for the mol\n    features = self.get_features(mol, conformer_id=conformer_id)\n\n    # Convert features dataframe to coordinates\n    if features.empty:\n        features_coords = []\n    else:\n        features_coords = features[[\"feature_name\", \"coords\"]].values.tolist()\n\n    # Compute the fingerprint\n    fp = self.compute_fp_from_coords(features_coords, raw=raw)\n\n    return fp\n</code></pre>"},{"location":"api/molfeat.calc.html#molfeat.calc.pharmacophore.Pharmacophore3D.__getstate__","title":"<code>__getstate__()</code>","text":"<p>Serialize the class for pickling.</p> Source code in <code>molfeat/calc/pharmacophore.py</code> <pre><code>def __getstate__(self):\n\"\"\"Serialize the class for pickling.\"\"\"\n    state = {}\n    state[\"factory\"] = self.factory\n    state[\"length\"] = self.length\n    state[\"bin_step\"] = self.bin_step\n    state[\"min_features\"] = self.min_features\n    state[\"max_features\"] = self.max_features\n    state[\"use_modulo\"] = self.use_modulo\n    state[\"tolerance\"] = self.tolerance\n    return state\n</code></pre>"},{"location":"api/molfeat.calc.html#molfeat.calc.pharmacophore.Pharmacophore3D.__init__","title":"<code>__init__(factory='pmapper', length=2048, bin_step=1, min_features=2, max_features=3, use_modulo=True, tolerance=0)</code>","text":"<p>Pharmacophore computation.</p> <p>Parameters:</p> Name Type Description Default <code>factory</code> <code>Union[str, MolChemicalFeatureFactory]</code> <p>Which features factory to use. One of \"default\", \"cats\", \"gobbi\" , \"pmapper\" or path to a feature definition or a feature factory object</p> <code>'pmapper'</code> <code>length</code> <code>int</code> <p>Optional desired length. If provided, the fp will be refold or padded to that length. If set to None, fallback to the default for the provided sig factory.</p> <code>2048</code> <code>minPointCount</code> <p>Minimum number of points.</p> required <code>maxPointCount</code> <p>Maximum number of points.</p> required <code>trianglePruneBins</code> <p>Whether to prune the triangle inequality.</p> required <code>includeBondOrder</code> <p>Whether to consider bond order.</p> required <code>shortestPathsOnly</code> <p>Whether to only use the shortest path between pharmacophores.</p> required <code>useCounts</code> <p>Whether take into account the count information. This will also impact how the folding works.</p> required <code>bins</code> <p>Bins to use.</p> required Source code in <code>molfeat/calc/pharmacophore.py</code> <pre><code>def __init__(\n    self,\n    factory: Union[str, MolChemicalFeatureFactory] = \"pmapper\",\n    length: int = 2048,\n    bin_step: float = 1,\n    min_features: int = 2,\n    max_features: int = 3,\n    use_modulo: bool = True,\n    tolerance: float = 0,\n):\n\"\"\"Pharmacophore computation.\n\n    Args:\n        factory: Which features factory to use. One of \"default\", \"cats\", \"gobbi\" , \"pmapper\" or path\n            to a feature definition or a feature factory object\n        length: Optional desired length. If provided, the fp will be refold or padded to that length.\n            If set to None, fallback to the default for the provided sig factory.\n        minPointCount: Minimum number of points.\n        maxPointCount: Maximum number of points.\n        trianglePruneBins: Whether to prune the triangle inequality.\n        includeBondOrder: Whether to consider bond order.\n        shortestPathsOnly: Whether to only use the shortest path between pharmacophores.\n        useCounts: Whether take into account the count information. This will also impact how the folding works.\n        bins: Bins to use.\n    \"\"\"\n\n    self.factory = factory\n    self.length = length\n    self.bin_step = bin_step\n    self.min_features = min_features\n    self.max_features = max_features\n    self.use_modulo = use_modulo\n    self.tolerance = tolerance\n\n    self._init_feature_factory()\n</code></pre>"},{"location":"api/molfeat.calc.html#molfeat.calc.pharmacophore.Pharmacophore3D.__setstate__","title":"<code>__setstate__(state)</code>","text":"<p>Reload the class from pickling.</p> Source code in <code>molfeat/calc/pharmacophore.py</code> <pre><code>def __setstate__(self, state: dict):\n\"\"\"Reload the class from pickling.\"\"\"\n    self.__dict__.update(state)\n    self._init_feature_factory()\n</code></pre>"},{"location":"api/molfeat.calc.html#molfeat.calc.pharmacophore.Pharmacophore3D.cluster_features","title":"<code>cluster_features(features, min_samples_ratio=0.5, n_mols=None, eps=np.inf, **kwargs)</code>","text":"<p>Cluster a set of pharmacophoric features using OPTICS. The only reason why we are not using SpectralClustering is because of the need to provide the number of clusters.</p> <p>Parameters:</p> Name Type Description Default <code>features</code> <code>pd.DataFrame</code> <p>A dataframe of features.</p> required <code>min_samples_ratio</code> <code>float</code> <p>Percentages of mols that must contain a pharmacophoric point to be considered as a core point.</p> <code>0.5</code> <code>n_mols</code> <code>int</code> <p>Optional number of compounds to compute <code>min_samples</code> from the <code>min_samples_ratio</code> value. If not set it will use <code>mol_index</code> from the <code>features</code> dataframe.</p> <code>None</code> <code>eps</code> <code>float</code> <p>The maximum distance between two samples for one to be considered as in the neighborhood of the other. This is max_eps in OPTICS</p> <code>np.inf</code> <code>kwargs</code> <p>Any additional parameters to pass to <code>sklearn.cluster.OPTICS</code>.</p> <code>{}</code> Source code in <code>molfeat/calc/pharmacophore.py</code> <pre><code>def cluster_features(\n    self,\n    features: pd.DataFrame,\n    min_samples_ratio: float = 0.5,\n    n_mols: int = None,\n    eps: float = np.inf,\n    **kwargs,\n):\n\"\"\"Cluster a set of pharmacophoric features using OPTICS.\n    The only reason why we are not using SpectralClustering is because of the need to provide\n    the number of clusters.\n\n    Args:\n        features: A dataframe of features.\n        min_samples_ratio: Percentages of mols that must contain a pharmacophoric point\n            to be considered as a core point.\n        n_mols: Optional number of compounds to compute `min_samples` from the\n            `min_samples_ratio` value. If not set it will use `mol_index` from\n            the `features` dataframe.\n        eps: The maximum distance between two samples for one to be considered as\n            in the neighborhood of the other. This is max_eps in OPTICS\n        kwargs: Any additional parameters to pass to `sklearn.cluster.OPTICS`.\n    \"\"\"\n\n    if n_mols is None:\n        n_mols = len(features[\"mol_index\"].unique())\n\n    # Compute min_samples\n    min_samples = max(int(round(min_samples_ratio * n_mols, 0)), 1)\n    clusters = []\n    feature_id = 0\n    for _, rows in features.groupby(\"feature_name\"):\n        feature_name = rows.iloc[0][\"feature_name\"]\n        if min_samples &gt; rows.shape[0]:\n            logger.info(\n                f\"Feature {feature_name} does not have enough molecule ({len(rows)}), skipping\"\n            )\n            continue\n        coords = np.vstack(rows[\"coords\"].values)\n\n        # Init clustering\n        optics = OPTICS(min_samples=min_samples, max_eps=eps, **kwargs)\n        optics = optics.fit(coords)\n        labels = optics.labels_\n        # a node that is not a core would basically be a node that cannot be labeled\n        # thus border nodes are considered core\n        core_samples_mask = np.zeros_like(labels, dtype=bool)\n        core_samples_mask[labels == 1] = True\n\n        # Find the centroids (consensus points)\n        unique_labels = set(labels)\n        for k in unique_labels:\n            if k == -1:\n                continue\n            class_member_mask = labels == k\n            cluster_coords = coords[class_member_mask &amp; core_samples_mask]\n            if len(cluster_coords) == 0:\n                continue\n            cluster_centroid = cluster_coords.mean(axis=0)\n\n            cluster = {}\n            cluster[\"feature_id\"] = feature_id\n            cluster[\"feature_name\"] = feature_name\n            cluster[\"coords\"] = cluster_centroid\n            cluster[\"cluster_size\"] = len(cluster_coords)\n\n            clusters.append(cluster)\n            feature_id += 1\n\n    clusters = pd.DataFrame(clusters)\n\n    return clusters\n</code></pre>"},{"location":"api/molfeat.calc.html#molfeat.calc.pharmacophore.Pharmacophore3D.compute_fp_from_coords","title":"<code>compute_fp_from_coords(features_coords, raw=False)</code>","text":"<p>Compute a fingerprint from a list of features.</p> <p>Parameters:</p> Name Type Description Default <code>features_coords</code> <code>List[Tuple[str, Tuple[float]]]</code> <p>Features coords: <code>[('A', (1.23, 2.34, 3.45)), ('A', (4.56, 5.67, 6.78)), ...]</code>.</p> required <code>raw</code> <code>bool</code> <p>Whether to return the raw fingerprint or a Numpy array.</p> <code>False</code> Source code in <code>molfeat/calc/pharmacophore.py</code> <pre><code>def compute_fp_from_coords(\n    self,\n    features_coords: List[Tuple[str, Tuple[float]]],\n    raw: bool = False,\n):\n\"\"\"Compute a fingerprint from a list of features.\n\n    Args:\n        features_coords: Features coords: `[('A', (1.23, 2.34, 3.45)), ('A', (4.56, 5.67, 6.78)), ...]`.\n        raw: Whether to return the raw fingerprint or a Numpy array.\n    \"\"\"\n\n    # Init the pmapper engine\n    ph_engine = Pharm(bin_step=self.bin_step)\n    # Convert coords to list in case those are arrays\n    features_coords = [(name, tuple(coords)) for name, coords in features_coords]\n    # Load pharmacophore points\n    ph_engine.load_from_feature_coords(features_coords)\n    # Init the iterator over the pharmacophore points\n    points_iterator = ph_engine.iterate_pharm(\n        min_features=self.min_features,\n        max_features=self.max_features,\n        tol=self.tolerance,\n        return_feature_ids=False,\n    )\n\n    # Compute the fingerprint\n    on_bits = set()\n    for h in points_iterator:\n        if self.use_modulo:\n            on_bits.add(int(h, 16) % self.length)  # type: ignore\n        else:\n            random.seed(int(h, 16))  # type: ignore\n            on_bits.add(random.randrange(self.length))\n\n    if raw:\n        return np.array(on_bits)\n\n    fp = np.zeros(self.length, dtype=int)\n    fp[list(on_bits)] = 1\n\n    return fp\n</code></pre>"},{"location":"api/molfeat.calc.html#molfeat.calc.pharmacophore.Pharmacophore3D.consensus_fp","title":"<code>consensus_fp(mols, align=True, conformer_id=-1, copy=True, min_samples_ratio=0.5, eps=2, raw=False, **cluster_kwargs)</code>","text":"<p>Compute a consensus fingerprint from a list of molecules.</p> <p>Parameters:</p> Name Type Description Default <code>mols</code> <code>List[dm.Mol]</code> <p>a list of molecules.</p> required <code>align</code> <code>bool</code> <p>Whether to align the conformers of the molecules.</p> <code>True</code> <code>conformer_id</code> <code>int</code> <p>Optional conformer id.</p> <code>-1</code> <code>copy</code> <code>bool</code> <p>Whether to copy the molecules before clustering.</p> <code>True</code> <code>min_samples_ratio</code> <code>float</code> <p>Percentages of mols that must contain a pharmacophoric point to be considered as a core point.</p> <code>0.5</code> <code>eps</code> <code>float</code> <p>The maximum distance between two samples for one to be considered as in the neighborhood of the other.</p> <code>2</code> <code>raw</code> <code>bool</code> <p>Whether to return the raw fingerprint or a Numpy array.</p> <code>False</code> <code>cluster_kwargs</code> <p>additional keyword arguments for the clustering algorithm.</p> <code>{}</code> Source code in <code>molfeat/calc/pharmacophore.py</code> <pre><code>def consensus_fp(\n    self,\n    mols: List[dm.Mol],\n    align: bool = True,\n    conformer_id: int = -1,\n    copy: bool = True,\n    min_samples_ratio: float = 0.5,\n    eps: float = 2,\n    raw: bool = False,\n    **cluster_kwargs,\n):\n\"\"\"Compute a consensus fingerprint from a list of molecules.\n\n    Args:\n        mols: a list of molecules.\n        align: Whether to align the conformers of the molecules.\n        conformer_id: Optional conformer id.\n        copy: Whether to copy the molecules before clustering.\n        min_samples_ratio: Percentages of mols that must contain a pharmacophoric point\n            to be considered as a core point.\n        eps: The maximum distance between two samples for one to be considered as\n            in the neighborhood of the other.\n        raw: Whether to return the raw fingerprint or a Numpy array.\n        cluster_kwargs: additional keyword arguments for the clustering algorithm.\n    \"\"\"\n\n    # Get all the features\n    features = self.get_features_from_many(\n        mols,\n        keep_mols=True,\n        align=align,\n        conformer_id=conformer_id,\n        copy=copy,\n    )\n\n    # Retrieve the aligned molecules\n    mols = features.groupby(\"mol_index\").first()[\"mol\"].tolist()\n    # Cluster the features\n    clustered_features = self.cluster_features(\n        features, min_samples_ratio=min_samples_ratio, eps=eps, **cluster_kwargs\n    )\n    # Convert features dataframe to coordinates\n    if clustered_features.empty:\n        features_coords = []\n    else:\n        features_coords = clustered_features[[\"feature_name\", \"coords\"]].values.tolist()\n    # Compute the fingerprint\n    fp = self.compute_fp_from_coords(features_coords, raw=raw)\n\n    return fp\n</code></pre>"},{"location":"api/molfeat.calc.html#molfeat.calc.pharmacophore.Pharmacophore3D.get_features","title":"<code>get_features(mol, conformer_id=-1)</code>","text":"<p>Retrieve the features for a given molecule.</p> <p>Parameters:</p> Name Type Description Default <code>mol</code> <code>dm.Mol</code> <p>the molecule of interest</p> required <p>Returns:</p> Name Type Description <code>features</code> <code>pd.DataFrame</code> <p>the features as a Numpy array</p> Source code in <code>molfeat/calc/pharmacophore.py</code> <pre><code>def get_features(self, mol: dm.Mol, conformer_id: int = -1) -&gt; pd.DataFrame:\n\"\"\"Retrieve the features for a given molecule.\n\n    Args:\n        mol: the molecule of interest\n\n    Returns:\n        features: the features as a Numpy array\n    \"\"\"\n    features_data = []\n\n    # Extract the features for this molecule\n    features = self.feature_factory.GetFeaturesForMol(mol, confId=conformer_id)\n\n    # Extract all the feature atom indices for this molecule\n    for feature in features:\n        datum = {}\n        datum[\"feature_id\"] = feature.GetId()\n        datum[\"feature_name\"] = feature.GetFamily()\n        datum[\"feature_type\"] = feature.GetType()\n        datum[\"atom_indices\"] = feature.GetAtomIds()\n        datum[\"coords\"] = np.array(feature.GetPos())\n\n        features_data.append(datum)\n\n    features_data = pd.DataFrame(features_data)\n\n    return features_data\n</code></pre>"},{"location":"api/molfeat.calc.html#molfeat.calc.pharmacophore.Pharmacophore3D.get_features_from_many","title":"<code>get_features_from_many(mols, align=True, conformer_id=-1, copy=True, keep_mols=False)</code>","text":"<p>Extract all the features from a list of molecules after an optional alignement step.</p> <p>Parameters:</p> Name Type Description Default <code>mols</code> <code>List[dm.Mol]</code> <p>List of molecules with conformers.</p> required <code>align</code> <code>bool</code> <p>Whether to align the conformers of the molecules.</p> <code>True</code> <code>conformer_id</code> <code>int</code> <p>Optional conformer id.</p> <code>-1</code> <code>copy</code> <code>bool</code> <p>Whether to copy the molecules before clustering.</p> <code>True</code> <code>keep_mols</code> <code>bool</code> <p>Whether to keep the molecules in the returned dataframe.</p> <code>False</code> Source code in <code>molfeat/calc/pharmacophore.py</code> <pre><code>def get_features_from_many(\n    self,\n    mols: List[dm.Mol],\n    align: bool = True,\n    conformer_id: int = -1,\n    copy: bool = True,\n    keep_mols: bool = False,\n):\n\"\"\"Extract all the features from a list of molecules after an optional\n    alignement step.\n\n    Args:\n        mols: List of molecules with conformers.\n        align: Whether to align the conformers of the molecules.\n        conformer_id: Optional conformer id.\n        copy: Whether to copy the molecules before clustering.\n        keep_mols: Whether to keep the molecules in the returned dataframe.\n    \"\"\"\n\n    if not all([mol.GetNumConformers() &gt;= 1 for mol in mols]):\n        raise ValueError(\"One or more input molecules is missing a conformer.\")\n\n    # Make a copy of the molecules since they are going to be modified\n    if copy:\n        mols = [dm.copy_mol(mol) for mol in mols]\n\n    # Align the conformers\n    if align:\n        mols, _ = commons.align_conformers(mols, copy=False, conformer_id=conformer_id)\n\n    all_features = pd.DataFrame()\n\n    for i, mol in enumerate(mols):\n        features = self.get_features(mol)\n        features[\"mol_index\"] = i\n\n        if keep_mols:\n            features[\"mol\"] = mol\n\n        all_features = pd.concat([all_features, features], ignore_index=True)\n\n    return all_features\n</code></pre>"},{"location":"api/molfeat.calc.html#molfeat.calc.pharmacophore.Pharmacophore3D.show","title":"<code>show(mol, features=None, alpha=1.0, sphere_radius=0.4, show_legend=True)</code>","text":"<p>Show a 3D view of a given molecule with the pharmacophoric features.</p> <p>Parameters:</p> Name Type Description Default <code>mol</code> <code>dm.Mol</code> <p>the molecule of interest</p> required <code>alpha</code> <code>float</code> <p>Alpha value for the colors (currently not working).</p> <code>1.0</code> <code>sphere_radius</code> <code>float</code> <p>Radius of the spheres for the features.</p> <code>0.4</code> <code>show_legend</code> <code>bool</code> <p>Display the legend (the layout is bad but at least it shows the legend).</p> <code>True</code> Source code in <code>molfeat/calc/pharmacophore.py</code> <pre><code>def show(\n    self,\n    mol: dm.Mol,\n    features: pd.DataFrame = None,\n    alpha: float = 1.0,\n    sphere_radius: float = 0.4,\n    show_legend: bool = True,\n):\n\"\"\"Show a 3D view of a given molecule with the pharmacophoric features.\n\n    Args:\n        mol: the molecule of interest\n        alpha: Alpha value for the colors (currently not working).\n        sphere_radius: Radius of the spheres for the features.\n        show_legend: Display the legend (the layout is bad but at least it\n            shows the legend).\n    \"\"\"\n\n    if features is None:\n        features = self.get_features(mol)\n\n    return viz.show_pharm_features(\n        mol,\n        features=features,\n        feature_factory=self.feature_factory,\n        alpha=alpha,\n        sphere_radius=sphere_radius,\n        show_legend=show_legend,\n    )\n</code></pre>"},{"location":"api/molfeat.calc.html#molfeat.calc.pharmacophore.Pharmacophore3D.show_many","title":"<code>show_many(mols, align=True, conformer_id=-1, copy=True, min_samples_ratio=0.5, eps=2, alpha=1.0, sphere_radius=0.4, show_legend=True)</code>","text":"<p>Show a 3D view of a given molecule with the pharmacophoric features.</p> <p>Parameters:</p> Name Type Description Default <code>mols</code> <code>List[dm.Mol]</code> <p>a list of molecules.</p> required <code>align</code> <code>bool</code> <p>Whether to align the conformers of the molecules.</p> <code>True</code> <code>conformer_id</code> <code>int</code> <p>Optional conformer id.</p> <code>-1</code> <code>copy</code> <code>bool</code> <p>Whether to copy the molecules before clustering.</p> <code>True</code> <code>min_samples_ratio</code> <code>float</code> <p>Percentages of mols that must contain a pharmacophoric point to be considered as a core point.</p> <code>0.5</code> <code>eps</code> <code>float</code> <p>The maximum distance between two samples for one to be considered as in the neighborhood of the other.</p> <code>2</code> <code>alpha</code> <code>float</code> <p>Alpha value for the colors (currently not working).</p> <code>1.0</code> <code>sphere_radius</code> <code>float</code> <p>Radius of the spheres for the features.</p> <code>0.4</code> <code>show_legend</code> <code>bool</code> <p>Display the legend (the layout is bad but at least it shows the legend).</p> <code>True</code> Source code in <code>molfeat/calc/pharmacophore.py</code> <pre><code>def show_many(\n    self,\n    mols: List[dm.Mol],\n    align: bool = True,\n    conformer_id: int = -1,\n    copy: bool = True,\n    min_samples_ratio: float = 0.5,\n    eps: float = 2,\n    alpha: float = 1.0,\n    sphere_radius: float = 0.4,\n    show_legend: bool = True,\n):\n\"\"\"Show a 3D view of a given molecule with the pharmacophoric features.\n\n    Args:\n        mols: a list of molecules.\n        align: Whether to align the conformers of the molecules.\n        conformer_id: Optional conformer id.\n        copy: Whether to copy the molecules before clustering.\n        min_samples_ratio: Percentages of mols that must contain a pharmacophoric point\n            to be considered as a core point.\n        eps: The maximum distance between two samples for one to be considered as\n            in the neighborhood of the other.\n        alpha: Alpha value for the colors (currently not working).\n        sphere_radius: Radius of the spheres for the features.\n        show_legend: Display the legend (the layout is bad but at least it\n            shows the legend).\n    \"\"\"\n\n    # Get all the features\n    features = self.get_features_from_many(\n        mols,\n        keep_mols=True,\n        align=align,\n        conformer_id=conformer_id,\n        copy=copy,\n    )\n\n    # Retrieve the aligned molecules\n    mols = features.groupby(\"mol_index\").first()[\"mol\"].tolist()\n\n    # Cluster the features\n    clustered_features = self.cluster_features(\n        features,\n        min_samples_ratio=min_samples_ratio,\n        eps=eps,\n    )\n\n    return viz.show_pharm_features(\n        mols,\n        features=clustered_features,\n        feature_factory=self.feature_factory,\n        alpha=alpha,\n        sphere_radius=sphere_radius,\n        show_legend=show_legend,\n    )\n</code></pre>"},{"location":"api/molfeat.calc.html#molfeat.calc.pharmacophore.get_feature_factory","title":"<code>get_feature_factory(factory)</code>","text":"<p>Build a feature factory.</p> Source code in <code>molfeat/calc/pharmacophore.py</code> <pre><code>def get_feature_factory(\n    factory: Union[str, MolChemicalFeatureFactory]\n) -&gt; MolChemicalFeatureFactory:\n\"\"\"Build a feature factory.\"\"\"\n\n    if isinstance(factory, MolChemicalFeatureFactory):\n        feature_factory = factory\n\n    elif factory == \"pmapper\":\n        with pkg_resources.path(\"pmapper\", \"smarts_features.fdef\") as fdef_name:\n            feature_factory = ChemicalFeatures.BuildFeatureFactory(str(fdef_name))  # type: ignore\n\n    elif factory == \"gobbi\":\n        feature_factory = Gobbi_Pharm2D.factory.featFactory\n\n    elif factory == \"cats\":\n        with pkg_resources.open_text(\"molfeat.data\", \"cats_features.fdef\") as instream:\n            feature_factory = ChemicalFeatures.BuildFeatureFactoryFromString(instream.read())  # type: ignore\n\n    elif factory == \"default\":\n        # Load default feature definition file\n        fdefFile = os.path.join(RDConfig.RDDataDir, \"BaseFeatures.fdef\")\n        feature_factory = ChemicalFeatures.BuildFeatureFactory(fdefFile)  # type: ignore\n\n    elif dm.fs.exists(factory):\n        with fsspec.open(factory, \"r\") as instream:\n            fdef = instream.read()\n            feature_factory = ChemicalFeatures.BuildFeatureFactoryFromString(fdef)  # type: ignore\n\n    else:\n        raise ValueError(f\"The factory '{factory}' is not supported.\")\n\n    return feature_factory\n</code></pre>"},{"location":"api/molfeat.calc.html#molfeat.calc.pharmacophore.get_sig_factory","title":"<code>get_sig_factory(factory, useCounts=None, minPointCount=None, maxPointCount=None, shortestPathsOnly=None, includeBondOrder=None, skipFeats=None, trianglePruneBins=None, bins=None, init_factory=True)</code>","text":"<p>Build a signature factory.</p> Source code in <code>molfeat/calc/pharmacophore.py</code> <pre><code>def get_sig_factory(\n    factory: Union[str, MolChemicalFeatureFactory],\n    useCounts: bool = None,\n    minPointCount: int = None,\n    maxPointCount: int = None,\n    shortestPathsOnly: bool = None,\n    includeBondOrder: bool = None,\n    skipFeats: List[str] = None,\n    trianglePruneBins: bool = None,\n    bins: List[Tuple[int, int]] = None,\n    init_factory: bool = True,\n):\n\"\"\"Build a signature factory.\"\"\"\n\n    # Get feature factory\n    feature_factory = get_feature_factory(factory)\n\n    # Get default params and override them as needed\n    params, bins = get_sig_factory_params(\n        factory,\n        useCounts=useCounts,\n        minPointCount=minPointCount,\n        maxPointCount=maxPointCount,\n        shortestPathsOnly=shortestPathsOnly,\n        includeBondOrder=includeBondOrder,\n        skipFeats=skipFeats,\n        trianglePruneBins=trianglePruneBins,\n        bins=bins,\n    )\n\n    # Build signature factory\n    sig_factory = SigFactory(feature_factory, **params)\n\n    # Set bins\n    sig_factory.SetBins(bins)\n\n    # Init the factory\n    if init_factory:\n        sig_factory.Init()\n\n    return sig_factory\n</code></pre>"},{"location":"api/molfeat.calc.html#molfeat.calc.pharmacophore.get_sig_factory_params","title":"<code>get_sig_factory_params(factory_name, useCounts=None, minPointCount=None, maxPointCount=None, shortestPathsOnly=None, includeBondOrder=None, skipFeats=None, trianglePruneBins=None, bins=None)</code>","text":"<p>Get the default parameter for a given sig factory allowing some of them to be overriden.</p> <p>Parameters:</p> Name Type Description Default <code>factory_name</code> <code>str</code> <p>The name of the factory.</p> required Source code in <code>molfeat/calc/pharmacophore.py</code> <pre><code>def get_sig_factory_params(\n    factory_name: str,\n    useCounts: bool = None,\n    minPointCount: int = None,\n    maxPointCount: int = None,\n    shortestPathsOnly: bool = None,\n    includeBondOrder: bool = None,\n    skipFeats: List[str] = None,\n    trianglePruneBins: bool = None,\n    bins: List[Tuple[int, int]] = None,\n) -&gt; Tuple[Dict[str, Any], list]:\n\"\"\"Get the default parameter for a given sig factory allowing some of them to be overriden.\n\n    Args:\n        factory_name: The name of the factory.\n    \"\"\"\n\n    # Get default params.\n\n    if factory_name == \"cats\":\n        default_bins = [\n            (0, 1),\n            (1, 2),\n            (2, 3),\n            (3, 4),\n            (4, 5),\n            (5, 6),\n            (6, 7),\n            (7, 8),\n            (8, 9),\n        ]\n        params = dict(\n            useCounts=True,\n            minPointCount=2,\n            maxPointCount=2,\n            trianglePruneBins=True,\n            shortestPathsOnly=True,\n            includeBondOrder=False,\n        )\n\n    elif factory_name == \"gobbi\":\n        default_bins = [(2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 100)]\n        params = dict(\n            useCounts=False,\n            minPointCount=2,\n            maxPointCount=3,\n            trianglePruneBins=True,\n            shortestPathsOnly=True,\n            includeBondOrder=False,\n        )\n\n    elif factory_name == \"pmapper\":\n        default_bins = [(2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 100)]\n        params = dict(\n            useCounts=False,\n            minPointCount=2,\n            maxPointCount=3,\n            trianglePruneBins=False,\n            shortestPathsOnly=True,\n            includeBondOrder=False,\n        )\n\n    elif factory_name == \"default\":\n        params = dict(\n            useCounts=False,\n            minPointCount=2,\n            maxPointCount=3,\n            trianglePruneBins=False,\n            shortestPathsOnly=True,\n            skipFeats=[\"ZnBinder\", \"LumpedHydrophobe\"],\n            includeBondOrder=False,\n        )\n        default_bins = [(2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 100)]\n\n    else:\n        raise ValueError(f\"Default values for {factory_name} are not known.\")\n\n    # Override default params when set.\n\n    if minPointCount is not None:\n        params[\"minPointCount\"] = minPointCount\n\n    if maxPointCount is not None:\n        params[\"maxPointCount\"] = maxPointCount\n\n    if trianglePruneBins is not None:\n        params[\"trianglePruneBins\"] = trianglePruneBins\n\n    if includeBondOrder is not None:\n        params[\"includeBondOrder\"] = includeBondOrder\n\n    if useCounts is not None:\n        params[\"useCounts\"] = useCounts\n\n    if skipFeats is not None:\n        params[\"skipFeats\"] = skipFeats  # type: ignore\n\n    if shortestPathsOnly is not None:\n        params[\"shortestPathsOnly\"] = shortestPathsOnly\n\n    bins = bins or default_bins\n\n    return params, bins\n</code></pre>"},{"location":"api/molfeat.calc.html#scaffold-keys","title":"<code>Scaffold Keys</code>","text":""},{"location":"api/molfeat.calc.html#molfeat.calc.skeys.ScaffoldKeyCalculator","title":"<code>ScaffoldKeyCalculator</code>","text":"<p>         Bases: <code>SerializableCalculator</code></p> <p>Implementation of the Scaffold Keys described in <code>Identification of Bioisosteric Scaffolds using Scaffold Keys</code> by Peter Ertl</p> Source code in <code>molfeat/calc/skeys.py</code> <pre><code>class ScaffoldKeyCalculator(SerializableCalculator):\n\"\"\"\n    Implementation of the Scaffold Keys described in\n    `Identification of Bioisosteric Scaffolds using Scaffold Keys` by Peter Ertl\n    \"\"\"\n\n    DESCRIPTORS = [\n        \"n_atom_in_rings\",\n        \"n_atom_in_conjugated_ring\",\n        \"n_atoms_not_in_conjugated_ring\",\n        \"n_atom_in_chain\",\n        \"n_atom_exocyclic\",\n        \"n_nitrogen\",\n        \"n_nitrogen_in_ring\",\n        \"n_oxygen\",\n        \"n_oxygen_in_ring\",\n        \"n_sulfur\",\n        \"n_heteroatoms\",\n        \"n_heteroatoms_in_ring\",\n        \"n_atom_spiro_atoms\",\n        \"n_heteroatom_more_than_2_conn\",\n        \"n_carbon_atleast_2_heteroatoms\",\n        \"n_atom_at_least_2_nei_more_than_2_conn\",\n        \"abs_scaffold_format_charge\",\n        \"n_bonds\",\n        \"n_multiple_non_conj_ring_bonds\",\n        \"n_bonds_2_heteroatoms\",\n        \"n_carbon_het_carbon_het_bonds\",\n        \"n_bonds_at_least_3_conn\",\n        \"n_exocyclic_single_bonds_carbon\",\n        \"n_exocyclic_single_bonds_nitrogen\",\n        \"n_non_ring_bonds_2_conj_rings\",\n        \"n_non_ring_bonds_conj_nonconj_rings\",\n        \"n_bonds_atoms_with_at_least_one_nei_with_2_conn\",\n        \"n_simple_rings\",\n        \"size_largest_ring\",\n        \"n_simple_rings_no_heteroatoms\",\n        \"n_simple_rings_1_heteroatoms\",\n        \"n_simple_rings_2_heteroatoms\",\n        \"n_simple_rings_at_least_3_heteroatoms\",\n        \"n_simple_non_conj_5_atoms_rings\",\n        \"n_simple_non_conj_6_atoms_rings\",\n        \"n_ring_system\",\n        \"n_ring_system_with_2_non_conj_simple_ring\",\n        \"n_ring_system_with_2_conj_simple_ring\",\n        \"n_ring_system_with_conj_non_conj_simple_ring\",\n        \"n_ring_system_with_3_conj_simple_ring\",\n        \"n_ring_system_with_3_non_conj_simple_ring\",\n        \"n_ring_system_with_greater_one_conj_nonconj_simple_ring\",\n    ]\n\n    NORM_PARAMS = pd.read_csv(\n        Path(molfeat.__file__).parents[0].joinpath(\"data/skey_parameters.csv\"),\n        index_col=0,\n    ).loc[DESCRIPTORS]\n\n    def __init__(\n        self, normalize: bool = False, verbose: bool = False, use_scaffold: bool = False, **kwargs\n    ):\n\"\"\"\n        Init of the scaffold key function\n\n        Args:\n            normalize: whether to normalize the value of the feature\n            verbose: whether to log errors\n            use_scaffold: whether to convert the molecule into scaffold first\n        \"\"\"\n        self.normalize = normalize\n        self.verbose = verbose\n        self.use_scaffold = use_scaffold\n\n    def __getstate__(self):\n\"\"\"Get state of the scaffold key function\"\"\"\n        state = {}\n        state[\"normalize\"] = self.normalize\n        state[\"verbose\"] = self.verbose\n        state[\"use_scaffold\"] = self.use_scaffold\n        return state\n\n    def __len__(self):\n        return len(self.DESCRIPTORS)\n\n    @classmethod\n    def compute_normalization(cls, features: np.ndarray):\n\"\"\"Normalize input features. The normalization parameters are\n        computed by the scaffolds of 2.1M molecules from CHEMBL 29.\n        \"\"\"\n        return (features - cls.NORM_PARAMS[\"mean\"]) / cls.NORM_PARAMS[\"std\"]\n\n    def n_atom_in_rings(self, mol: rdchem.Mol):\n\"\"\"1. number of ring atoms\"\"\"\n        sm = dm.from_smarts(\"[r]\")\n        return len(mol.GetSubstructMatches(sm, uniquify=True))\n\n    def n_atom_in_conjugated_ring(self, mol: rdchem.Mol):\n\"\"\"2. number of atoms in conjugated rings\"\"\"\n        ri = mol.GetRingInfo()\n        n = 0\n        for ring in ri.AtomRings():\n            if _is_ring_fully_conjugated(mol, ring):\n                n += len(ring)\n        return n\n\n    def n_atoms_not_in_conjugated_ring(self, mol: rdchem.Mol):\n\"\"\"\n        3. number of atoms not in conjugated rings\n        (i.e. atoms in aliphatic rings and non-ring atoms)\n        \"\"\"\n        # EN: replace conjugation by aromatic\n        ri = mol.GetRingInfo()\n        n = 0\n        for ring in ri.AtomRings():\n            if not _is_ring_fully_conjugated(mol, ring):\n                n += len(ring)\n        return n\n\n    def n_atom_in_chain(self, mol: rdchem.Mol):\n\"\"\"4. number atoms in chains (not counting double-connected exo-chain atoms)\"\"\"\n        sm = dm.from_smarts(\"[!r;!$(*=[r])]\")\n        return len(mol.GetSubstructMatches(sm, uniquify=True))\n\n    def n_atom_exocyclic(self, mol: rdchem.Mol):\n\"\"\"5. number of exocyclic atoms (connected by multiple bonds to a ring)\"\"\"\n        sm = dm.from_smarts(\"[!r;!$(*-[r])&amp;$(*~[r])]\")\n        return len(mol.GetSubstructMatches(sm, uniquify=True))\n\n    def n_nitrogen(self, mol: rdchem.Mol):\n\"\"\"6. number of nitrogen\"\"\"\n        sm = dm.from_smarts(\"[#7]\")\n        return len(mol.GetSubstructMatches(sm, uniquify=True))\n\n    def n_nitrogen_in_ring(self, mol: rdchem.Mol):\n\"\"\"7. number of nitrogen in rings\"\"\"\n        sm = dm.from_smarts(\"[#7;r]\")\n        return len(mol.GetSubstructMatches(sm, uniquify=True))\n\n    def n_oxygen(self, mol: rdchem.Mol):\n\"\"\"8. number of oxygen\"\"\"\n        sm = dm.from_smarts(\"[#8]\")\n        return len(mol.GetSubstructMatches(sm, uniquify=True))\n\n    def n_oxygen_in_ring(self, mol: rdchem.Mol):\n\"\"\"9. number of oxygen in rings\"\"\"\n        sm = dm.from_smarts(\"[#8]\")\n        return len(mol.GetSubstructMatches(sm, uniquify=True))\n\n    def n_sulfur(self, mol: rdchem.Mol):\n\"\"\"10. number of sulfur atoms\"\"\"\n        sm = dm.from_smarts(\"[#16]\")\n        return len(mol.GetSubstructMatches(sm, uniquify=True))\n\n    def n_heteroatoms(self, mol: rdchem.Mol):\n\"\"\"11. number of heteroatoms\"\"\"\n\n        sm = dm.from_smarts(\"[!#1&amp;!#6]\")\n        return len(mol.GetSubstructMatches(sm, uniquify=True))\n\n    def n_heteroatoms_in_ring(self, mol: rdchem.Mol):\n\"\"\"12. number of heteroatoms in rings\"\"\"\n        sm = dm.from_smarts(\"[!#1&amp;!#6&amp;r]\")\n        return len(mol.GetSubstructMatches(sm, uniquify=True))\n\n    def n_atom_spiro_atoms(self, mol: rdchem.Mol):\n\"\"\"13. number of spiro atoms\"\"\"\n        return Desc.CalcNumSpiroAtoms(mol)\n\n    def n_heteroatom_more_than_2_conn(self, mol: rdchem.Mol):\n\"\"\"14. number of heteroatoms with more than 2 connections\"\"\"\n        sm = dm.from_smarts(\"[!#1;!#6;!D1!D0;!D2]\")\n        return len(mol.GetSubstructMatches(sm, uniquify=True))\n\n    def n_carbon_atleast_2_heteroatoms(self, mol: rdchem.Mol):\n\"\"\"15. number of carbon atoms connected to at least 2 heteroatoms\"\"\"\n        n_atoms = 0\n        for atom in mol.GetAtoms():\n            tmp = [x for x in atom.GetNeighbors() if x.GetAtomicNum() not in [1, 6]]\n            n_atoms += len(tmp) &gt;= 2\n        return n_atoms\n\n    def n_atom_at_least_2_nei_more_than_2_conn(self, mol: rdchem.Mol):\n\"\"\"16. Number of atoms where at least 2 connected atoms have more than 2 connections\"\"\"\n        n_atoms = 0\n        for atom in mol.GetAtoms():\n            tmp = [x for x in atom.GetNeighbors() if len(x.GetNeighbors()) &gt; 2]\n            n_atoms += len(tmp) &gt; 2\n        return n_atoms\n\n    def abs_scaffold_format_charge(self, mol: rdchem.Mol):\n\"\"\"17. absolute value of the scaffold formal charge\"\"\"\n        charge = GetFormalCharge(mol)\n        return abs(charge)\n\n    def n_bonds(self, mol: rdchem.Mol):\n\"\"\"18. number of bonds\"\"\"\n        return mol.GetNumBonds()\n\n    def n_multiple_non_conj_ring_bonds(self, mol: rdchem.Mol):\n\"\"\"19. number of multiple, nonconjugated ring bonds\"\"\"\n        extracted_rings = []\n        nr_multiple_bonds_infcr = 0  # infcr: in not fully conjugated ring\n        rings = Chem.GetSymmSSSR(mol)\n        for i in range(len(rings)):\n            extracted_rings.append(list(rings[i]))\n        for ring in extracted_rings:\n            if not _is_ring_fully_conjugated(mol, ring):\n                nr_multiple_bonds_infcr += _n_multiple_bond_in_ring(mol, ring)\n        return nr_multiple_bonds_infcr\n\n    def n_bonds_2_heteroatoms(self, mol: rdchem.Mol):\n\"\"\"20. number of bonds connecting 2 heteroatoms\"\"\"\n        sm = dm.from_smarts(\"[!#1&amp;!#6]~[!#1&amp;!#6]\")\n        return len(mol.GetSubstructMatches(sm, uniquify=True))\n\n    def n_carbon_het_carbon_het_bonds(self, mol: rdchem.Mol):\n\"\"\"21. number of bonds connecting 2 heteroatoms through 2 carbons\"\"\"\n        sm = dm.from_smarts(\"[!#1&amp;!#6]~[#6]~[#6]~[!#1&amp;!#6]\")\n        return len(mol.GetSubstructMatches(sm, uniquify=True))\n\n    def n_bonds_at_least_3_conn(self, mol: rdchem.Mol):\n\"\"\"22. number of bonds with at least 3 connections on both its atoms\"\"\"\n        sm = dm.from_smarts(\"[$([!#1](~[!#1])(~[!#1])~[!#1])][$([!#1](~[!#1])(~[!#1])~[!#1])]\")\n        return len(mol.GetSubstructMatches(sm, uniquify=True))\n\n    def n_exocyclic_single_bonds_carbon(self, mol: rdchem.Mol):\n\"\"\"23. number of exocyclic single bonds where a ring atom is carbon\"\"\"\n        sm = dm.from_smarts(\"[!R;!#1]-[#6;R]\")\n        return len(mol.GetSubstructMatches(sm, uniquify=True))\n\n    def n_exocyclic_single_bonds_nitrogen(self, mol: rdchem.Mol):\n\"\"\"24. number of exocyclic single bonds where a ring atom is nitrogen\"\"\"\n        sm = dm.from_smarts(\"[!R;!#1]-[#7;R]\")\n        return len(mol.GetSubstructMatches(sm, uniquify=True))\n\n    def n_non_ring_bonds_2_conj_rings(self, mol: rdchem.Mol):\n\"\"\"25. number of non-ring bonds connecting 2 nonconjugated rings\"\"\"\n        # EN: this is interpretated literally as bonds and not path\n        ring_atom_conj_state = _ring_atom_state(mol)\n        sm = dm.from_smarts(\"[R:1]!@[R:2]\")\n        bond_list = mol.GetSubstructMatches(sm, uniquify=True)\n        result = 0\n        for a_start, a_end in bond_list:\n            s_state = ring_atom_conj_state.get(a_start)\n            e_state = ring_atom_conj_state.get(a_end)\n            if False in s_state and False in e_state:\n                result += 1\n        return result\n\n    def n_non_ring_bonds_conj_nonconj_rings(self, mol: rdchem.Mol):\n\"\"\"\n        26. number of non-ring bonds connecting 2 rings,\n        one of them conjugated and one non-conjugated\n        \"\"\"\n        # EN: this is interpretated literally as bonds and not path\n\n        ring_atom_conj_state = _ring_atom_state(mol)\n        sm = dm.from_smarts(\"[R:1]!@[R:2]\")\n        bond_list = mol.GetSubstructMatches(sm, uniquify=True)\n        result = 0\n        for a_start, a_end in bond_list:\n            s_state = ring_atom_conj_state.get(a_start)\n            e_state = ring_atom_conj_state.get(a_end)\n            if (True in s_state and False in e_state) or (False in s_state and True in e_state):\n                result += 1\n        return result\n\n    def n_bonds_atoms_with_at_least_one_nei_with_2_conn(self, mol: rdchem.Mol):\n\"\"\"\n        27. number of bonds where both atoms have at least one neighbor\n        (not considering the bond atoms) with more than 2 connections\n        \"\"\"\n        result = 0\n        huge_conn = list(\n            itertools.chain(*mol.GetSubstructMatches(dm.from_smarts(\"[*;!D0;!D1;!D2]\"), uniquify=1))\n        )\n        for bond in mol.GetBonds():\n            a_start, a_end = bond.GetBeginAtom(), bond.GetEndAtom()\n            # we need to exclud the bond atom themselves\n            allowed_conn_table = [\n                x for x in huge_conn if x not in [a_start.GetIdx(), a_end.GetIdx()]\n            ]\n            if any([x.GetIdx() in allowed_conn_table for x in a_start.GetNeighbors()]) and any(\n                [y.GetIdx() in allowed_conn_table for y in a_end.GetNeighbors()]\n            ):\n                result += 1\n        return result\n\n    def n_simple_rings(self, mol: rdchem.Mol):\n\"\"\"28. number of simple rings\"\"\"\n        ri = mol.GetRingInfo()\n        return ri.NumRings()\n\n    def size_largest_ring(self, mol: rdchem.Mol):\n\"\"\"29. Size of the largest ring\"\"\"\n        ri = mol.GetRingInfo()\n        max_ring_size = max((len(r) for r in ri.AtomRings()), default=0)\n        return max_ring_size\n\n    def n_simple_rings_no_heteroatoms(self, mol: rdchem.Mol):\n\"\"\"30. number of simple rings with no heteroatoms\"\"\"\n        ri = mol.GetRingInfo()\n        n_heteros = _count_heteroatom_per_ring(mol, ri.AtomRings())\n        return sum(1 for x in n_heteros if x == 0)\n\n    def n_simple_rings_1_heteroatoms(self, mol: rdchem.Mol):\n\"\"\"31. number of simple rings with 1 heteroatom\"\"\"\n        ri = mol.GetRingInfo()\n        n_heteros = _count_heteroatom_per_ring(mol, ri.AtomRings())\n        return sum(1 for x in n_heteros if x == 1)\n\n    def n_simple_rings_2_heteroatoms(self, mol: rdchem.Mol):\n\"\"\"32. number of simple rings with 2 heteroatom\"\"\"\n        ri = mol.GetRingInfo()\n        n_heteros = _count_heteroatom_per_ring(mol, ri.AtomRings())\n        return sum(1 for x in n_heteros if x == 2)\n\n    def n_simple_rings_at_least_3_heteroatoms(self, mol: rdchem.Mol):\n\"\"\"33. number of simple rings with 3 or more heteroatoms\"\"\"\n        ri = mol.GetRingInfo()\n        n_heteros = _count_heteroatom_per_ring(mol, ri.AtomRings())\n        return sum(1 for x in n_heteros if x &gt;= 3)\n\n    def n_simple_non_conj_5_atoms_rings(self, mol: rdchem.Mol):\n\"\"\"34. number of simple non-conjugated rings with 5 atoms\"\"\"\n        ri = mol.GetRingInfo()\n        n = 0\n        for ring in ri.AtomRings():\n            if not _is_ring_fully_conjugated(mol, ring) and len(ring) == 5:\n                n += 1\n        return n\n\n    def n_simple_non_conj_6_atoms_rings(self, mol: rdchem.Mol):\n\"\"\"35. number of simple non-conjugated rings with 6 atoms\"\"\"\n        ri = mol.GetRingInfo()\n        n = 0\n        for ring in ri.AtomRings():\n            if not _is_ring_fully_conjugated(mol, ring) and len(ring) == 6:\n                n += 1\n        return n\n\n    def n_ring_system(self, mol: rdchem.Mol):\n\"\"\"36. number of ring systems\"\"\"\n        simple_rings, ring_system, _ = _get_ring_system(mol)\n        return len(ring_system)\n\n    def n_ring_system_with_2_non_conj_simple_ring(self, mol: rdchem.Mol):\n\"\"\"37. number of rings systems with 2 non-conjugated simple rings\"\"\"\n        simple_rings, _, ring_map = _get_ring_system(mol)\n        conj_rings_map = dict(\n            (i, _is_ring_fully_conjugated(mol, x)) for i, x in enumerate(simple_rings)\n        )\n        result = 0\n        for ring_set in ring_map:\n            n_not_conj = sum(not conj_rings_map[rnum] for rnum in ring_set)\n            result += n_not_conj == 2\n        return result\n\n    def n_ring_system_with_2_conj_simple_ring(self, mol: rdchem.Mol):\n\"\"\"38. number of rings systems with 2 conjugated simple rings\"\"\"\n        simple_rings, _, ring_map = _get_ring_system(mol)\n        conj_rings_map = dict(\n            (i, _is_ring_fully_conjugated(mol, x)) for i, x in enumerate(simple_rings)\n        )\n        result = 0\n        for ring_set in ring_map:\n            n_conj = sum(conj_rings_map[rnum] for rnum in ring_set)\n            result += n_conj == 2\n        return result\n\n    def n_ring_system_with_conj_non_conj_simple_ring(self, mol: rdchem.Mol):\n\"\"\"39 number of ring system containing 2 simple rings, one conjugated and one nonconjugated\"\"\"\n        simple_rings, _, ring_map = _get_ring_system(mol)\n        conj_rings_map = dict(\n            (i, _is_ring_fully_conjugated(mol, x)) for i, x in enumerate(simple_rings)\n        )\n        result = 0\n        for ring_set in ring_map:\n            if len(ring_set) == 2:\n                n_conj = sum(conj_rings_map[rnum] for rnum in ring_set)\n                result += n_conj == 1\n        return result\n\n    def n_ring_system_with_3_conj_simple_ring(self, mol: rdchem.Mol):\n\"\"\"40. number of rings systems with 3 conjugated simple rings\"\"\"\n        simple_rings, _, ring_map = _get_ring_system(mol)\n        conj_rings_map = dict(\n            (i, _is_ring_fully_conjugated(mol, x)) for i, x in enumerate(simple_rings)\n        )\n        result = 0\n        for ring_set in ring_map:\n            n_conj = sum(conj_rings_map[rnum] for rnum in ring_set)\n            result += n_conj == 3\n        return result\n\n    def n_ring_system_with_3_non_conj_simple_ring(self, mol: rdchem.Mol):\n\"\"\"41. number of rings systems with 3 non-conjugated simple rings\"\"\"\n        simple_rings, _, ring_map = _get_ring_system(mol)\n        conj_rings_map = dict(\n            (i, _is_ring_fully_conjugated(mol, x)) for i, x in enumerate(simple_rings)\n        )\n        result = 0\n        for ring_set in ring_map:\n            n_not_conj = sum(not conj_rings_map[rnum] for rnum in ring_set)\n            result += n_not_conj == 3\n        return result\n\n    def n_ring_system_with_greater_one_conj_nonconj_simple_ring(self, mol: rdchem.Mol):\n\"\"\"42. number of ring system containing 3 simple rings, at least one conjugated and one nonconjugated\"\"\"\n        simple_rings, _, ring_map = _get_ring_system(mol)\n        conj_rings_map = dict(\n            (i, _is_ring_fully_conjugated(mol, x)) for i, x in enumerate(simple_rings)\n        )\n        result = 0\n        for ring_set in ring_map:\n            if len(ring_set) == 3:\n                n_conj = sum(conj_rings_map[rnum] for rnum in ring_set)\n                result += n_conj in [1, 2]\n        return result\n\n    @property\n    def columns(self):\n\"\"\"Get the name of all the descriptors of this calculator\"\"\"\n        return list(self.DESCRIPTORS)\n\n    def __call__(self, mol: Union[rdchem.Mol, str]):\nr\"\"\"\n        Compute the Fingerprint of a molecule\n\n        Args:\n            mol: the molecule of interest\n\n        Returns:\n            props (np.ndarray): list of computed rdkit molecular descriptors\n        \"\"\"\n        mol = dm.to_mol(mol)\n        if self.use_scaffold and mol is not None:\n            mol = MurckoScaffold.GetScaffoldForMol(mol)\n\n        props = []\n        for k in self.DESCRIPTORS:\n            try:\n                fn = getattr(self, k)\n                props.append(fn(mol))\n            except Exception as e:\n                if self.verbose:\n                    logger.error(e)\n                props.append(float(\"nan\"))\n        props = np.asarray(props)\n        if self.normalize:\n            return self.compute_normalization(props)\n        return props\n</code></pre>"},{"location":"api/molfeat.calc.html#molfeat.calc.skeys.ScaffoldKeyCalculator.DESCRIPTORS","title":"<code>DESCRIPTORS = ['n_atom_in_rings', 'n_atom_in_conjugated_ring', 'n_atoms_not_in_conjugated_ring', 'n_atom_in_chain', 'n_atom_exocyclic', 'n_nitrogen', 'n_nitrogen_in_ring', 'n_oxygen', 'n_oxygen_in_ring', 'n_sulfur', 'n_heteroatoms', 'n_heteroatoms_in_ring', 'n_atom_spiro_atoms', 'n_heteroatom_more_than_2_conn', 'n_carbon_atleast_2_heteroatoms', 'n_atom_at_least_2_nei_more_than_2_conn', 'abs_scaffold_format_charge', 'n_bonds', 'n_multiple_non_conj_ring_bonds', 'n_bonds_2_heteroatoms', 'n_carbon_het_carbon_het_bonds', 'n_bonds_at_least_3_conn', 'n_exocyclic_single_bonds_carbon', 'n_exocyclic_single_bonds_nitrogen', 'n_non_ring_bonds_2_conj_rings', 'n_non_ring_bonds_conj_nonconj_rings', 'n_bonds_atoms_with_at_least_one_nei_with_2_conn', 'n_simple_rings', 'size_largest_ring', 'n_simple_rings_no_heteroatoms', 'n_simple_rings_1_heteroatoms', 'n_simple_rings_2_heteroatoms', 'n_simple_rings_at_least_3_heteroatoms', 'n_simple_non_conj_5_atoms_rings', 'n_simple_non_conj_6_atoms_rings', 'n_ring_system', 'n_ring_system_with_2_non_conj_simple_ring', 'n_ring_system_with_2_conj_simple_ring', 'n_ring_system_with_conj_non_conj_simple_ring', 'n_ring_system_with_3_conj_simple_ring', 'n_ring_system_with_3_non_conj_simple_ring', 'n_ring_system_with_greater_one_conj_nonconj_simple_ring']</code>  <code>class-attribute</code>","text":""},{"location":"api/molfeat.calc.html#molfeat.calc.skeys.ScaffoldKeyCalculator.NORM_PARAMS","title":"<code>NORM_PARAMS = pd.read_csv(Path(molfeat.__file__).parents[0].joinpath('data/skey_parameters.csv'), index_col=0).loc[DESCRIPTORS]</code>  <code>class-attribute</code>","text":""},{"location":"api/molfeat.calc.html#molfeat.calc.skeys.ScaffoldKeyCalculator.columns","title":"<code>columns</code>  <code>property</code>","text":"<p>Get the name of all the descriptors of this calculator</p>"},{"location":"api/molfeat.calc.html#molfeat.calc.skeys.ScaffoldKeyCalculator.normalize","title":"<code>normalize = normalize</code>  <code>instance-attribute</code>","text":""},{"location":"api/molfeat.calc.html#molfeat.calc.skeys.ScaffoldKeyCalculator.use_scaffold","title":"<code>use_scaffold = use_scaffold</code>  <code>instance-attribute</code>","text":""},{"location":"api/molfeat.calc.html#molfeat.calc.skeys.ScaffoldKeyCalculator.verbose","title":"<code>verbose = verbose</code>  <code>instance-attribute</code>","text":""},{"location":"api/molfeat.calc.html#molfeat.calc.skeys.ScaffoldKeyCalculator.__call__","title":"<code>__call__(mol)</code>","text":"<p>Compute the Fingerprint of a molecule</p> <p>Parameters:</p> Name Type Description Default <code>mol</code> <code>Union[rdchem.Mol, str]</code> <p>the molecule of interest</p> required <p>Returns:</p> Name Type Description <code>props</code> <code>np.ndarray</code> <p>list of computed rdkit molecular descriptors</p> Source code in <code>molfeat/calc/skeys.py</code> <pre><code>def __call__(self, mol: Union[rdchem.Mol, str]):\nr\"\"\"\n    Compute the Fingerprint of a molecule\n\n    Args:\n        mol: the molecule of interest\n\n    Returns:\n        props (np.ndarray): list of computed rdkit molecular descriptors\n    \"\"\"\n    mol = dm.to_mol(mol)\n    if self.use_scaffold and mol is not None:\n        mol = MurckoScaffold.GetScaffoldForMol(mol)\n\n    props = []\n    for k in self.DESCRIPTORS:\n        try:\n            fn = getattr(self, k)\n            props.append(fn(mol))\n        except Exception as e:\n            if self.verbose:\n                logger.error(e)\n            props.append(float(\"nan\"))\n    props = np.asarray(props)\n    if self.normalize:\n        return self.compute_normalization(props)\n    return props\n</code></pre>"},{"location":"api/molfeat.calc.html#molfeat.calc.skeys.ScaffoldKeyCalculator.__getstate__","title":"<code>__getstate__()</code>","text":"<p>Get state of the scaffold key function</p> Source code in <code>molfeat/calc/skeys.py</code> <pre><code>def __getstate__(self):\n\"\"\"Get state of the scaffold key function\"\"\"\n    state = {}\n    state[\"normalize\"] = self.normalize\n    state[\"verbose\"] = self.verbose\n    state[\"use_scaffold\"] = self.use_scaffold\n    return state\n</code></pre>"},{"location":"api/molfeat.calc.html#molfeat.calc.skeys.ScaffoldKeyCalculator.__init__","title":"<code>__init__(normalize=False, verbose=False, use_scaffold=False, **kwargs)</code>","text":"<p>Init of the scaffold key function</p> <p>Parameters:</p> Name Type Description Default <code>normalize</code> <code>bool</code> <p>whether to normalize the value of the feature</p> <code>False</code> <code>verbose</code> <code>bool</code> <p>whether to log errors</p> <code>False</code> <code>use_scaffold</code> <code>bool</code> <p>whether to convert the molecule into scaffold first</p> <code>False</code> Source code in <code>molfeat/calc/skeys.py</code> <pre><code>def __init__(\n    self, normalize: bool = False, verbose: bool = False, use_scaffold: bool = False, **kwargs\n):\n\"\"\"\n    Init of the scaffold key function\n\n    Args:\n        normalize: whether to normalize the value of the feature\n        verbose: whether to log errors\n        use_scaffold: whether to convert the molecule into scaffold first\n    \"\"\"\n    self.normalize = normalize\n    self.verbose = verbose\n    self.use_scaffold = use_scaffold\n</code></pre>"},{"location":"api/molfeat.calc.html#molfeat.calc.skeys.ScaffoldKeyCalculator.__len__","title":"<code>__len__()</code>","text":"Source code in <code>molfeat/calc/skeys.py</code> <pre><code>def __len__(self):\n    return len(self.DESCRIPTORS)\n</code></pre>"},{"location":"api/molfeat.calc.html#molfeat.calc.skeys.ScaffoldKeyCalculator.abs_scaffold_format_charge","title":"<code>abs_scaffold_format_charge(mol)</code>","text":"<ol> <li>absolute value of the scaffold formal charge</li> </ol> Source code in <code>molfeat/calc/skeys.py</code> <pre><code>def abs_scaffold_format_charge(self, mol: rdchem.Mol):\n\"\"\"17. absolute value of the scaffold formal charge\"\"\"\n    charge = GetFormalCharge(mol)\n    return abs(charge)\n</code></pre>"},{"location":"api/molfeat.calc.html#molfeat.calc.skeys.ScaffoldKeyCalculator.compute_normalization","title":"<code>compute_normalization(features)</code>  <code>classmethod</code>","text":"<p>Normalize input features. The normalization parameters are computed by the scaffolds of 2.1M molecules from CHEMBL 29.</p> Source code in <code>molfeat/calc/skeys.py</code> <pre><code>@classmethod\ndef compute_normalization(cls, features: np.ndarray):\n\"\"\"Normalize input features. The normalization parameters are\n    computed by the scaffolds of 2.1M molecules from CHEMBL 29.\n    \"\"\"\n    return (features - cls.NORM_PARAMS[\"mean\"]) / cls.NORM_PARAMS[\"std\"]\n</code></pre>"},{"location":"api/molfeat.calc.html#molfeat.calc.skeys.ScaffoldKeyCalculator.n_atom_at_least_2_nei_more_than_2_conn","title":"<code>n_atom_at_least_2_nei_more_than_2_conn(mol)</code>","text":"<ol> <li>Number of atoms where at least 2 connected atoms have more than 2 connections</li> </ol> Source code in <code>molfeat/calc/skeys.py</code> <pre><code>def n_atom_at_least_2_nei_more_than_2_conn(self, mol: rdchem.Mol):\n\"\"\"16. Number of atoms where at least 2 connected atoms have more than 2 connections\"\"\"\n    n_atoms = 0\n    for atom in mol.GetAtoms():\n        tmp = [x for x in atom.GetNeighbors() if len(x.GetNeighbors()) &gt; 2]\n        n_atoms += len(tmp) &gt; 2\n    return n_atoms\n</code></pre>"},{"location":"api/molfeat.calc.html#molfeat.calc.skeys.ScaffoldKeyCalculator.n_atom_exocyclic","title":"<code>n_atom_exocyclic(mol)</code>","text":"<ol> <li>number of exocyclic atoms (connected by multiple bonds to a ring)</li> </ol> Source code in <code>molfeat/calc/skeys.py</code> <pre><code>def n_atom_exocyclic(self, mol: rdchem.Mol):\n\"\"\"5. number of exocyclic atoms (connected by multiple bonds to a ring)\"\"\"\n    sm = dm.from_smarts(\"[!r;!$(*-[r])&amp;$(*~[r])]\")\n    return len(mol.GetSubstructMatches(sm, uniquify=True))\n</code></pre>"},{"location":"api/molfeat.calc.html#molfeat.calc.skeys.ScaffoldKeyCalculator.n_atom_in_chain","title":"<code>n_atom_in_chain(mol)</code>","text":"<ol> <li>number atoms in chains (not counting double-connected exo-chain atoms)</li> </ol> Source code in <code>molfeat/calc/skeys.py</code> <pre><code>def n_atom_in_chain(self, mol: rdchem.Mol):\n\"\"\"4. number atoms in chains (not counting double-connected exo-chain atoms)\"\"\"\n    sm = dm.from_smarts(\"[!r;!$(*=[r])]\")\n    return len(mol.GetSubstructMatches(sm, uniquify=True))\n</code></pre>"},{"location":"api/molfeat.calc.html#molfeat.calc.skeys.ScaffoldKeyCalculator.n_atom_in_conjugated_ring","title":"<code>n_atom_in_conjugated_ring(mol)</code>","text":"<ol> <li>number of atoms in conjugated rings</li> </ol> Source code in <code>molfeat/calc/skeys.py</code> <pre><code>def n_atom_in_conjugated_ring(self, mol: rdchem.Mol):\n\"\"\"2. number of atoms in conjugated rings\"\"\"\n    ri = mol.GetRingInfo()\n    n = 0\n    for ring in ri.AtomRings():\n        if _is_ring_fully_conjugated(mol, ring):\n            n += len(ring)\n    return n\n</code></pre>"},{"location":"api/molfeat.calc.html#molfeat.calc.skeys.ScaffoldKeyCalculator.n_atom_in_rings","title":"<code>n_atom_in_rings(mol)</code>","text":"<ol> <li>number of ring atoms</li> </ol> Source code in <code>molfeat/calc/skeys.py</code> <pre><code>def n_atom_in_rings(self, mol: rdchem.Mol):\n\"\"\"1. number of ring atoms\"\"\"\n    sm = dm.from_smarts(\"[r]\")\n    return len(mol.GetSubstructMatches(sm, uniquify=True))\n</code></pre>"},{"location":"api/molfeat.calc.html#molfeat.calc.skeys.ScaffoldKeyCalculator.n_atom_spiro_atoms","title":"<code>n_atom_spiro_atoms(mol)</code>","text":"<ol> <li>number of spiro atoms</li> </ol> Source code in <code>molfeat/calc/skeys.py</code> <pre><code>def n_atom_spiro_atoms(self, mol: rdchem.Mol):\n\"\"\"13. number of spiro atoms\"\"\"\n    return Desc.CalcNumSpiroAtoms(mol)\n</code></pre>"},{"location":"api/molfeat.calc.html#molfeat.calc.skeys.ScaffoldKeyCalculator.n_atoms_not_in_conjugated_ring","title":"<code>n_atoms_not_in_conjugated_ring(mol)</code>","text":"<ol> <li>number of atoms not in conjugated rings (i.e. atoms in aliphatic rings and non-ring atoms)</li> </ol> Source code in <code>molfeat/calc/skeys.py</code> <pre><code>def n_atoms_not_in_conjugated_ring(self, mol: rdchem.Mol):\n\"\"\"\n    3. number of atoms not in conjugated rings\n    (i.e. atoms in aliphatic rings and non-ring atoms)\n    \"\"\"\n    # EN: replace conjugation by aromatic\n    ri = mol.GetRingInfo()\n    n = 0\n    for ring in ri.AtomRings():\n        if not _is_ring_fully_conjugated(mol, ring):\n            n += len(ring)\n    return n\n</code></pre>"},{"location":"api/molfeat.calc.html#molfeat.calc.skeys.ScaffoldKeyCalculator.n_bonds","title":"<code>n_bonds(mol)</code>","text":"<ol> <li>number of bonds</li> </ol> Source code in <code>molfeat/calc/skeys.py</code> <pre><code>def n_bonds(self, mol: rdchem.Mol):\n\"\"\"18. number of bonds\"\"\"\n    return mol.GetNumBonds()\n</code></pre>"},{"location":"api/molfeat.calc.html#molfeat.calc.skeys.ScaffoldKeyCalculator.n_bonds_2_heteroatoms","title":"<code>n_bonds_2_heteroatoms(mol)</code>","text":"<ol> <li>number of bonds connecting 2 heteroatoms</li> </ol> Source code in <code>molfeat/calc/skeys.py</code> <pre><code>def n_bonds_2_heteroatoms(self, mol: rdchem.Mol):\n\"\"\"20. number of bonds connecting 2 heteroatoms\"\"\"\n    sm = dm.from_smarts(\"[!#1&amp;!#6]~[!#1&amp;!#6]\")\n    return len(mol.GetSubstructMatches(sm, uniquify=True))\n</code></pre>"},{"location":"api/molfeat.calc.html#molfeat.calc.skeys.ScaffoldKeyCalculator.n_bonds_at_least_3_conn","title":"<code>n_bonds_at_least_3_conn(mol)</code>","text":"<ol> <li>number of bonds with at least 3 connections on both its atoms</li> </ol> Source code in <code>molfeat/calc/skeys.py</code> <pre><code>def n_bonds_at_least_3_conn(self, mol: rdchem.Mol):\n\"\"\"22. number of bonds with at least 3 connections on both its atoms\"\"\"\n    sm = dm.from_smarts(\"[$([!#1](~[!#1])(~[!#1])~[!#1])][$([!#1](~[!#1])(~[!#1])~[!#1])]\")\n    return len(mol.GetSubstructMatches(sm, uniquify=True))\n</code></pre>"},{"location":"api/molfeat.calc.html#molfeat.calc.skeys.ScaffoldKeyCalculator.n_bonds_atoms_with_at_least_one_nei_with_2_conn","title":"<code>n_bonds_atoms_with_at_least_one_nei_with_2_conn(mol)</code>","text":"<ol> <li>number of bonds where both atoms have at least one neighbor (not considering the bond atoms) with more than 2 connections</li> </ol> Source code in <code>molfeat/calc/skeys.py</code> <pre><code>def n_bonds_atoms_with_at_least_one_nei_with_2_conn(self, mol: rdchem.Mol):\n\"\"\"\n    27. number of bonds where both atoms have at least one neighbor\n    (not considering the bond atoms) with more than 2 connections\n    \"\"\"\n    result = 0\n    huge_conn = list(\n        itertools.chain(*mol.GetSubstructMatches(dm.from_smarts(\"[*;!D0;!D1;!D2]\"), uniquify=1))\n    )\n    for bond in mol.GetBonds():\n        a_start, a_end = bond.GetBeginAtom(), bond.GetEndAtom()\n        # we need to exclud the bond atom themselves\n        allowed_conn_table = [\n            x for x in huge_conn if x not in [a_start.GetIdx(), a_end.GetIdx()]\n        ]\n        if any([x.GetIdx() in allowed_conn_table for x in a_start.GetNeighbors()]) and any(\n            [y.GetIdx() in allowed_conn_table for y in a_end.GetNeighbors()]\n        ):\n            result += 1\n    return result\n</code></pre>"},{"location":"api/molfeat.calc.html#molfeat.calc.skeys.ScaffoldKeyCalculator.n_carbon_atleast_2_heteroatoms","title":"<code>n_carbon_atleast_2_heteroatoms(mol)</code>","text":"<ol> <li>number of carbon atoms connected to at least 2 heteroatoms</li> </ol> Source code in <code>molfeat/calc/skeys.py</code> <pre><code>def n_carbon_atleast_2_heteroatoms(self, mol: rdchem.Mol):\n\"\"\"15. number of carbon atoms connected to at least 2 heteroatoms\"\"\"\n    n_atoms = 0\n    for atom in mol.GetAtoms():\n        tmp = [x for x in atom.GetNeighbors() if x.GetAtomicNum() not in [1, 6]]\n        n_atoms += len(tmp) &gt;= 2\n    return n_atoms\n</code></pre>"},{"location":"api/molfeat.calc.html#molfeat.calc.skeys.ScaffoldKeyCalculator.n_carbon_het_carbon_het_bonds","title":"<code>n_carbon_het_carbon_het_bonds(mol)</code>","text":"<ol> <li>number of bonds connecting 2 heteroatoms through 2 carbons</li> </ol> Source code in <code>molfeat/calc/skeys.py</code> <pre><code>def n_carbon_het_carbon_het_bonds(self, mol: rdchem.Mol):\n\"\"\"21. number of bonds connecting 2 heteroatoms through 2 carbons\"\"\"\n    sm = dm.from_smarts(\"[!#1&amp;!#6]~[#6]~[#6]~[!#1&amp;!#6]\")\n    return len(mol.GetSubstructMatches(sm, uniquify=True))\n</code></pre>"},{"location":"api/molfeat.calc.html#molfeat.calc.skeys.ScaffoldKeyCalculator.n_exocyclic_single_bonds_carbon","title":"<code>n_exocyclic_single_bonds_carbon(mol)</code>","text":"<ol> <li>number of exocyclic single bonds where a ring atom is carbon</li> </ol> Source code in <code>molfeat/calc/skeys.py</code> <pre><code>def n_exocyclic_single_bonds_carbon(self, mol: rdchem.Mol):\n\"\"\"23. number of exocyclic single bonds where a ring atom is carbon\"\"\"\n    sm = dm.from_smarts(\"[!R;!#1]-[#6;R]\")\n    return len(mol.GetSubstructMatches(sm, uniquify=True))\n</code></pre>"},{"location":"api/molfeat.calc.html#molfeat.calc.skeys.ScaffoldKeyCalculator.n_exocyclic_single_bonds_nitrogen","title":"<code>n_exocyclic_single_bonds_nitrogen(mol)</code>","text":"<ol> <li>number of exocyclic single bonds where a ring atom is nitrogen</li> </ol> Source code in <code>molfeat/calc/skeys.py</code> <pre><code>def n_exocyclic_single_bonds_nitrogen(self, mol: rdchem.Mol):\n\"\"\"24. number of exocyclic single bonds where a ring atom is nitrogen\"\"\"\n    sm = dm.from_smarts(\"[!R;!#1]-[#7;R]\")\n    return len(mol.GetSubstructMatches(sm, uniquify=True))\n</code></pre>"},{"location":"api/molfeat.calc.html#molfeat.calc.skeys.ScaffoldKeyCalculator.n_heteroatom_more_than_2_conn","title":"<code>n_heteroatom_more_than_2_conn(mol)</code>","text":"<ol> <li>number of heteroatoms with more than 2 connections</li> </ol> Source code in <code>molfeat/calc/skeys.py</code> <pre><code>def n_heteroatom_more_than_2_conn(self, mol: rdchem.Mol):\n\"\"\"14. number of heteroatoms with more than 2 connections\"\"\"\n    sm = dm.from_smarts(\"[!#1;!#6;!D1!D0;!D2]\")\n    return len(mol.GetSubstructMatches(sm, uniquify=True))\n</code></pre>"},{"location":"api/molfeat.calc.html#molfeat.calc.skeys.ScaffoldKeyCalculator.n_heteroatoms","title":"<code>n_heteroatoms(mol)</code>","text":"<ol> <li>number of heteroatoms</li> </ol> Source code in <code>molfeat/calc/skeys.py</code> <pre><code>def n_heteroatoms(self, mol: rdchem.Mol):\n\"\"\"11. number of heteroatoms\"\"\"\n\n    sm = dm.from_smarts(\"[!#1&amp;!#6]\")\n    return len(mol.GetSubstructMatches(sm, uniquify=True))\n</code></pre>"},{"location":"api/molfeat.calc.html#molfeat.calc.skeys.ScaffoldKeyCalculator.n_heteroatoms_in_ring","title":"<code>n_heteroatoms_in_ring(mol)</code>","text":"<ol> <li>number of heteroatoms in rings</li> </ol> Source code in <code>molfeat/calc/skeys.py</code> <pre><code>def n_heteroatoms_in_ring(self, mol: rdchem.Mol):\n\"\"\"12. number of heteroatoms in rings\"\"\"\n    sm = dm.from_smarts(\"[!#1&amp;!#6&amp;r]\")\n    return len(mol.GetSubstructMatches(sm, uniquify=True))\n</code></pre>"},{"location":"api/molfeat.calc.html#molfeat.calc.skeys.ScaffoldKeyCalculator.n_multiple_non_conj_ring_bonds","title":"<code>n_multiple_non_conj_ring_bonds(mol)</code>","text":"<ol> <li>number of multiple, nonconjugated ring bonds</li> </ol> Source code in <code>molfeat/calc/skeys.py</code> <pre><code>def n_multiple_non_conj_ring_bonds(self, mol: rdchem.Mol):\n\"\"\"19. number of multiple, nonconjugated ring bonds\"\"\"\n    extracted_rings = []\n    nr_multiple_bonds_infcr = 0  # infcr: in not fully conjugated ring\n    rings = Chem.GetSymmSSSR(mol)\n    for i in range(len(rings)):\n        extracted_rings.append(list(rings[i]))\n    for ring in extracted_rings:\n        if not _is_ring_fully_conjugated(mol, ring):\n            nr_multiple_bonds_infcr += _n_multiple_bond_in_ring(mol, ring)\n    return nr_multiple_bonds_infcr\n</code></pre>"},{"location":"api/molfeat.calc.html#molfeat.calc.skeys.ScaffoldKeyCalculator.n_nitrogen","title":"<code>n_nitrogen(mol)</code>","text":"<ol> <li>number of nitrogen</li> </ol> Source code in <code>molfeat/calc/skeys.py</code> <pre><code>def n_nitrogen(self, mol: rdchem.Mol):\n\"\"\"6. number of nitrogen\"\"\"\n    sm = dm.from_smarts(\"[#7]\")\n    return len(mol.GetSubstructMatches(sm, uniquify=True))\n</code></pre>"},{"location":"api/molfeat.calc.html#molfeat.calc.skeys.ScaffoldKeyCalculator.n_nitrogen_in_ring","title":"<code>n_nitrogen_in_ring(mol)</code>","text":"<ol> <li>number of nitrogen in rings</li> </ol> Source code in <code>molfeat/calc/skeys.py</code> <pre><code>def n_nitrogen_in_ring(self, mol: rdchem.Mol):\n\"\"\"7. number of nitrogen in rings\"\"\"\n    sm = dm.from_smarts(\"[#7;r]\")\n    return len(mol.GetSubstructMatches(sm, uniquify=True))\n</code></pre>"},{"location":"api/molfeat.calc.html#molfeat.calc.skeys.ScaffoldKeyCalculator.n_non_ring_bonds_2_conj_rings","title":"<code>n_non_ring_bonds_2_conj_rings(mol)</code>","text":"<ol> <li>number of non-ring bonds connecting 2 nonconjugated rings</li> </ol> Source code in <code>molfeat/calc/skeys.py</code> <pre><code>def n_non_ring_bonds_2_conj_rings(self, mol: rdchem.Mol):\n\"\"\"25. number of non-ring bonds connecting 2 nonconjugated rings\"\"\"\n    # EN: this is interpretated literally as bonds and not path\n    ring_atom_conj_state = _ring_atom_state(mol)\n    sm = dm.from_smarts(\"[R:1]!@[R:2]\")\n    bond_list = mol.GetSubstructMatches(sm, uniquify=True)\n    result = 0\n    for a_start, a_end in bond_list:\n        s_state = ring_atom_conj_state.get(a_start)\n        e_state = ring_atom_conj_state.get(a_end)\n        if False in s_state and False in e_state:\n            result += 1\n    return result\n</code></pre>"},{"location":"api/molfeat.calc.html#molfeat.calc.skeys.ScaffoldKeyCalculator.n_non_ring_bonds_conj_nonconj_rings","title":"<code>n_non_ring_bonds_conj_nonconj_rings(mol)</code>","text":"<ol> <li>number of non-ring bonds connecting 2 rings, one of them conjugated and one non-conjugated</li> </ol> Source code in <code>molfeat/calc/skeys.py</code> <pre><code>def n_non_ring_bonds_conj_nonconj_rings(self, mol: rdchem.Mol):\n\"\"\"\n    26. number of non-ring bonds connecting 2 rings,\n    one of them conjugated and one non-conjugated\n    \"\"\"\n    # EN: this is interpretated literally as bonds and not path\n\n    ring_atom_conj_state = _ring_atom_state(mol)\n    sm = dm.from_smarts(\"[R:1]!@[R:2]\")\n    bond_list = mol.GetSubstructMatches(sm, uniquify=True)\n    result = 0\n    for a_start, a_end in bond_list:\n        s_state = ring_atom_conj_state.get(a_start)\n        e_state = ring_atom_conj_state.get(a_end)\n        if (True in s_state and False in e_state) or (False in s_state and True in e_state):\n            result += 1\n    return result\n</code></pre>"},{"location":"api/molfeat.calc.html#molfeat.calc.skeys.ScaffoldKeyCalculator.n_oxygen","title":"<code>n_oxygen(mol)</code>","text":"<ol> <li>number of oxygen</li> </ol> Source code in <code>molfeat/calc/skeys.py</code> <pre><code>def n_oxygen(self, mol: rdchem.Mol):\n\"\"\"8. number of oxygen\"\"\"\n    sm = dm.from_smarts(\"[#8]\")\n    return len(mol.GetSubstructMatches(sm, uniquify=True))\n</code></pre>"},{"location":"api/molfeat.calc.html#molfeat.calc.skeys.ScaffoldKeyCalculator.n_oxygen_in_ring","title":"<code>n_oxygen_in_ring(mol)</code>","text":"<ol> <li>number of oxygen in rings</li> </ol> Source code in <code>molfeat/calc/skeys.py</code> <pre><code>def n_oxygen_in_ring(self, mol: rdchem.Mol):\n\"\"\"9. number of oxygen in rings\"\"\"\n    sm = dm.from_smarts(\"[#8]\")\n    return len(mol.GetSubstructMatches(sm, uniquify=True))\n</code></pre>"},{"location":"api/molfeat.calc.html#molfeat.calc.skeys.ScaffoldKeyCalculator.n_ring_system","title":"<code>n_ring_system(mol)</code>","text":"<ol> <li>number of ring systems</li> </ol> Source code in <code>molfeat/calc/skeys.py</code> <pre><code>def n_ring_system(self, mol: rdchem.Mol):\n\"\"\"36. number of ring systems\"\"\"\n    simple_rings, ring_system, _ = _get_ring_system(mol)\n    return len(ring_system)\n</code></pre>"},{"location":"api/molfeat.calc.html#molfeat.calc.skeys.ScaffoldKeyCalculator.n_ring_system_with_2_conj_simple_ring","title":"<code>n_ring_system_with_2_conj_simple_ring(mol)</code>","text":"<ol> <li>number of rings systems with 2 conjugated simple rings</li> </ol> Source code in <code>molfeat/calc/skeys.py</code> <pre><code>def n_ring_system_with_2_conj_simple_ring(self, mol: rdchem.Mol):\n\"\"\"38. number of rings systems with 2 conjugated simple rings\"\"\"\n    simple_rings, _, ring_map = _get_ring_system(mol)\n    conj_rings_map = dict(\n        (i, _is_ring_fully_conjugated(mol, x)) for i, x in enumerate(simple_rings)\n    )\n    result = 0\n    for ring_set in ring_map:\n        n_conj = sum(conj_rings_map[rnum] for rnum in ring_set)\n        result += n_conj == 2\n    return result\n</code></pre>"},{"location":"api/molfeat.calc.html#molfeat.calc.skeys.ScaffoldKeyCalculator.n_ring_system_with_2_non_conj_simple_ring","title":"<code>n_ring_system_with_2_non_conj_simple_ring(mol)</code>","text":"<ol> <li>number of rings systems with 2 non-conjugated simple rings</li> </ol> Source code in <code>molfeat/calc/skeys.py</code> <pre><code>def n_ring_system_with_2_non_conj_simple_ring(self, mol: rdchem.Mol):\n\"\"\"37. number of rings systems with 2 non-conjugated simple rings\"\"\"\n    simple_rings, _, ring_map = _get_ring_system(mol)\n    conj_rings_map = dict(\n        (i, _is_ring_fully_conjugated(mol, x)) for i, x in enumerate(simple_rings)\n    )\n    result = 0\n    for ring_set in ring_map:\n        n_not_conj = sum(not conj_rings_map[rnum] for rnum in ring_set)\n        result += n_not_conj == 2\n    return result\n</code></pre>"},{"location":"api/molfeat.calc.html#molfeat.calc.skeys.ScaffoldKeyCalculator.n_ring_system_with_3_conj_simple_ring","title":"<code>n_ring_system_with_3_conj_simple_ring(mol)</code>","text":"<ol> <li>number of rings systems with 3 conjugated simple rings</li> </ol> Source code in <code>molfeat/calc/skeys.py</code> <pre><code>def n_ring_system_with_3_conj_simple_ring(self, mol: rdchem.Mol):\n\"\"\"40. number of rings systems with 3 conjugated simple rings\"\"\"\n    simple_rings, _, ring_map = _get_ring_system(mol)\n    conj_rings_map = dict(\n        (i, _is_ring_fully_conjugated(mol, x)) for i, x in enumerate(simple_rings)\n    )\n    result = 0\n    for ring_set in ring_map:\n        n_conj = sum(conj_rings_map[rnum] for rnum in ring_set)\n        result += n_conj == 3\n    return result\n</code></pre>"},{"location":"api/molfeat.calc.html#molfeat.calc.skeys.ScaffoldKeyCalculator.n_ring_system_with_3_non_conj_simple_ring","title":"<code>n_ring_system_with_3_non_conj_simple_ring(mol)</code>","text":"<ol> <li>number of rings systems with 3 non-conjugated simple rings</li> </ol> Source code in <code>molfeat/calc/skeys.py</code> <pre><code>def n_ring_system_with_3_non_conj_simple_ring(self, mol: rdchem.Mol):\n\"\"\"41. number of rings systems with 3 non-conjugated simple rings\"\"\"\n    simple_rings, _, ring_map = _get_ring_system(mol)\n    conj_rings_map = dict(\n        (i, _is_ring_fully_conjugated(mol, x)) for i, x in enumerate(simple_rings)\n    )\n    result = 0\n    for ring_set in ring_map:\n        n_not_conj = sum(not conj_rings_map[rnum] for rnum in ring_set)\n        result += n_not_conj == 3\n    return result\n</code></pre>"},{"location":"api/molfeat.calc.html#molfeat.calc.skeys.ScaffoldKeyCalculator.n_ring_system_with_conj_non_conj_simple_ring","title":"<code>n_ring_system_with_conj_non_conj_simple_ring(mol)</code>","text":"<p>39 number of ring system containing 2 simple rings, one conjugated and one nonconjugated</p> Source code in <code>molfeat/calc/skeys.py</code> <pre><code>def n_ring_system_with_conj_non_conj_simple_ring(self, mol: rdchem.Mol):\n\"\"\"39 number of ring system containing 2 simple rings, one conjugated and one nonconjugated\"\"\"\n    simple_rings, _, ring_map = _get_ring_system(mol)\n    conj_rings_map = dict(\n        (i, _is_ring_fully_conjugated(mol, x)) for i, x in enumerate(simple_rings)\n    )\n    result = 0\n    for ring_set in ring_map:\n        if len(ring_set) == 2:\n            n_conj = sum(conj_rings_map[rnum] for rnum in ring_set)\n            result += n_conj == 1\n    return result\n</code></pre>"},{"location":"api/molfeat.calc.html#molfeat.calc.skeys.ScaffoldKeyCalculator.n_ring_system_with_greater_one_conj_nonconj_simple_ring","title":"<code>n_ring_system_with_greater_one_conj_nonconj_simple_ring(mol)</code>","text":"<ol> <li>number of ring system containing 3 simple rings, at least one conjugated and one nonconjugated</li> </ol> Source code in <code>molfeat/calc/skeys.py</code> <pre><code>def n_ring_system_with_greater_one_conj_nonconj_simple_ring(self, mol: rdchem.Mol):\n\"\"\"42. number of ring system containing 3 simple rings, at least one conjugated and one nonconjugated\"\"\"\n    simple_rings, _, ring_map = _get_ring_system(mol)\n    conj_rings_map = dict(\n        (i, _is_ring_fully_conjugated(mol, x)) for i, x in enumerate(simple_rings)\n    )\n    result = 0\n    for ring_set in ring_map:\n        if len(ring_set) == 3:\n            n_conj = sum(conj_rings_map[rnum] for rnum in ring_set)\n            result += n_conj in [1, 2]\n    return result\n</code></pre>"},{"location":"api/molfeat.calc.html#molfeat.calc.skeys.ScaffoldKeyCalculator.n_simple_non_conj_5_atoms_rings","title":"<code>n_simple_non_conj_5_atoms_rings(mol)</code>","text":"<ol> <li>number of simple non-conjugated rings with 5 atoms</li> </ol> Source code in <code>molfeat/calc/skeys.py</code> <pre><code>def n_simple_non_conj_5_atoms_rings(self, mol: rdchem.Mol):\n\"\"\"34. number of simple non-conjugated rings with 5 atoms\"\"\"\n    ri = mol.GetRingInfo()\n    n = 0\n    for ring in ri.AtomRings():\n        if not _is_ring_fully_conjugated(mol, ring) and len(ring) == 5:\n            n += 1\n    return n\n</code></pre>"},{"location":"api/molfeat.calc.html#molfeat.calc.skeys.ScaffoldKeyCalculator.n_simple_non_conj_6_atoms_rings","title":"<code>n_simple_non_conj_6_atoms_rings(mol)</code>","text":"<ol> <li>number of simple non-conjugated rings with 6 atoms</li> </ol> Source code in <code>molfeat/calc/skeys.py</code> <pre><code>def n_simple_non_conj_6_atoms_rings(self, mol: rdchem.Mol):\n\"\"\"35. number of simple non-conjugated rings with 6 atoms\"\"\"\n    ri = mol.GetRingInfo()\n    n = 0\n    for ring in ri.AtomRings():\n        if not _is_ring_fully_conjugated(mol, ring) and len(ring) == 6:\n            n += 1\n    return n\n</code></pre>"},{"location":"api/molfeat.calc.html#molfeat.calc.skeys.ScaffoldKeyCalculator.n_simple_rings","title":"<code>n_simple_rings(mol)</code>","text":"<ol> <li>number of simple rings</li> </ol> Source code in <code>molfeat/calc/skeys.py</code> <pre><code>def n_simple_rings(self, mol: rdchem.Mol):\n\"\"\"28. number of simple rings\"\"\"\n    ri = mol.GetRingInfo()\n    return ri.NumRings()\n</code></pre>"},{"location":"api/molfeat.calc.html#molfeat.calc.skeys.ScaffoldKeyCalculator.n_simple_rings_1_heteroatoms","title":"<code>n_simple_rings_1_heteroatoms(mol)</code>","text":"<ol> <li>number of simple rings with 1 heteroatom</li> </ol> Source code in <code>molfeat/calc/skeys.py</code> <pre><code>def n_simple_rings_1_heteroatoms(self, mol: rdchem.Mol):\n\"\"\"31. number of simple rings with 1 heteroatom\"\"\"\n    ri = mol.GetRingInfo()\n    n_heteros = _count_heteroatom_per_ring(mol, ri.AtomRings())\n    return sum(1 for x in n_heteros if x == 1)\n</code></pre>"},{"location":"api/molfeat.calc.html#molfeat.calc.skeys.ScaffoldKeyCalculator.n_simple_rings_2_heteroatoms","title":"<code>n_simple_rings_2_heteroatoms(mol)</code>","text":"<ol> <li>number of simple rings with 2 heteroatom</li> </ol> Source code in <code>molfeat/calc/skeys.py</code> <pre><code>def n_simple_rings_2_heteroatoms(self, mol: rdchem.Mol):\n\"\"\"32. number of simple rings with 2 heteroatom\"\"\"\n    ri = mol.GetRingInfo()\n    n_heteros = _count_heteroatom_per_ring(mol, ri.AtomRings())\n    return sum(1 for x in n_heteros if x == 2)\n</code></pre>"},{"location":"api/molfeat.calc.html#molfeat.calc.skeys.ScaffoldKeyCalculator.n_simple_rings_at_least_3_heteroatoms","title":"<code>n_simple_rings_at_least_3_heteroatoms(mol)</code>","text":"<ol> <li>number of simple rings with 3 or more heteroatoms</li> </ol> Source code in <code>molfeat/calc/skeys.py</code> <pre><code>def n_simple_rings_at_least_3_heteroatoms(self, mol: rdchem.Mol):\n\"\"\"33. number of simple rings with 3 or more heteroatoms\"\"\"\n    ri = mol.GetRingInfo()\n    n_heteros = _count_heteroatom_per_ring(mol, ri.AtomRings())\n    return sum(1 for x in n_heteros if x &gt;= 3)\n</code></pre>"},{"location":"api/molfeat.calc.html#molfeat.calc.skeys.ScaffoldKeyCalculator.n_simple_rings_no_heteroatoms","title":"<code>n_simple_rings_no_heteroatoms(mol)</code>","text":"<ol> <li>number of simple rings with no heteroatoms</li> </ol> Source code in <code>molfeat/calc/skeys.py</code> <pre><code>def n_simple_rings_no_heteroatoms(self, mol: rdchem.Mol):\n\"\"\"30. number of simple rings with no heteroatoms\"\"\"\n    ri = mol.GetRingInfo()\n    n_heteros = _count_heteroatom_per_ring(mol, ri.AtomRings())\n    return sum(1 for x in n_heteros if x == 0)\n</code></pre>"},{"location":"api/molfeat.calc.html#molfeat.calc.skeys.ScaffoldKeyCalculator.n_sulfur","title":"<code>n_sulfur(mol)</code>","text":"<ol> <li>number of sulfur atoms</li> </ol> Source code in <code>molfeat/calc/skeys.py</code> <pre><code>def n_sulfur(self, mol: rdchem.Mol):\n\"\"\"10. number of sulfur atoms\"\"\"\n    sm = dm.from_smarts(\"[#16]\")\n    return len(mol.GetSubstructMatches(sm, uniquify=True))\n</code></pre>"},{"location":"api/molfeat.calc.html#molfeat.calc.skeys.ScaffoldKeyCalculator.size_largest_ring","title":"<code>size_largest_ring(mol)</code>","text":"<ol> <li>Size of the largest ring</li> </ol> Source code in <code>molfeat/calc/skeys.py</code> <pre><code>def size_largest_ring(self, mol: rdchem.Mol):\n\"\"\"29. Size of the largest ring\"\"\"\n    ri = mol.GetRingInfo()\n    max_ring_size = max((len(r) for r in ri.AtomRings()), default=0)\n    return max_ring_size\n</code></pre>"},{"location":"api/molfeat.calc.html#molfeat.calc.skeys.skdistance","title":"<code>skdistance(sk1, sk2, weights=None, cdist=False)</code>","text":"<p>Compute the scaffold distance between two scaffold keys as described in https://pubs.acs.org/doi/abs/10.1021/ci5001983. The input features are expected to be normalized beforehand (see paper)</p> <p>Parameters:</p> Name Type Description Default <code>sk1</code> <code>np.ndarray</code> <p>scaffold key 1</p> required <code>sk2</code> <code>np.ndarray</code> <p>scaffold key 2</p> required <code>weights</code> <code>Optional[np.ndarray]</code> <p>how to weight each of the features. By default rank ordering is used.</p> <code>None</code> <code>cdist</code> <code>bool</code> <p>whether to compute the features on a batched of inputs (expected 2D)</p> <code>False</code> <p>Returns:</p> Name Type Description <code>dist</code> <code>float</code> <p>distance between two scaffold keys</p> Source code in <code>molfeat/calc/skeys.py</code> <pre><code>def skdistance(\n    sk1: np.ndarray,\n    sk2: np.ndarray,\n    weights: Optional[np.ndarray] = None,\n    cdist: bool = False,\n):\n\"\"\"Compute the scaffold distance between two scaffold keys\n    as described in https://pubs.acs.org/doi/abs/10.1021/ci5001983.\n    The input features are expected to be normalized beforehand (see paper)\n\n    Args:\n        sk1: scaffold key 1\n        sk2: scaffold key 2\n        weights: how to weight each of the features. By default rank ordering is used.\n        cdist: whether to compute the features on a batched of inputs (expected 2D)\n\n    Returns:\n        dist (float): distance between two scaffold keys\n    \"\"\"\n    if weights is None:\n        weights = 1 / (np.arange(sk1.shape[-1]) + 1)\n\n    if cdist:\n        sk1 = np.atleast_2d(sk1)\n        sk2 = np.atleast_2d(sk2)\n        val = np.abs(sk1[:, None] - sk2[:]) ** 1.5\n        dist = np.sum(val * weights, axis=-1)\n    else:\n        if any((sk.ndim &gt; 1 and sk.shape[0] != 1) for sk in [sk1, sk2]):\n            raise ValueError(\"`cdist` mode was not detected, you need to provide single vectors\")\n        val = np.abs(sk1 - sk2) ** 1.5\n        dist = np.sum(val * weights)\n    return dist\n</code></pre>"},{"location":"api/molfeat.calc.html#shape","title":"<code>Shape</code>","text":""},{"location":"api/molfeat.calc.html#molfeat.calc.shape.ElectroShapeDescriptors","title":"<code>ElectroShapeDescriptors</code>","text":"<p>         Bases: <code>SerializableCalculator</code></p> <p>Compute Electroshape descriptors as described by</p> <p>Armstrong et al. ElectroShape: fast molecular similarity calculations incorporating shape, chirality and electrostatics. J Comput Aided Mol Des 24, 789-801 (2010). http://dx.doi.org/doi:10.1007/s10822-010-9374-0</p> Source code in <code>molfeat/calc/shape.py</code> <pre><code>class ElectroShapeDescriptors(SerializableCalculator):\n\"\"\"Compute Electroshape descriptors as described by\n\n    Armstrong et al. ElectroShape: fast molecular similarity calculations incorporating shape, chirality and electrostatics.\n    J Comput Aided Mol Des 24, 789-801 (2010). http://dx.doi.org/doi:10.1007/s10822-010-9374-0\n    \"\"\"\n\n    SUPPORTED_CHARGE_MODELS = [\"gasteiger\", \"tripos\", \"mmff94\", \"formal\"]\n\n    def __init__(\n        self,\n        charge_model: str = \"gasteiger\",\n        replace_nan: bool = False,\n        electron_scaling: float = 25.0,\n        **kwargs,\n    ):\n\"\"\"Constructor for ElectroShape descriptor\n\n        Args:\n            charge_model: charge model to use. One of ('gasteiger', 'tripos', 'mmff94', 'formal'). Defaults to \"gasteiger\".\n                Note that formal charges will be computed on the fly if not provided in the input molecules.\n                The `tripos` charge models comes from TRIPOS force field and are often parsed from mol2 files.\n            replace_nan: whether to replace NaN values. Defaults False\n            electron_scaling: scaling factor to convert electron charges to Angstroms. Defaults to 25.0.\n        \"\"\"\n\n        self.charge_model = charge_model\n        self.replace_nan = replace_nan\n        self.electron_scaling = electron_scaling\n        self._columns = None\n\n    @property\n    def columns(self):\n\"\"\"\n        Get the name of all the descriptors of this calculator\n        \"\"\"\n        if self._columns is None:\n            self._columns = []\n            for i in range(1, 6):\n                self._columns.extend([f\"dist-{i}-mean\", f\"dist-{i}-std\", f\"dist-{i}-crb\"])\n\n        return self._columns\n\n    def __getstate__(self):\n        state = {}\n        state[\"charge_model\"] = self.charge_model\n        state[\"replace_nan\"] = self.replace_nan\n        state[\"electron_scaling\"] = self.electron_scaling\n        state[\"_columns\"] = self._columns\n        return state\n\n    def __len__(self):\n\"\"\"Return the length of the calculator\"\"\"\n        return len(self.columns)\n\n    @staticmethod\n    def compute_charge(mol: Union[dm.Mol, str], charge_model: str = None):\n\"\"\"\n        Get the molecular charge of the molecule.\n\n        Args:\n            charge_model: charge model to use. One of ('gasteiger', 'tripos', 'mmff94', 'formal'). Defaults to \"gasteiger\".\n        \"\"\"\n\n        if charge_model not in ElectroShapeDescriptors.SUPPORTED_CHARGE_MODELS:\n            raise ValueError(\n                f\"Unknown charge model {charge_model}. You should provide one of {ElectroShapeDescriptors.SUPPORTED_CHARGE_MODELS}\"\n            )\n        mol = dm.to_mol(mol)\n        atom_charge = []\n        atom_list = list(mol.GetAtoms())\n\n        # force compute the partial charges if not provided\n        if charge_model == \"gasteiger\" and not atom_list[0].HasProp(\"_GasteigerCharge\"):\n            rdPartialCharges.ComputeGasteigerCharges(mol)\n        elif charge_model == \"mmff94\" and not atom_list[0].HasProp(\"_MMFF94Charge\"):\n            ff_infos = rdForceFieldHelpers.MMFFGetMoleculeProperties(mol)\n            for i, atom in enumerate(atom_list):\n                atom.SetDoubleProp(\"_MMFF94Charge\", ff_infos.GetMMFFPartialCharge(i))\n\n        for atom in mol.GetAtoms():\n            if charge_model == \"formal\":\n                atom_charge.append(atom.GetFormalCharge())\n            elif charge_model == \"gasteiger\":\n                atom_charge.append(atom.GetDoubleProp(\"_GasteigerCharge\"))\n            elif charge_model == \"mmff94\":\n                atom_charge.append(atom.GetDoubleProp(\"_MMFF94Charge\"))\n            elif charge_model == \"tripos\":\n                atom_charge.append(atom.GetDoubleProp(\"_TriposPartialCharge\"))\n        return np.asarray(atom_charge)\n\n    @requires_conformer\n    def __call__(self, mol: Union[dm.Mol, str], conformer_id: Optional[int] = -1):\nr\"\"\"\n        Get rdkit 3D descriptors for a molecule\n\n        Args:\n            mol: the molecule of interest\n            conformer_id (int, optional): Optional conformer id. Defaults to -1.\n\n        Returns:\n            shape_descriptor (np.ndarray): computed shape descriptor\n        \"\"\"\n\n        mol = dm.to_mol(mol)\n        coords = mol.GetConformer(conformer_id).GetPositions()\n        charge = self.compute_charge(mol, self.charge_model)\n        if self.replace_nan:\n            charge = np.nan_to_num(charge)\n\n        desc_4d = np.column_stack((coords, charge * self.electron_scaling))\n\n        c1 = desc_4d.mean(axis=0)\n        distances_c1 = norm(desc_4d - c1, axis=1)\n\n        c2 = desc_4d[distances_c1.argmax()]  # atom position furthest from c1\n        distances_c2 = norm(desc_4d - c2, axis=1)\n\n        c3 = desc_4d[distances_c2.argmax()]  # atom position furthest from c2\n        distances_c3 = norm(desc_4d - c3, axis=1)\n\n        vector_a = c2 - c1\n        vector_b = c3 - c1\n        vector_as = vector_a[:3]  # spatial parts of these vectors\n        vector_bs = vector_b[:3]  # spatial parts of these vectors\n        cross_ab = np.cross(vector_as, vector_bs)\n        vector_c = (norm(vector_a) / (2 * norm(cross_ab))) * cross_ab\n        vector_c1s = c1[:3]\n\n        max_charge = np.array(np.amax(charge) * self.electron_scaling)\n        min_charge = np.array(np.amin(charge) * self.electron_scaling)\n\n        c4 = np.append(vector_c1s + vector_c, max_charge)\n        c5 = np.append(vector_c1s + vector_c, min_charge)\n\n        distances_c4 = norm(desc_4d - c4, axis=1)\n        distances_c5 = norm(desc_4d - c5, axis=1)\n\n        distances_list = [\n            distances_c1,\n            distances_c2,\n            distances_c3,\n            distances_c4,\n            distances_c5,\n        ]\n\n        shape_descriptor = np.zeros(15)\n\n        i = 0\n        for distances in distances_list:\n            mean = np.mean(distances)\n            shape_descriptor[0 + i] = mean\n            shape_descriptor[1 + i] = np.std(distances)\n            shape_descriptor[2 + i] = cbrt(np.sum(((distances - mean) ** 3) / distances.size))\n            i += 3\n        if self.replace_nan:\n            return np.nan_to_num(shape_descriptor)\n        return shape_descriptor\n</code></pre>"},{"location":"api/molfeat.calc.html#molfeat.calc.shape.ElectroShapeDescriptors.SUPPORTED_CHARGE_MODELS","title":"<code>SUPPORTED_CHARGE_MODELS = ['gasteiger', 'tripos', 'mmff94', 'formal']</code>  <code>class-attribute</code>","text":""},{"location":"api/molfeat.calc.html#molfeat.calc.shape.ElectroShapeDescriptors.charge_model","title":"<code>charge_model = charge_model</code>  <code>instance-attribute</code>","text":""},{"location":"api/molfeat.calc.html#molfeat.calc.shape.ElectroShapeDescriptors.columns","title":"<code>columns</code>  <code>property</code>","text":"<p>Get the name of all the descriptors of this calculator</p>"},{"location":"api/molfeat.calc.html#molfeat.calc.shape.ElectroShapeDescriptors.electron_scaling","title":"<code>electron_scaling = electron_scaling</code>  <code>instance-attribute</code>","text":""},{"location":"api/molfeat.calc.html#molfeat.calc.shape.ElectroShapeDescriptors.replace_nan","title":"<code>replace_nan = replace_nan</code>  <code>instance-attribute</code>","text":""},{"location":"api/molfeat.calc.html#molfeat.calc.shape.ElectroShapeDescriptors.__call__","title":"<code>__call__(mol, conformer_id=-1)</code>","text":"<p>Get rdkit 3D descriptors for a molecule</p> <p>Parameters:</p> Name Type Description Default <code>mol</code> <code>Union[dm.Mol, str]</code> <p>the molecule of interest</p> required <code>conformer_id</code> <code>int</code> <p>Optional conformer id. Defaults to -1.</p> <code>-1</code> <p>Returns:</p> Name Type Description <code>shape_descriptor</code> <code>np.ndarray</code> <p>computed shape descriptor</p> Source code in <code>molfeat/calc/shape.py</code> <pre><code>@requires_conformer\ndef __call__(self, mol: Union[dm.Mol, str], conformer_id: Optional[int] = -1):\nr\"\"\"\n    Get rdkit 3D descriptors for a molecule\n\n    Args:\n        mol: the molecule of interest\n        conformer_id (int, optional): Optional conformer id. Defaults to -1.\n\n    Returns:\n        shape_descriptor (np.ndarray): computed shape descriptor\n    \"\"\"\n\n    mol = dm.to_mol(mol)\n    coords = mol.GetConformer(conformer_id).GetPositions()\n    charge = self.compute_charge(mol, self.charge_model)\n    if self.replace_nan:\n        charge = np.nan_to_num(charge)\n\n    desc_4d = np.column_stack((coords, charge * self.electron_scaling))\n\n    c1 = desc_4d.mean(axis=0)\n    distances_c1 = norm(desc_4d - c1, axis=1)\n\n    c2 = desc_4d[distances_c1.argmax()]  # atom position furthest from c1\n    distances_c2 = norm(desc_4d - c2, axis=1)\n\n    c3 = desc_4d[distances_c2.argmax()]  # atom position furthest from c2\n    distances_c3 = norm(desc_4d - c3, axis=1)\n\n    vector_a = c2 - c1\n    vector_b = c3 - c1\n    vector_as = vector_a[:3]  # spatial parts of these vectors\n    vector_bs = vector_b[:3]  # spatial parts of these vectors\n    cross_ab = np.cross(vector_as, vector_bs)\n    vector_c = (norm(vector_a) / (2 * norm(cross_ab))) * cross_ab\n    vector_c1s = c1[:3]\n\n    max_charge = np.array(np.amax(charge) * self.electron_scaling)\n    min_charge = np.array(np.amin(charge) * self.electron_scaling)\n\n    c4 = np.append(vector_c1s + vector_c, max_charge)\n    c5 = np.append(vector_c1s + vector_c, min_charge)\n\n    distances_c4 = norm(desc_4d - c4, axis=1)\n    distances_c5 = norm(desc_4d - c5, axis=1)\n\n    distances_list = [\n        distances_c1,\n        distances_c2,\n        distances_c3,\n        distances_c4,\n        distances_c5,\n    ]\n\n    shape_descriptor = np.zeros(15)\n\n    i = 0\n    for distances in distances_list:\n        mean = np.mean(distances)\n        shape_descriptor[0 + i] = mean\n        shape_descriptor[1 + i] = np.std(distances)\n        shape_descriptor[2 + i] = cbrt(np.sum(((distances - mean) ** 3) / distances.size))\n        i += 3\n    if self.replace_nan:\n        return np.nan_to_num(shape_descriptor)\n    return shape_descriptor\n</code></pre>"},{"location":"api/molfeat.calc.html#molfeat.calc.shape.ElectroShapeDescriptors.__getstate__","title":"<code>__getstate__()</code>","text":"Source code in <code>molfeat/calc/shape.py</code> <pre><code>def __getstate__(self):\n    state = {}\n    state[\"charge_model\"] = self.charge_model\n    state[\"replace_nan\"] = self.replace_nan\n    state[\"electron_scaling\"] = self.electron_scaling\n    state[\"_columns\"] = self._columns\n    return state\n</code></pre>"},{"location":"api/molfeat.calc.html#molfeat.calc.shape.ElectroShapeDescriptors.__init__","title":"<code>__init__(charge_model='gasteiger', replace_nan=False, electron_scaling=25.0, **kwargs)</code>","text":"<p>Constructor for ElectroShape descriptor</p> <p>Parameters:</p> Name Type Description Default <code>charge_model</code> <code>str</code> <p>charge model to use. One of ('gasteiger', 'tripos', 'mmff94', 'formal'). Defaults to \"gasteiger\". Note that formal charges will be computed on the fly if not provided in the input molecules. The <code>tripos</code> charge models comes from TRIPOS force field and are often parsed from mol2 files.</p> <code>'gasteiger'</code> <code>replace_nan</code> <code>bool</code> <p>whether to replace NaN values. Defaults False</p> <code>False</code> <code>electron_scaling</code> <code>float</code> <p>scaling factor to convert electron charges to Angstroms. Defaults to 25.0.</p> <code>25.0</code> Source code in <code>molfeat/calc/shape.py</code> <pre><code>def __init__(\n    self,\n    charge_model: str = \"gasteiger\",\n    replace_nan: bool = False,\n    electron_scaling: float = 25.0,\n    **kwargs,\n):\n\"\"\"Constructor for ElectroShape descriptor\n\n    Args:\n        charge_model: charge model to use. One of ('gasteiger', 'tripos', 'mmff94', 'formal'). Defaults to \"gasteiger\".\n            Note that formal charges will be computed on the fly if not provided in the input molecules.\n            The `tripos` charge models comes from TRIPOS force field and are often parsed from mol2 files.\n        replace_nan: whether to replace NaN values. Defaults False\n        electron_scaling: scaling factor to convert electron charges to Angstroms. Defaults to 25.0.\n    \"\"\"\n\n    self.charge_model = charge_model\n    self.replace_nan = replace_nan\n    self.electron_scaling = electron_scaling\n    self._columns = None\n</code></pre>"},{"location":"api/molfeat.calc.html#molfeat.calc.shape.ElectroShapeDescriptors.__len__","title":"<code>__len__()</code>","text":"<p>Return the length of the calculator</p> Source code in <code>molfeat/calc/shape.py</code> <pre><code>def __len__(self):\n\"\"\"Return the length of the calculator\"\"\"\n    return len(self.columns)\n</code></pre>"},{"location":"api/molfeat.calc.html#molfeat.calc.shape.ElectroShapeDescriptors.compute_charge","title":"<code>compute_charge(mol, charge_model=None)</code>  <code>staticmethod</code>","text":"<p>Get the molecular charge of the molecule.</p> <p>Parameters:</p> Name Type Description Default <code>charge_model</code> <code>str</code> <p>charge model to use. One of ('gasteiger', 'tripos', 'mmff94', 'formal'). Defaults to \"gasteiger\".</p> <code>None</code> Source code in <code>molfeat/calc/shape.py</code> <pre><code>@staticmethod\ndef compute_charge(mol: Union[dm.Mol, str], charge_model: str = None):\n\"\"\"\n    Get the molecular charge of the molecule.\n\n    Args:\n        charge_model: charge model to use. One of ('gasteiger', 'tripos', 'mmff94', 'formal'). Defaults to \"gasteiger\".\n    \"\"\"\n\n    if charge_model not in ElectroShapeDescriptors.SUPPORTED_CHARGE_MODELS:\n        raise ValueError(\n            f\"Unknown charge model {charge_model}. You should provide one of {ElectroShapeDescriptors.SUPPORTED_CHARGE_MODELS}\"\n        )\n    mol = dm.to_mol(mol)\n    atom_charge = []\n    atom_list = list(mol.GetAtoms())\n\n    # force compute the partial charges if not provided\n    if charge_model == \"gasteiger\" and not atom_list[0].HasProp(\"_GasteigerCharge\"):\n        rdPartialCharges.ComputeGasteigerCharges(mol)\n    elif charge_model == \"mmff94\" and not atom_list[0].HasProp(\"_MMFF94Charge\"):\n        ff_infos = rdForceFieldHelpers.MMFFGetMoleculeProperties(mol)\n        for i, atom in enumerate(atom_list):\n            atom.SetDoubleProp(\"_MMFF94Charge\", ff_infos.GetMMFFPartialCharge(i))\n\n    for atom in mol.GetAtoms():\n        if charge_model == \"formal\":\n            atom_charge.append(atom.GetFormalCharge())\n        elif charge_model == \"gasteiger\":\n            atom_charge.append(atom.GetDoubleProp(\"_GasteigerCharge\"))\n        elif charge_model == \"mmff94\":\n            atom_charge.append(atom.GetDoubleProp(\"_MMFF94Charge\"))\n        elif charge_model == \"tripos\":\n            atom_charge.append(atom.GetDoubleProp(\"_TriposPartialCharge\"))\n    return np.asarray(atom_charge)\n</code></pre>"},{"location":"api/molfeat.calc.html#molfeat.calc.shape.USRDescriptors","title":"<code>USRDescriptors</code>","text":"<p>         Bases: <code>SerializableCalculator</code></p> <p>Descriptors for the shape of a molecule.</p> <p>!!! note:     The following shape descriptors are offered:         * USR: UltraFast Shape Recognition         * USRCAT: Ultrafast Shape Recognition with CREDO Atom Types</p> Source code in <code>molfeat/calc/shape.py</code> <pre><code>class USRDescriptors(SerializableCalculator):\n\"\"\"Descriptors for the shape of a molecule.\n\n    !!! note:\n        The following shape descriptors are offered:\n            * USR: UltraFast Shape Recognition\n            * USRCAT: Ultrafast Shape Recognition with CREDO Atom Types\n    \"\"\"\n\n    def __init__(self, method: str = \"USR\", replace_nan: bool = False, **kwargs):\n\"\"\"Constructor for ShapeDescriptors\n\n        Args:\n            method: Shape descriptor method to use. One of 'USR', 'USRCAT'. Default to 'USR'\n            replace_nan: Whether to replace nan or infinite values. Defaults to False.\n            augment: Whether to augment the descriptors with some additional custom features\n            descrs: List of features to consider if not None\n        \"\"\"\n        self.method = method.upper()\n        if self.method not in [\"USR\", \"USRCAT\"]:\n            raise ValueError(f\"Shape descriptor {self.method} is not supported\")\n        self.replace_nan = replace_nan\n        self._columns = None\n\n    def __getstate__(self):\n        state = {}\n        state[\"method\"] = self.method\n        state[\"replace_nan\"] = self.replace_nan\n        state[\"_columns\"] = self._columns\n        return state\n\n    @property\n    def columns(self):\n\"\"\"\n        Get the name of all the descriptors of this calculator\n        \"\"\"\n        if self._columns is None:\n            if self.method == \"USR\":\n                self._columns = [f\"usr-{i}\" for i in range(1, 13)]\n            elif self.method == \"USRCAT\":\n                self._columns = [f\"usr-{i}\" for i in range(1, 61)]\n        return self._columns\n\n    def __len__(self):\n\"\"\"Compute descriptors length\"\"\"\n        return len(self.columns)\n\n    @requires_conformer\n    def __call__(self, mol: Union[dm.Mol, str], conformer_id: Optional[int] = -1):\nr\"\"\"\n        Get rdkit 3D descriptors for a molecule\n\n        Args:\n            mol: the molecule of interest\n            conformer_id (int, optional): Optional conformer id. Defaults to -1.\n\n        Returns:\n            shape_descriptors (np.ndarray): list of computed mordred molecular descriptors\n        \"\"\"\n        if self.method == \"USR\":\n            shape_descr = rdMolDescriptors.GetUSR(mol, confId=conformer_id)\n        elif self.method == \"USRCAT\":\n            shape_descr = rdMolDescriptors.GetUSRCAT(mol, confId=conformer_id)\n        if self.replace_nan:\n            shape_descr = np.nan_to_num(shape_descr, self.replace_nan)\n        return np.asarray(shape_descr)\n</code></pre>"},{"location":"api/molfeat.calc.html#molfeat.calc.shape.USRDescriptors.columns","title":"<code>columns</code>  <code>property</code>","text":"<p>Get the name of all the descriptors of this calculator</p>"},{"location":"api/molfeat.calc.html#molfeat.calc.shape.USRDescriptors.method","title":"<code>method = method.upper()</code>  <code>instance-attribute</code>","text":""},{"location":"api/molfeat.calc.html#molfeat.calc.shape.USRDescriptors.replace_nan","title":"<code>replace_nan = replace_nan</code>  <code>instance-attribute</code>","text":""},{"location":"api/molfeat.calc.html#molfeat.calc.shape.USRDescriptors.__call__","title":"<code>__call__(mol, conformer_id=-1)</code>","text":"<p>Get rdkit 3D descriptors for a molecule</p> <p>Parameters:</p> Name Type Description Default <code>mol</code> <code>Union[dm.Mol, str]</code> <p>the molecule of interest</p> required <code>conformer_id</code> <code>int</code> <p>Optional conformer id. Defaults to -1.</p> <code>-1</code> <p>Returns:</p> Name Type Description <code>shape_descriptors</code> <code>np.ndarray</code> <p>list of computed mordred molecular descriptors</p> Source code in <code>molfeat/calc/shape.py</code> <pre><code>@requires_conformer\ndef __call__(self, mol: Union[dm.Mol, str], conformer_id: Optional[int] = -1):\nr\"\"\"\n    Get rdkit 3D descriptors for a molecule\n\n    Args:\n        mol: the molecule of interest\n        conformer_id (int, optional): Optional conformer id. Defaults to -1.\n\n    Returns:\n        shape_descriptors (np.ndarray): list of computed mordred molecular descriptors\n    \"\"\"\n    if self.method == \"USR\":\n        shape_descr = rdMolDescriptors.GetUSR(mol, confId=conformer_id)\n    elif self.method == \"USRCAT\":\n        shape_descr = rdMolDescriptors.GetUSRCAT(mol, confId=conformer_id)\n    if self.replace_nan:\n        shape_descr = np.nan_to_num(shape_descr, self.replace_nan)\n    return np.asarray(shape_descr)\n</code></pre>"},{"location":"api/molfeat.calc.html#molfeat.calc.shape.USRDescriptors.__getstate__","title":"<code>__getstate__()</code>","text":"Source code in <code>molfeat/calc/shape.py</code> <pre><code>def __getstate__(self):\n    state = {}\n    state[\"method\"] = self.method\n    state[\"replace_nan\"] = self.replace_nan\n    state[\"_columns\"] = self._columns\n    return state\n</code></pre>"},{"location":"api/molfeat.calc.html#molfeat.calc.shape.USRDescriptors.__init__","title":"<code>__init__(method='USR', replace_nan=False, **kwargs)</code>","text":"<p>Constructor for ShapeDescriptors</p> <p>Parameters:</p> Name Type Description Default <code>method</code> <code>str</code> <p>Shape descriptor method to use. One of 'USR', 'USRCAT'. Default to 'USR'</p> <code>'USR'</code> <code>replace_nan</code> <code>bool</code> <p>Whether to replace nan or infinite values. Defaults to False.</p> <code>False</code> <code>augment</code> <p>Whether to augment the descriptors with some additional custom features</p> required <code>descrs</code> <p>List of features to consider if not None</p> required Source code in <code>molfeat/calc/shape.py</code> <pre><code>def __init__(self, method: str = \"USR\", replace_nan: bool = False, **kwargs):\n\"\"\"Constructor for ShapeDescriptors\n\n    Args:\n        method: Shape descriptor method to use. One of 'USR', 'USRCAT'. Default to 'USR'\n        replace_nan: Whether to replace nan or infinite values. Defaults to False.\n        augment: Whether to augment the descriptors with some additional custom features\n        descrs: List of features to consider if not None\n    \"\"\"\n    self.method = method.upper()\n    if self.method not in [\"USR\", \"USRCAT\"]:\n        raise ValueError(f\"Shape descriptor {self.method} is not supported\")\n    self.replace_nan = replace_nan\n    self._columns = None\n</code></pre>"},{"location":"api/molfeat.calc.html#molfeat.calc.shape.USRDescriptors.__len__","title":"<code>__len__()</code>","text":"<p>Compute descriptors length</p> Source code in <code>molfeat/calc/shape.py</code> <pre><code>def __len__(self):\n\"\"\"Compute descriptors length\"\"\"\n    return len(self.columns)\n</code></pre>"},{"location":"api/molfeat.calc.html#molfeat.calc.shape.usrdistance","title":"<code>usrdistance(shape_1, shape_2, weights=None)</code>","text":"<p>Computes similarity between molecules</p> <p>Parameters:</p> Name Type Description Default <code>shape_1</code> <p>USR shape descriptor of first molecule</p> required <code>shape_2</code> <p>USR shape descriptor</p> required <code>weights</code> <code>Optional[List[float]]</code> <p>List of scaling factor to use for</p> <code>None</code> <p>Returns:</p> Name Type Description <code>dist</code> <p>Distance [0-1] between shapes of molecules, 0 indicates identical molecules</p> Source code in <code>molfeat/calc/shape.py</code> <pre><code>def usrdistance(\n    shape_1,\n    shape_2,\n    weights: Optional[List[float]] = None,\n):\n\"\"\"Computes similarity between molecules\n\n    Args:\n        shape_1: USR shape descriptor of first molecule\n        shape_2: USR shape descriptor\n        weights: List of scaling factor to use for\n\n    Returns:\n        dist: Distance [0-1] between shapes of molecules, 0 indicates identical molecules\n    \"\"\"\n\n    # case for usr shape descriptors\n    if weights is None:\n        weights = []\n    if (\n        (shape_1.shape[-1] == shape_2.shape[-1] == 12)\n        or (shape_1.shape[-1] == shape_2.shape[-1] == 60)\n        or (shape_1.shape[-1] == shape_2.shape[-1] == 15)\n    ):\n        dist = rdMolDescriptors.GetUSRScore(shape_1, shape_2, weights=weights)\n        return dist\n\n    raise Exception(\n        \"Given vectors are not valid USR shape descriptors \"\n        \"or come from different methods. Correct vector lengths\"\n        \"are: 12 for USR, 60 for USRCAT, 15 for Electroshape\"\n    )\n</code></pre>"},{"location":"api/molfeat.calc.html#atoms-featurizer","title":"<code>Atoms Featurizer</code>","text":""},{"location":"api/molfeat.calc.html#molfeat.calc.atom.AtomCalculator","title":"<code>AtomCalculator</code>","text":"<p>         Bases: <code>SerializableCalculator</code></p> <p>Base class for computing atom properties compatible with DGLLife</p> Source code in <code>molfeat/calc/atom.py</code> <pre><code>class AtomCalculator(SerializableCalculator):\n\"\"\"\n    Base class for computing atom properties compatible with DGLLife\n    \"\"\"\n\n    DEFAULT_FEATURIZER = {\n        \"atom_one_hot\": atom_one_hot,\n        \"atom_degree_one_hot\": atom_degree_one_hot,\n        \"atom_implicit_valence_one_hot\": atom_implicit_valence_one_hot,\n        \"atom_hybridization_one_hot\": atom_hybridization_one_hot,\n        \"atom_is_aromatic\": atom_is_aromatic,\n        \"atom_formal_charge\": atom_formal_charge,\n        \"atom_num_radical_electrons\": atom_num_radical_electrons,\n        \"atom_is_in_ring\": atom_is_in_ring,\n        \"atom_total_num_H_one_hot\": atom_total_num_H_one_hot,\n        \"atom_chiral_tag_one_hot\": atom_chiral_tag_one_hot,\n        \"atom_is_chiral_center\": atom_is_chiral_center,\n    }\n\n    def __init__(\n        self,\n        featurizer_funcs: Dict[str, Callable] = None,\n        concat: bool = True,\n        name: str = \"hv\",\n    ):\n\"\"\"\n        Init function of the atom property calculator\n\n        Args:\n            featurizer_funcs : Mapping of feature name to the featurization function.\n                For compatibility a list of callable/function is still accepted, and the corresponding\n                featurizer name will be automatically generated. Each function is of signature\n                ``func(rdkit.Chem.rdchem.Atom) -&gt; list or 1D numpy array``.\n            concat: Whether to concat all the data into a single value in the output dict\n            name: Name of the key name of the concatenated features\n        \"\"\"\n        self._input_kwargs = locals().copy()\n        self._input_kwargs.pop(\"self\")\n        # we also remove the featurizer funcs\n        self._input_kwargs.pop(\"featurizer_funcs\", None)\n        self._toy_mol = dm.to_mol(\"CCO\")\n        self._feat_sizes = dict()\n        if featurizer_funcs is None:\n            featurizer_funcs = self.DEFAULT_FEATURIZER\n        if not isinstance(featurizer_funcs, dict):\n            get_name = lambda x: getattr(x, \"__name__\", repr(x))\n            featurizer_funcs = dict((get_name(x), x) for x in featurizer_funcs)\n        self.featurizer_funcs = featurizer_funcs\n        for k in self.featurizer_funcs.keys():\n            self.feat_size(feat_name=k)\n        self.concat = concat\n        self.name = name\n\n    def to_state_dict(self):\n\"\"\"\n        Convert the Atom calculator to a state dict\n        Due to some constraints and cross-version compatibility,  the featurizer functions\n        need to be pickled and not just return a list\n        \"\"\"\n        state_dict = {}\n        state_dict[\"name\"] = self.__class__.__name__\n        state_dict[\"module\"] = self.__class__.__module__\n        state_dict[\"args\"] = self._input_kwargs\n        featurizer_fn_pickled = {}\n        for fname, ffunc in self.featurizer_funcs.items():\n            featurizer_fn_pickled[fname] = fn_to_hex(ffunc)\n        state_dict[\"args\"][\"featurizer_funcs\"] = featurizer_fn_pickled\n        state_dict[\"_molfeat_version\"] = MOLFEAT_VERSION\n\n        signature = inspect.signature(self.__init__)\n        val = {\n            k: v.default\n            for k, v in signature.parameters.items()\n            # if v.default is not inspect.Parameter.empty\n        }\n        to_remove = [k for k in state_dict[\"args\"] if k not in val.keys()]\n        for k in to_remove:\n            state_dict[\"args\"].pop(k)\n\n        return state_dict\n\n    @classmethod\n    def from_state_dict(cls, state_dict, override_args: Optional[dict] = None):\n\"\"\"Create an instance of an atom calculator from a state dict\n\n        Args:\n            state_dict: state dictionary to use to create the atom calculator\n            overrride_args: optional dictionary of arguments to override the ones in the state dict\n                at construction of the new object\n        \"\"\"\n        # EN: at this moment, version compatibility is not enforced\n        cls_name = state_dict.get(\"name\", cls.__name__)\n        module_name = state_dict.get(\"module\", cls.__module__)\n        module = importlib.import_module(module_name)\n        klass = getattr(module, cls_name)\n        kwargs = state_dict[\"args\"].copy()\n        # now we need to unpickle the featurizer functions\n        featurizer_fn_pickled = kwargs.pop(\"featurizer_funcs\", None)\n        if featurizer_fn_pickled is not None:\n            featurizer_fn_loaded = {}\n            for k, v in featurizer_fn_pickled.items():\n                featurizer_fn_loaded[k] = hex_to_fn(v)\n            kwargs[\"featurizer_funcs\"] = featurizer_fn_loaded\n        kwargs.update(**(override_args or {}))\n        return klass(**kwargs)\n\n    def _concat(self, data_dict: Dict[str, Iterable]):\n\"\"\"Concatenate the data into a single value\n\n        Args:\n            data_dict: mapping of feature names to tensor/arrays\n        Returns:\n            concatenated_dict: a dict with a single key where all array have been concatenated\n        \"\"\"\n        return concat_dict(data_dict, new_name=self.name)\n\n    def feat_size(self, feat_name=None):\n\"\"\"Get the feature size for ``feat_name``.\n\n        When there is only one feature, users do not need to provide ``feat_name``.\n\n        Args:\n            feat_name: Feature for query.\n\n        Returns:\n            int: Feature size for the feature with name ``feat_name``. Default to None.\n        \"\"\"\n        if feat_name is None:\n            assert (\n                len(self.featurizer_funcs) == 1\n            ), \"feat_name should be provided if there are more than one features\"\n            feat_name = list(self.featurizer_funcs.keys())[0]\n\n        if feat_name not in self.featurizer_funcs:\n            raise ValueError(\n                \"Expect feat_name to be in {}, got {}\".format(\n                    list(self.featurizer_funcs.keys()), feat_name\n                )\n            )\n\n        if feat_name not in self._feat_sizes:\n            atom = self._toy_mol.GetAtomWithIdx(0)\n            self._feat_sizes[feat_name] = len(self.featurizer_funcs[feat_name](atom))\n        return self._feat_sizes[feat_name]\n\n    def __len__(self):\n\"\"\"Get length of the property estimator\"\"\"\n        return sum(v for k, v in self._feat_sizes.items() if k != self.name)\n\n    def __call__(self, mol: Union[rdchem.Mol, str], dtype: Callable = None):\n\"\"\"\n        Get rdkit basic descriptors for a molecule\n\n        Args:\n            mol: the molecule of interest\n            dtype: requested data type\n\n        Returns:\n            dict:  For each function in self.featurizer_funcs with the key ``k``, store the computed feature under the key ``k``.\n        \"\"\"\n        mol = dm.to_mol(mol)\n        num_atoms = mol.GetNumAtoms()\n        atom_features = defaultdict(list)\n\n        # Compute features for each atom\n        for i in range(num_atoms):\n            atom = mol.GetAtomWithIdx(i)\n            for feat_name, feat_func in self.featurizer_funcs.items():\n                atom_features[feat_name].append(feat_func(atom))\n\n        # Stack the features and convert them to float arrays\n        processed_features = dict()\n        for feat_name, feat_list in atom_features.items():\n            feat = np.stack(feat_list).astype(np.float32)\n            processed_features[feat_name] = feat\n\n        if self.concat:\n            processed_features = self._concat(processed_features)\n\n        if dtype is not None:\n            for feat_name, feat in processed_features.items():\n                feat = datatype.cast(feat, dtype=dtype)\n                processed_features[feat_name] = feat\n\n        return processed_features\n</code></pre>"},{"location":"api/molfeat.calc.html#molfeat.calc.atom.AtomCalculator.DEFAULT_FEATURIZER","title":"<code>DEFAULT_FEATURIZER = {'atom_one_hot': atom_one_hot, 'atom_degree_one_hot': atom_degree_one_hot, 'atom_implicit_valence_one_hot': atom_implicit_valence_one_hot, 'atom_hybridization_one_hot': atom_hybridization_one_hot, 'atom_is_aromatic': atom_is_aromatic, 'atom_formal_charge': atom_formal_charge, 'atom_num_radical_electrons': atom_num_radical_electrons, 'atom_is_in_ring': atom_is_in_ring, 'atom_total_num_H_one_hot': atom_total_num_H_one_hot, 'atom_chiral_tag_one_hot': atom_chiral_tag_one_hot, 'atom_is_chiral_center': atom_is_chiral_center}</code>  <code>class-attribute</code>","text":""},{"location":"api/molfeat.calc.html#molfeat.calc.atom.AtomCalculator.concat","title":"<code>concat = concat</code>  <code>instance-attribute</code>","text":""},{"location":"api/molfeat.calc.html#molfeat.calc.atom.AtomCalculator.featurizer_funcs","title":"<code>featurizer_funcs = featurizer_funcs</code>  <code>instance-attribute</code>","text":""},{"location":"api/molfeat.calc.html#molfeat.calc.atom.AtomCalculator.name","title":"<code>name = name</code>  <code>instance-attribute</code>","text":""},{"location":"api/molfeat.calc.html#molfeat.calc.atom.AtomCalculator.__call__","title":"<code>__call__(mol, dtype=None)</code>","text":"<p>Get rdkit basic descriptors for a molecule</p> <p>Parameters:</p> Name Type Description Default <code>mol</code> <code>Union[rdchem.Mol, str]</code> <p>the molecule of interest</p> required <code>dtype</code> <code>Callable</code> <p>requested data type</p> <code>None</code> <p>Returns:</p> Name Type Description <code>dict</code> <p>For each function in self.featurizer_funcs with the key <code>k</code>, store the computed feature under the key <code>k</code>.</p> Source code in <code>molfeat/calc/atom.py</code> <pre><code>def __call__(self, mol: Union[rdchem.Mol, str], dtype: Callable = None):\n\"\"\"\n    Get rdkit basic descriptors for a molecule\n\n    Args:\n        mol: the molecule of interest\n        dtype: requested data type\n\n    Returns:\n        dict:  For each function in self.featurizer_funcs with the key ``k``, store the computed feature under the key ``k``.\n    \"\"\"\n    mol = dm.to_mol(mol)\n    num_atoms = mol.GetNumAtoms()\n    atom_features = defaultdict(list)\n\n    # Compute features for each atom\n    for i in range(num_atoms):\n        atom = mol.GetAtomWithIdx(i)\n        for feat_name, feat_func in self.featurizer_funcs.items():\n            atom_features[feat_name].append(feat_func(atom))\n\n    # Stack the features and convert them to float arrays\n    processed_features = dict()\n    for feat_name, feat_list in atom_features.items():\n        feat = np.stack(feat_list).astype(np.float32)\n        processed_features[feat_name] = feat\n\n    if self.concat:\n        processed_features = self._concat(processed_features)\n\n    if dtype is not None:\n        for feat_name, feat in processed_features.items():\n            feat = datatype.cast(feat, dtype=dtype)\n            processed_features[feat_name] = feat\n\n    return processed_features\n</code></pre>"},{"location":"api/molfeat.calc.html#molfeat.calc.atom.AtomCalculator.__init__","title":"<code>__init__(featurizer_funcs=None, concat=True, name='hv')</code>","text":"<p>Init function of the atom property calculator</p> <p>Parameters:</p> Name Type Description Default <code>featurizer_funcs</code> <p>Mapping of feature name to the featurization function. For compatibility a list of callable/function is still accepted, and the corresponding featurizer name will be automatically generated. Each function is of signature <code>func(rdkit.Chem.rdchem.Atom) -&gt; list or 1D numpy array</code>.</p> <code>None</code> <code>concat</code> <code>bool</code> <p>Whether to concat all the data into a single value in the output dict</p> <code>True</code> <code>name</code> <code>str</code> <p>Name of the key name of the concatenated features</p> <code>'hv'</code> Source code in <code>molfeat/calc/atom.py</code> <pre><code>def __init__(\n    self,\n    featurizer_funcs: Dict[str, Callable] = None,\n    concat: bool = True,\n    name: str = \"hv\",\n):\n\"\"\"\n    Init function of the atom property calculator\n\n    Args:\n        featurizer_funcs : Mapping of feature name to the featurization function.\n            For compatibility a list of callable/function is still accepted, and the corresponding\n            featurizer name will be automatically generated. Each function is of signature\n            ``func(rdkit.Chem.rdchem.Atom) -&gt; list or 1D numpy array``.\n        concat: Whether to concat all the data into a single value in the output dict\n        name: Name of the key name of the concatenated features\n    \"\"\"\n    self._input_kwargs = locals().copy()\n    self._input_kwargs.pop(\"self\")\n    # we also remove the featurizer funcs\n    self._input_kwargs.pop(\"featurizer_funcs\", None)\n    self._toy_mol = dm.to_mol(\"CCO\")\n    self._feat_sizes = dict()\n    if featurizer_funcs is None:\n        featurizer_funcs = self.DEFAULT_FEATURIZER\n    if not isinstance(featurizer_funcs, dict):\n        get_name = lambda x: getattr(x, \"__name__\", repr(x))\n        featurizer_funcs = dict((get_name(x), x) for x in featurizer_funcs)\n    self.featurizer_funcs = featurizer_funcs\n    for k in self.featurizer_funcs.keys():\n        self.feat_size(feat_name=k)\n    self.concat = concat\n    self.name = name\n</code></pre>"},{"location":"api/molfeat.calc.html#molfeat.calc.atom.AtomCalculator.__len__","title":"<code>__len__()</code>","text":"<p>Get length of the property estimator</p> Source code in <code>molfeat/calc/atom.py</code> <pre><code>def __len__(self):\n\"\"\"Get length of the property estimator\"\"\"\n    return sum(v for k, v in self._feat_sizes.items() if k != self.name)\n</code></pre>"},{"location":"api/molfeat.calc.html#molfeat.calc.atom.AtomCalculator.feat_size","title":"<code>feat_size(feat_name=None)</code>","text":"<p>Get the feature size for <code>feat_name</code>.</p> <p>When there is only one feature, users do not need to provide <code>feat_name</code>.</p> <p>Parameters:</p> Name Type Description Default <code>feat_name</code> <p>Feature for query.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>int</code> <p>Feature size for the feature with name <code>feat_name</code>. Default to None.</p> Source code in <code>molfeat/calc/atom.py</code> <pre><code>def feat_size(self, feat_name=None):\n\"\"\"Get the feature size for ``feat_name``.\n\n    When there is only one feature, users do not need to provide ``feat_name``.\n\n    Args:\n        feat_name: Feature for query.\n\n    Returns:\n        int: Feature size for the feature with name ``feat_name``. Default to None.\n    \"\"\"\n    if feat_name is None:\n        assert (\n            len(self.featurizer_funcs) == 1\n        ), \"feat_name should be provided if there are more than one features\"\n        feat_name = list(self.featurizer_funcs.keys())[0]\n\n    if feat_name not in self.featurizer_funcs:\n        raise ValueError(\n            \"Expect feat_name to be in {}, got {}\".format(\n                list(self.featurizer_funcs.keys()), feat_name\n            )\n        )\n\n    if feat_name not in self._feat_sizes:\n        atom = self._toy_mol.GetAtomWithIdx(0)\n        self._feat_sizes[feat_name] = len(self.featurizer_funcs[feat_name](atom))\n    return self._feat_sizes[feat_name]\n</code></pre>"},{"location":"api/molfeat.calc.html#molfeat.calc.atom.AtomCalculator.from_state_dict","title":"<code>from_state_dict(state_dict, override_args=None)</code>  <code>classmethod</code>","text":"<p>Create an instance of an atom calculator from a state dict</p> <p>Parameters:</p> Name Type Description Default <code>state_dict</code> <p>state dictionary to use to create the atom calculator</p> required <code>overrride_args</code> <p>optional dictionary of arguments to override the ones in the state dict at construction of the new object</p> required Source code in <code>molfeat/calc/atom.py</code> <pre><code>@classmethod\ndef from_state_dict(cls, state_dict, override_args: Optional[dict] = None):\n\"\"\"Create an instance of an atom calculator from a state dict\n\n    Args:\n        state_dict: state dictionary to use to create the atom calculator\n        overrride_args: optional dictionary of arguments to override the ones in the state dict\n            at construction of the new object\n    \"\"\"\n    # EN: at this moment, version compatibility is not enforced\n    cls_name = state_dict.get(\"name\", cls.__name__)\n    module_name = state_dict.get(\"module\", cls.__module__)\n    module = importlib.import_module(module_name)\n    klass = getattr(module, cls_name)\n    kwargs = state_dict[\"args\"].copy()\n    # now we need to unpickle the featurizer functions\n    featurizer_fn_pickled = kwargs.pop(\"featurizer_funcs\", None)\n    if featurizer_fn_pickled is not None:\n        featurizer_fn_loaded = {}\n        for k, v in featurizer_fn_pickled.items():\n            featurizer_fn_loaded[k] = hex_to_fn(v)\n        kwargs[\"featurizer_funcs\"] = featurizer_fn_loaded\n    kwargs.update(**(override_args or {}))\n    return klass(**kwargs)\n</code></pre>"},{"location":"api/molfeat.calc.html#molfeat.calc.atom.AtomCalculator.to_state_dict","title":"<code>to_state_dict()</code>","text":"<p>Convert the Atom calculator to a state dict Due to some constraints and cross-version compatibility,  the featurizer functions need to be pickled and not just return a list</p> Source code in <code>molfeat/calc/atom.py</code> <pre><code>def to_state_dict(self):\n\"\"\"\n    Convert the Atom calculator to a state dict\n    Due to some constraints and cross-version compatibility,  the featurizer functions\n    need to be pickled and not just return a list\n    \"\"\"\n    state_dict = {}\n    state_dict[\"name\"] = self.__class__.__name__\n    state_dict[\"module\"] = self.__class__.__module__\n    state_dict[\"args\"] = self._input_kwargs\n    featurizer_fn_pickled = {}\n    for fname, ffunc in self.featurizer_funcs.items():\n        featurizer_fn_pickled[fname] = fn_to_hex(ffunc)\n    state_dict[\"args\"][\"featurizer_funcs\"] = featurizer_fn_pickled\n    state_dict[\"_molfeat_version\"] = MOLFEAT_VERSION\n\n    signature = inspect.signature(self.__init__)\n    val = {\n        k: v.default\n        for k, v in signature.parameters.items()\n        # if v.default is not inspect.Parameter.empty\n    }\n    to_remove = [k for k in state_dict[\"args\"] if k not in val.keys()]\n    for k in to_remove:\n        state_dict[\"args\"].pop(k)\n\n    return state_dict\n</code></pre>"},{"location":"api/molfeat.calc.html#molfeat.calc.atom.AtomMaterialCalculator","title":"<code>AtomMaterialCalculator</code>","text":"<p>         Bases: <code>AtomCalculator</code></p> <p>Atom calculator with the extend atomic property list which have been collected from various material science packages</p> Source code in <code>molfeat/calc/atom.py</code> <pre><code>class AtomMaterialCalculator(AtomCalculator):\n\"\"\"Atom calculator with the extend atomic property list\n    which have been collected from various material science packages\n    \"\"\"\n\n    DEFAULT_FEATURIZER = {\n        \"atom_one_hot\": atom_one_hot,\n        \"atom_extended_properties\": atom_extended_properties,\n        \"atom_degree_one_hot\": atom_degree_one_hot,\n        \"atom_implicit_valence_one_hot\": atom_implicit_valence_one_hot,\n        \"atom_hybridization_one_hot\": atom_hybridization_one_hot,\n        \"atom_is_aromatic\": atom_is_aromatic,\n        \"atom_formal_charge\": atom_formal_charge,\n        \"atom_num_radical_electrons\": atom_num_radical_electrons,\n        \"atom_is_in_ring\": atom_is_in_ring,\n        \"atom_chiral_tag_one_hot\": atom_chiral_tag_one_hot,\n        \"atom_is_chiral_center\": atom_is_chiral_center,\n    }\n</code></pre>"},{"location":"api/molfeat.calc.html#molfeat.calc.atom.AtomMaterialCalculator.DEFAULT_FEATURIZER","title":"<code>DEFAULT_FEATURIZER = {'atom_one_hot': atom_one_hot, 'atom_extended_properties': atom_extended_properties, 'atom_degree_one_hot': atom_degree_one_hot, 'atom_implicit_valence_one_hot': atom_implicit_valence_one_hot, 'atom_hybridization_one_hot': atom_hybridization_one_hot, 'atom_is_aromatic': atom_is_aromatic, 'atom_formal_charge': atom_formal_charge, 'atom_num_radical_electrons': atom_num_radical_electrons, 'atom_is_in_ring': atom_is_in_ring, 'atom_chiral_tag_one_hot': atom_chiral_tag_one_hot, 'atom_is_chiral_center': atom_is_chiral_center}</code>  <code>class-attribute</code>","text":""},{"location":"api/molfeat.calc.html#molfeat.calc.atom.DGLCanonicalAtomCalculator","title":"<code>DGLCanonicalAtomCalculator</code>","text":"<p>         Bases: <code>AtomCalculator</code></p> <p>Default canonical featurizer for atoms used by dgllife</p> Source code in <code>molfeat/calc/atom.py</code> <pre><code>class DGLCanonicalAtomCalculator(AtomCalculator):\n\"\"\"Default canonical featurizer for atoms used by dgllife\"\"\"\n\n    DEFAULT_FEATURIZER = {\n        \"atom_one_hot\": atom_one_hot,\n        \"atom_degree_one_hot\": atom_degree_one_hot,\n        \"atom_implicit_valence_one_hot\": atom_implicit_valence_one_hot,\n        \"atom_formal_charge\": atom_formal_charge,\n        \"atom_num_radical_electrons\": atom_num_radical_electrons,\n        \"atom_hybridization_one_hot\": partial(\n            atom_hybridization_one_hot, allowable_set=DGLLIFE_HYBRIDIZATION_LIST\n        ),\n        \"atom_is_aromatic\": atom_is_aromatic,\n        \"atom_total_num_H_one_hot\": atom_total_num_H_one_hot,\n    }\n\n    def _concat(self, data_dict: Dict[str, Iterable]):\n\"\"\"Concatenate the data into a single value\n\n        Args:\n            data_dict: mapping of feature names to tensor/arrays\n        Returns:\n            concatenated_dict: a dict with a single key where all array have been concatenated\n        \"\"\"\n        out = concat_dict(data_dict, new_name=self.name, order=list(self.featurizer_funcs.keys()))\n        return out\n</code></pre>"},{"location":"api/molfeat.calc.html#molfeat.calc.atom.DGLCanonicalAtomCalculator.DEFAULT_FEATURIZER","title":"<code>DEFAULT_FEATURIZER = {'atom_one_hot': atom_one_hot, 'atom_degree_one_hot': atom_degree_one_hot, 'atom_implicit_valence_one_hot': atom_implicit_valence_one_hot, 'atom_formal_charge': atom_formal_charge, 'atom_num_radical_electrons': atom_num_radical_electrons, 'atom_hybridization_one_hot': partial(atom_hybridization_one_hot, allowable_set=DGLLIFE_HYBRIDIZATION_LIST), 'atom_is_aromatic': atom_is_aromatic, 'atom_total_num_H_one_hot': atom_total_num_H_one_hot}</code>  <code>class-attribute</code>","text":""},{"location":"api/molfeat.calc.html#molfeat.calc.atom.DGLWeaveAtomCalculator","title":"<code>DGLWeaveAtomCalculator</code>","text":"<p>         Bases: <code>DGLCanonicalAtomCalculator</code></p> <p>Default atom featurizer used by WeaveNet in DGLLife</p> Source code in <code>molfeat/calc/atom.py</code> <pre><code>class DGLWeaveAtomCalculator(DGLCanonicalAtomCalculator):\n\"\"\"Default atom featurizer used by WeaveNet in DGLLife\"\"\"\n\n    DEFAULT_FEATURIZER = {\n        \"atom_one_hot\": partial(\n            atom_one_hot, allowable_set=DGLLIFE_WEAVE_ATOMS, encode_unknown=True\n        ),\n        \"atom_chiral_tag_one_hot\": partial(\n            atom_chiral_tag_one_hot, allowable_set=DGLLIFE_WEAVE_CHIRAL_TYPES\n        ),\n        \"atom_formal_charge\": atom_formal_charge,\n        \"atom_partial_charge\": atom_partial_charge,\n        \"atom_is_aromatic\": atom_is_aromatic,\n        \"atom_hybridization_one_hot\": partial(\n            atom_hybridization_one_hot, allowable_set=DGLLIFE_HYBRIDIZATION_LIST[:3]\n        ),\n    }\n\n    def __init__(self, concat: bool = True, name: str = \"hv\"):\n        featurizer_funcs = self.DEFAULT_FEATURIZER\n        featurizer_funcs[\"atom_weavenet_props\"] = self.atom_weave_props\n        super().__init__(concat=concat, name=name, featurizer_funcs=featurizer_funcs)\n\n    def _get_atom_state_info(self, feats):\n\"\"\"Get atom Donor/Acceptor state information from chemical pharmacophore features\n\n        Args:\n            feats: computed chemical features\n        \"\"\"\n        is_donor = defaultdict(bool)\n        is_acceptor = defaultdict(bool)\n        # Get hydrogen bond donor/acceptor information\n        for feats in feats:\n            if feats.GetFamily() == \"Donor\":\n                nodes = feats.GetAtomIds()\n                for u in nodes:\n                    is_donor[u] = True\n            elif feats.GetFamily() == \"Acceptor\":\n                nodes = feats.GetAtomIds()\n                for u in nodes:\n                    is_acceptor[u] = True\n        return is_donor, is_acceptor\n\n    @lru_cache\n    def _compute_weave_net_properties(self, mol: rdchem.Mol):\n        # Get information for donor and acceptor\n        fdef_name = os.path.join(RDConfig.RDDataDir, \"BaseFeatures.fdef\")\n        chem_feats = ChemicalFeatures.BuildFeatureFactory(fdef_name)\n        mol_feats = chem_feats.GetFeaturesForMol(mol)\n        is_donor, is_acceptor = self._get_atom_state_info(mol_feats)\n        sssr = GetSymmSSSR(mol)\n        num_atoms = mol.GetNumAtoms()\n        atom_features = []\n        for i in range(num_atoms):\n            cur_atom_props = [float(is_donor[i]), float(is_acceptor[i])]\n            # Count the number of rings the atom belongs to for ring size between 3 and 8\n            count = [0 for _ in range(3, 9)]\n            for ring in sssr:\n                ring_size = len(ring)\n                if i in ring and 3 &lt;= ring_size &lt;= 8:\n                    count[ring_size - 3] += 1\n            cur_atom_props.extend(count)\n            atom_features.append(cur_atom_props)\n        return atom_features\n\n    def atom_weave_props(self, atom: rdchem.Atom):\n\"\"\"Get the WeaveNet properties for an atom\"\"\"\n        mol = atom.GetOwningMol()\n        feats = self._compute_weave_net_properties(mol)\n        return feats[atom.GetIdx()]\n\n    def __call__(self, mol: Union[rdchem.Mol, str], dtype: Callable = None):\n\"\"\"\n        Get rdkit basic descriptors for a molecule\n\n        Args:\n            mol: the molecule of interest\n            dtype: requested data type\n\n        Returns:\n            dict:  For each function in self.featurizer_funcs with the key ``k``, store the computed feature under the key ``k``.\n        \"\"\"\n        AllChem.ComputeGasteigerCharges(mol)\n        return super().__call__(\n            mol,\n            dtype,\n        )\n</code></pre>"},{"location":"api/molfeat.calc.html#molfeat.calc.atom.DGLWeaveAtomCalculator.DEFAULT_FEATURIZER","title":"<code>DEFAULT_FEATURIZER = {'atom_one_hot': partial(atom_one_hot, allowable_set=DGLLIFE_WEAVE_ATOMS, encode_unknown=True), 'atom_chiral_tag_one_hot': partial(atom_chiral_tag_one_hot, allowable_set=DGLLIFE_WEAVE_CHIRAL_TYPES), 'atom_formal_charge': atom_formal_charge, 'atom_partial_charge': atom_partial_charge, 'atom_is_aromatic': atom_is_aromatic, 'atom_hybridization_one_hot': partial(atom_hybridization_one_hot, allowable_set=DGLLIFE_HYBRIDIZATION_LIST[:3])}</code>  <code>class-attribute</code>","text":""},{"location":"api/molfeat.calc.html#molfeat.calc.atom.DGLWeaveAtomCalculator.__call__","title":"<code>__call__(mol, dtype=None)</code>","text":"<p>Get rdkit basic descriptors for a molecule</p> <p>Parameters:</p> Name Type Description Default <code>mol</code> <code>Union[rdchem.Mol, str]</code> <p>the molecule of interest</p> required <code>dtype</code> <code>Callable</code> <p>requested data type</p> <code>None</code> <p>Returns:</p> Name Type Description <code>dict</code> <p>For each function in self.featurizer_funcs with the key <code>k</code>, store the computed feature under the key <code>k</code>.</p> Source code in <code>molfeat/calc/atom.py</code> <pre><code>def __call__(self, mol: Union[rdchem.Mol, str], dtype: Callable = None):\n\"\"\"\n    Get rdkit basic descriptors for a molecule\n\n    Args:\n        mol: the molecule of interest\n        dtype: requested data type\n\n    Returns:\n        dict:  For each function in self.featurizer_funcs with the key ``k``, store the computed feature under the key ``k``.\n    \"\"\"\n    AllChem.ComputeGasteigerCharges(mol)\n    return super().__call__(\n        mol,\n        dtype,\n    )\n</code></pre>"},{"location":"api/molfeat.calc.html#molfeat.calc.atom.DGLWeaveAtomCalculator.__init__","title":"<code>__init__(concat=True, name='hv')</code>","text":"Source code in <code>molfeat/calc/atom.py</code> <pre><code>def __init__(self, concat: bool = True, name: str = \"hv\"):\n    featurizer_funcs = self.DEFAULT_FEATURIZER\n    featurizer_funcs[\"atom_weavenet_props\"] = self.atom_weave_props\n    super().__init__(concat=concat, name=name, featurizer_funcs=featurizer_funcs)\n</code></pre>"},{"location":"api/molfeat.calc.html#molfeat.calc.atom.DGLWeaveAtomCalculator.atom_weave_props","title":"<code>atom_weave_props(atom)</code>","text":"<p>Get the WeaveNet properties for an atom</p> Source code in <code>molfeat/calc/atom.py</code> <pre><code>def atom_weave_props(self, atom: rdchem.Atom):\n\"\"\"Get the WeaveNet properties for an atom\"\"\"\n    mol = atom.GetOwningMol()\n    feats = self._compute_weave_net_properties(mol)\n    return feats[atom.GetIdx()]\n</code></pre>"},{"location":"api/molfeat.calc.html#bonds-featurizer","title":"<code>Bonds Featurizer</code>","text":""},{"location":"api/molfeat.calc.html#molfeat.calc.bond.BondCalculator","title":"<code>BondCalculator</code>","text":"<p>         Bases: <code>SerializableCalculator</code></p> <p>A class for bond featurizer which loops over all bonds in a molecule and featurizes them with the <code>featurizer_funcs</code>. The constructed graph is assumed to be a bi-directed graph by default.</p> Source code in <code>molfeat/calc/bond.py</code> <pre><code>class BondCalculator(SerializableCalculator):\n\"\"\"\n    A class for bond featurizer which loops over all bonds in a molecule and\n    featurizes them with the ``featurizer_funcs``. The constructed graph is assumed to be\n    a bi-directed graph by default.\n    \"\"\"\n\n    DEFAULT_FEATURIZER = {\n        \"bond_type_one_hot\": bond_type_one_hot,\n        \"bond_stereo_one_hot\": bond_stereo_one_hot,\n        \"bond_is_in_ring\": bond_is_in_ring,\n        \"bond_is_conjugated\": bond_is_conjugated,\n        \"bond_direction_one_hot\": bond_direction_one_hot,\n    }\n\n    def __init__(\n        self,\n        featurizer_funcs: Union[list, dict] = None,\n        self_loop: bool = False,\n        concat: bool = True,\n        name: str = \"he\",\n    ):\n\"\"\"\n        Init function of the bond property calculator\n\n        Args:\n            featurizer_funcs: Mapping feature name to the featurization function.\n            self_loop: Whether self loops will be added. Default to False. If True, an additional\n                column of binary values to indicate the identity of self loops will be added.\n                The other features of the self loops will be zero.\n            concat: Whether to concat all the data into a single value in the output dict\n            name: Name of the key name of the concatenated features\n        \"\"\"\n        self._input_kwargs = locals().copy()\n        self._input_kwargs.pop(\"self\")\n        # remove featurizer_funcs too\n        self._input_kwargs.pop(\"featurizer_funcs\", None)\n        self._toy_mol = dm.to_mol(\"CO\")\n        self._feat_sizes = dict()\n        if featurizer_funcs is None:\n            featurizer_funcs = self.DEFAULT_FEATURIZER\n        if not isinstance(featurizer_funcs, dict):\n            get_name = lambda x: getattr(x, \"__name__\", repr(x))\n            featurizer_funcs = dict((get_name(x), x) for x in featurizer_funcs)\n        self.featurizer_funcs = featurizer_funcs\n        self._self_loop = self_loop\n        self.concat = concat\n        self.name = name\n        for k in self.featurizer_funcs.keys():\n            self.feat_size(feat_name=k)\n        if self._self_loop:\n            self._feat_sizes[\"self_loop\"] = 1\n\n    def to_state_dict(self):\n\"\"\"Convert the Atom calculator to a state dict\n        Due to some constraints and cross-version compatibility,  the featurizer functions\n        need to be pickled and not just list\n        \"\"\"\n        state_dict = {}\n        state_dict[\"name\"] = self.__class__.__name__\n        state_dict[\"module\"] = self.__class__.__module__\n        state_dict[\"args\"] = self._input_kwargs\n\n        featurizer_fn_pickled = {}\n        for fname, ffunc in self.featurizer_funcs.items():\n            featurizer_fn_pickled[fname] = fn_to_hex(ffunc)\n        state_dict[\"args\"][\"featurizer_funcs\"] = featurizer_fn_pickled\n        state_dict[\"_molfeat_version\"] = MOLFEAT_VERSION\n        signature = inspect.signature(self.__init__)\n        val = {\n            k: v.default\n            for k, v in signature.parameters.items()\n            #    if v.default is not inspect.Parameter.empty\n        }\n        to_remove = [k for k in state_dict[\"args\"] if k not in val.keys()]\n        for k in to_remove:\n            state_dict[\"args\"].pop(k)\n        return state_dict\n\n    @classmethod\n    def from_state_dict(cls, state_dict, override_args: Optional[dict] = None):\n\"\"\"Create an instance of an atom calculator from a state dict\n\n        Args:\n            state_dict: state dictionary to use to create the atom calculator\n            overrride_args: optional dictionary of arguments to override the ones in the state dict\n                at construction of the new object\n        \"\"\"\n        # EN: at this moment, version compatibility is not enforced\n        cls_name = state_dict.get(\"name\", cls.__name__)\n        module_name = state_dict.get(\"module\", cls.__module__)\n        module = importlib.import_module(module_name)\n        klass = getattr(module, cls_name)\n\n        kwargs = state_dict[\"args\"].copy()\n        # now we need to unpickle the featurizer functions\n        featurizer_fn_pickled = kwargs.pop(\"featurizer_funcs\", None)\n        if featurizer_fn_pickled is not None:\n            featurizer_fn_loaded = {}\n            for k, v in featurizer_fn_pickled.items():\n                featurizer_fn_loaded[k] = hex_to_fn(v)\n            kwargs[\"featurizer_funcs\"] = featurizer_fn_loaded\n        kwargs.update(**(override_args or {}))\n        return klass(**kwargs)\n\n    def _concat(self, data_dict: Dict[str, Iterable]):\n\"\"\"Concatenate the data into a single value\n\n        Args:\n            data_dict: mapping of feature names to tensor/arrays\n        Returns:\n            concatenated_dict: a dict with a single key where all array have been concatenated\n        \"\"\"\n        return concat_dict(data_dict, new_name=self.name)\n\n    def feat_size(self, feat_name: Optional[str] = None):\n\"\"\"Get the feature size for ``feat_name``.\n\n        When there is only one feature, ``feat_name`` can be None.\n\n        Args:\n            feat_name: Feature for query.\n\n        Returns:\n            int: Feature size for the feature with name ``feat_name``. Default to None.\n        \"\"\"\n        if feat_name is None:\n            assert (\n                len(self.featurizer_funcs) == 1\n            ), \"feat_name should be provided if there are more than one features\"\n            feat_name = list(self.featurizer_funcs.keys())[0]\n\n        if feat_name not in self.featurizer_funcs:\n            raise ValueError(\n                \"Expect feat_name to be in {}, got {}\".format(\n                    list(self.featurizer_funcs.keys()), feat_name\n                )\n            )\n        if feat_name not in self._feat_sizes:\n            bond = self._toy_mol.GetBondWithIdx(0)\n            self._feat_sizes[feat_name] = len(self.featurizer_funcs[feat_name](bond))\n        return self._feat_sizes[feat_name]\n\n    def __len__(self):\n\"\"\"Get length of the property estimator\"\"\"\n        return sum(v for k, v in self._feat_sizes.items() if k != self.name)\n\n    def __call__(self, mol: Union[rdchem.Mol, str], dtype: Callable = None, **kwargs):\n\"\"\"Featurize all bonds in a molecule.\n\n        Args:\n            mol: the molecule of interest\n            dtype: requested data type\n\n        Returns:\n            dict: For each function in self.featurizer_funcs with the key ``k``,\n                store the computed feature under the key ``k``.\n        \"\"\"\n        mol = dm.to_mol(mol)\n        num_bonds = mol.GetNumBonds()\n        bond_features = defaultdict(list)\n\n        # Compute features for each bond\n        for i in range(num_bonds):\n            bond = mol.GetBondWithIdx(i)\n            for feat_name, feat_func in self.featurizer_funcs.items():\n                feat = feat_func(bond)\n                bond_features[feat_name].extend([feat, feat.copy()])\n\n        # Stack the features and convert them to float arrays\n        processed_features = dict()\n        for feat_name, feat_list in bond_features.items():\n            feat = np.stack(feat_list)\n            processed_features[feat_name] = feat\n\n        if self._self_loop and num_bonds &gt; 0:\n            num_atoms = mol.GetNumAtoms()\n            for feat_name in processed_features:\n                feats = processed_features[feat_name]\n                # add a new label that says the feat are not self loop\n                # feats = np.concatenate([feats, np.zeros((feats.shape[0], 1))], axis=1)\n                # add a label at the last position that says it's a selfloop\n                add_edges = np.zeros((num_atoms, feats.shape[1]))\n                # self_loop_feats[:, -1] = 1\n                feats = np.concatenate([feats, add_edges], axis=0)\n                processed_features[feat_name] = feats\n            self_loop_feats = np.concatenate(\n                [np.zeros((num_bonds * 2, 1)), np.ones((num_atoms, 1))]\n            )\n\n            processed_features[\"self_loop\"] = self_loop_feats\n\n        if self._self_loop and num_bonds == 0:\n            num_atoms = mol.GetNumAtoms()\n            old_concat = self.concat\n            self.concat = False\n            processed_features = self(self._toy_mol)\n            self.concat = old_concat\n            for feat_name in processed_features:\n                feats = processed_features[feat_name]\n                feats = np.zeros((num_atoms, feats.shape[1]))\n                processed_features[feat_name] = feats\n        if self.concat and (num_bonds &gt; 0 or self._self_loop):\n            processed_features = self._concat(processed_features)\n        if dtype is not None:\n            for feat_name, feat in processed_features.items():\n                feat = datatype.cast(feat, dtype=dtype)\n                processed_features[feat_name] = feat\n\n        return processed_features\n</code></pre>"},{"location":"api/molfeat.calc.html#molfeat.calc.bond.BondCalculator.DEFAULT_FEATURIZER","title":"<code>DEFAULT_FEATURIZER = {'bond_type_one_hot': bond_type_one_hot, 'bond_stereo_one_hot': bond_stereo_one_hot, 'bond_is_in_ring': bond_is_in_ring, 'bond_is_conjugated': bond_is_conjugated, 'bond_direction_one_hot': bond_direction_one_hot}</code>  <code>class-attribute</code>","text":""},{"location":"api/molfeat.calc.html#molfeat.calc.bond.BondCalculator.concat","title":"<code>concat = concat</code>  <code>instance-attribute</code>","text":""},{"location":"api/molfeat.calc.html#molfeat.calc.bond.BondCalculator.featurizer_funcs","title":"<code>featurizer_funcs = featurizer_funcs</code>  <code>instance-attribute</code>","text":""},{"location":"api/molfeat.calc.html#molfeat.calc.bond.BondCalculator.name","title":"<code>name = name</code>  <code>instance-attribute</code>","text":""},{"location":"api/molfeat.calc.html#molfeat.calc.bond.BondCalculator.__call__","title":"<code>__call__(mol, dtype=None, **kwargs)</code>","text":"<p>Featurize all bonds in a molecule.</p> <p>Parameters:</p> Name Type Description Default <code>mol</code> <code>Union[rdchem.Mol, str]</code> <p>the molecule of interest</p> required <code>dtype</code> <code>Callable</code> <p>requested data type</p> <code>None</code> <p>Returns:</p> Name Type Description <code>dict</code> <p>For each function in self.featurizer_funcs with the key <code>k</code>, store the computed feature under the key <code>k</code>.</p> Source code in <code>molfeat/calc/bond.py</code> <pre><code>def __call__(self, mol: Union[rdchem.Mol, str], dtype: Callable = None, **kwargs):\n\"\"\"Featurize all bonds in a molecule.\n\n    Args:\n        mol: the molecule of interest\n        dtype: requested data type\n\n    Returns:\n        dict: For each function in self.featurizer_funcs with the key ``k``,\n            store the computed feature under the key ``k``.\n    \"\"\"\n    mol = dm.to_mol(mol)\n    num_bonds = mol.GetNumBonds()\n    bond_features = defaultdict(list)\n\n    # Compute features for each bond\n    for i in range(num_bonds):\n        bond = mol.GetBondWithIdx(i)\n        for feat_name, feat_func in self.featurizer_funcs.items():\n            feat = feat_func(bond)\n            bond_features[feat_name].extend([feat, feat.copy()])\n\n    # Stack the features and convert them to float arrays\n    processed_features = dict()\n    for feat_name, feat_list in bond_features.items():\n        feat = np.stack(feat_list)\n        processed_features[feat_name] = feat\n\n    if self._self_loop and num_bonds &gt; 0:\n        num_atoms = mol.GetNumAtoms()\n        for feat_name in processed_features:\n            feats = processed_features[feat_name]\n            # add a new label that says the feat are not self loop\n            # feats = np.concatenate([feats, np.zeros((feats.shape[0], 1))], axis=1)\n            # add a label at the last position that says it's a selfloop\n            add_edges = np.zeros((num_atoms, feats.shape[1]))\n            # self_loop_feats[:, -1] = 1\n            feats = np.concatenate([feats, add_edges], axis=0)\n            processed_features[feat_name] = feats\n        self_loop_feats = np.concatenate(\n            [np.zeros((num_bonds * 2, 1)), np.ones((num_atoms, 1))]\n        )\n\n        processed_features[\"self_loop\"] = self_loop_feats\n\n    if self._self_loop and num_bonds == 0:\n        num_atoms = mol.GetNumAtoms()\n        old_concat = self.concat\n        self.concat = False\n        processed_features = self(self._toy_mol)\n        self.concat = old_concat\n        for feat_name in processed_features:\n            feats = processed_features[feat_name]\n            feats = np.zeros((num_atoms, feats.shape[1]))\n            processed_features[feat_name] = feats\n    if self.concat and (num_bonds &gt; 0 or self._self_loop):\n        processed_features = self._concat(processed_features)\n    if dtype is not None:\n        for feat_name, feat in processed_features.items():\n            feat = datatype.cast(feat, dtype=dtype)\n            processed_features[feat_name] = feat\n\n    return processed_features\n</code></pre>"},{"location":"api/molfeat.calc.html#molfeat.calc.bond.BondCalculator.__init__","title":"<code>__init__(featurizer_funcs=None, self_loop=False, concat=True, name='he')</code>","text":"<p>Init function of the bond property calculator</p> <p>Parameters:</p> Name Type Description Default <code>featurizer_funcs</code> <code>Union[list, dict]</code> <p>Mapping feature name to the featurization function.</p> <code>None</code> <code>self_loop</code> <code>bool</code> <p>Whether self loops will be added. Default to False. If True, an additional column of binary values to indicate the identity of self loops will be added. The other features of the self loops will be zero.</p> <code>False</code> <code>concat</code> <code>bool</code> <p>Whether to concat all the data into a single value in the output dict</p> <code>True</code> <code>name</code> <code>str</code> <p>Name of the key name of the concatenated features</p> <code>'he'</code> Source code in <code>molfeat/calc/bond.py</code> <pre><code>def __init__(\n    self,\n    featurizer_funcs: Union[list, dict] = None,\n    self_loop: bool = False,\n    concat: bool = True,\n    name: str = \"he\",\n):\n\"\"\"\n    Init function of the bond property calculator\n\n    Args:\n        featurizer_funcs: Mapping feature name to the featurization function.\n        self_loop: Whether self loops will be added. Default to False. If True, an additional\n            column of binary values to indicate the identity of self loops will be added.\n            The other features of the self loops will be zero.\n        concat: Whether to concat all the data into a single value in the output dict\n        name: Name of the key name of the concatenated features\n    \"\"\"\n    self._input_kwargs = locals().copy()\n    self._input_kwargs.pop(\"self\")\n    # remove featurizer_funcs too\n    self._input_kwargs.pop(\"featurizer_funcs\", None)\n    self._toy_mol = dm.to_mol(\"CO\")\n    self._feat_sizes = dict()\n    if featurizer_funcs is None:\n        featurizer_funcs = self.DEFAULT_FEATURIZER\n    if not isinstance(featurizer_funcs, dict):\n        get_name = lambda x: getattr(x, \"__name__\", repr(x))\n        featurizer_funcs = dict((get_name(x), x) for x in featurizer_funcs)\n    self.featurizer_funcs = featurizer_funcs\n    self._self_loop = self_loop\n    self.concat = concat\n    self.name = name\n    for k in self.featurizer_funcs.keys():\n        self.feat_size(feat_name=k)\n    if self._self_loop:\n        self._feat_sizes[\"self_loop\"] = 1\n</code></pre>"},{"location":"api/molfeat.calc.html#molfeat.calc.bond.BondCalculator.__len__","title":"<code>__len__()</code>","text":"<p>Get length of the property estimator</p> Source code in <code>molfeat/calc/bond.py</code> <pre><code>def __len__(self):\n\"\"\"Get length of the property estimator\"\"\"\n    return sum(v for k, v in self._feat_sizes.items() if k != self.name)\n</code></pre>"},{"location":"api/molfeat.calc.html#molfeat.calc.bond.BondCalculator.feat_size","title":"<code>feat_size(feat_name=None)</code>","text":"<p>Get the feature size for <code>feat_name</code>.</p> <p>When there is only one feature, <code>feat_name</code> can be None.</p> <p>Parameters:</p> Name Type Description Default <code>feat_name</code> <code>Optional[str]</code> <p>Feature for query.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>int</code> <p>Feature size for the feature with name <code>feat_name</code>. Default to None.</p> Source code in <code>molfeat/calc/bond.py</code> <pre><code>def feat_size(self, feat_name: Optional[str] = None):\n\"\"\"Get the feature size for ``feat_name``.\n\n    When there is only one feature, ``feat_name`` can be None.\n\n    Args:\n        feat_name: Feature for query.\n\n    Returns:\n        int: Feature size for the feature with name ``feat_name``. Default to None.\n    \"\"\"\n    if feat_name is None:\n        assert (\n            len(self.featurizer_funcs) == 1\n        ), \"feat_name should be provided if there are more than one features\"\n        feat_name = list(self.featurizer_funcs.keys())[0]\n\n    if feat_name not in self.featurizer_funcs:\n        raise ValueError(\n            \"Expect feat_name to be in {}, got {}\".format(\n                list(self.featurizer_funcs.keys()), feat_name\n            )\n        )\n    if feat_name not in self._feat_sizes:\n        bond = self._toy_mol.GetBondWithIdx(0)\n        self._feat_sizes[feat_name] = len(self.featurizer_funcs[feat_name](bond))\n    return self._feat_sizes[feat_name]\n</code></pre>"},{"location":"api/molfeat.calc.html#molfeat.calc.bond.BondCalculator.from_state_dict","title":"<code>from_state_dict(state_dict, override_args=None)</code>  <code>classmethod</code>","text":"<p>Create an instance of an atom calculator from a state dict</p> <p>Parameters:</p> Name Type Description Default <code>state_dict</code> <p>state dictionary to use to create the atom calculator</p> required <code>overrride_args</code> <p>optional dictionary of arguments to override the ones in the state dict at construction of the new object</p> required Source code in <code>molfeat/calc/bond.py</code> <pre><code>@classmethod\ndef from_state_dict(cls, state_dict, override_args: Optional[dict] = None):\n\"\"\"Create an instance of an atom calculator from a state dict\n\n    Args:\n        state_dict: state dictionary to use to create the atom calculator\n        overrride_args: optional dictionary of arguments to override the ones in the state dict\n            at construction of the new object\n    \"\"\"\n    # EN: at this moment, version compatibility is not enforced\n    cls_name = state_dict.get(\"name\", cls.__name__)\n    module_name = state_dict.get(\"module\", cls.__module__)\n    module = importlib.import_module(module_name)\n    klass = getattr(module, cls_name)\n\n    kwargs = state_dict[\"args\"].copy()\n    # now we need to unpickle the featurizer functions\n    featurizer_fn_pickled = kwargs.pop(\"featurizer_funcs\", None)\n    if featurizer_fn_pickled is not None:\n        featurizer_fn_loaded = {}\n        for k, v in featurizer_fn_pickled.items():\n            featurizer_fn_loaded[k] = hex_to_fn(v)\n        kwargs[\"featurizer_funcs\"] = featurizer_fn_loaded\n    kwargs.update(**(override_args or {}))\n    return klass(**kwargs)\n</code></pre>"},{"location":"api/molfeat.calc.html#molfeat.calc.bond.BondCalculator.to_state_dict","title":"<code>to_state_dict()</code>","text":"<p>Convert the Atom calculator to a state dict Due to some constraints and cross-version compatibility,  the featurizer functions need to be pickled and not just list</p> Source code in <code>molfeat/calc/bond.py</code> <pre><code>def to_state_dict(self):\n\"\"\"Convert the Atom calculator to a state dict\n    Due to some constraints and cross-version compatibility,  the featurizer functions\n    need to be pickled and not just list\n    \"\"\"\n    state_dict = {}\n    state_dict[\"name\"] = self.__class__.__name__\n    state_dict[\"module\"] = self.__class__.__module__\n    state_dict[\"args\"] = self._input_kwargs\n\n    featurizer_fn_pickled = {}\n    for fname, ffunc in self.featurizer_funcs.items():\n        featurizer_fn_pickled[fname] = fn_to_hex(ffunc)\n    state_dict[\"args\"][\"featurizer_funcs\"] = featurizer_fn_pickled\n    state_dict[\"_molfeat_version\"] = MOLFEAT_VERSION\n    signature = inspect.signature(self.__init__)\n    val = {\n        k: v.default\n        for k, v in signature.parameters.items()\n        #    if v.default is not inspect.Parameter.empty\n    }\n    to_remove = [k for k in state_dict[\"args\"] if k not in val.keys()]\n    for k in to_remove:\n        state_dict[\"args\"].pop(k)\n    return state_dict\n</code></pre>"},{"location":"api/molfeat.calc.html#molfeat.calc.bond.DGLCanonicalBondCalculator","title":"<code>DGLCanonicalBondCalculator</code>","text":"<p>         Bases: <code>BondCalculator</code></p> Source code in <code>molfeat/calc/bond.py</code> <pre><code>class DGLCanonicalBondCalculator(BondCalculator):\n    DEFAULT_FEATURIZER = {\n        \"bond_type_one_hot\": bond_type_one_hot,\n        \"bond_is_conjugated\": bond_is_conjugated,\n        \"bond_is_in_ring\": bond_is_in_ring,\n        \"bond_stereo_one_hot\": bond_stereo_one_hot,\n    }\n\n    def _concat(self, data_dict: Dict[str, Iterable]):\n\"\"\"Concatenate the data into a single value\n\n        Args:\n            data_dict: mapping of feature names to tensor/arrays\n        Returns:\n            concatenated_dict: a dict with a single key where all array have been concatenated\n        \"\"\"\n        return concat_dict(data_dict, new_name=self.name, order=list(self.featurizer_funcs.keys()))\n</code></pre>"},{"location":"api/molfeat.calc.html#molfeat.calc.bond.DGLCanonicalBondCalculator.DEFAULT_FEATURIZER","title":"<code>DEFAULT_FEATURIZER = {'bond_type_one_hot': bond_type_one_hot, 'bond_is_conjugated': bond_is_conjugated, 'bond_is_in_ring': bond_is_in_ring, 'bond_stereo_one_hot': bond_stereo_one_hot}</code>  <code>class-attribute</code>","text":""},{"location":"api/molfeat.calc.html#molfeat.calc.bond.DGLWeaveEdgeCalculator","title":"<code>DGLWeaveEdgeCalculator</code>","text":"<p>         Bases: <code>EdgeMatCalculator</code></p> <p>Edge featurizer used by WeaveNets</p> <p>The edge featurization is introduced in <code>Molecular Graph Convolutions: Moving Beyond Fingerprints &lt;https://arxiv.org/abs/1603.00856&gt;</code>__.</p> <p>This featurization is performed for a complete graph of atoms with self loops added, which considers the following default:</p> <ul> <li>Number of bonds between each pairs of atoms</li> <li>One-hot encoding of bond type if a bond exists between a pair of atoms</li> <li>Whether a pair of atoms belongs to a same ring</li> </ul> Source code in <code>molfeat/calc/bond.py</code> <pre><code>class DGLWeaveEdgeCalculator(EdgeMatCalculator):\n\"\"\"Edge featurizer used by WeaveNets\n\n    The edge featurization is introduced in `Molecular Graph Convolutions:\n    Moving Beyond Fingerprints &lt;https://arxiv.org/abs/1603.00856&gt;`__.\n\n    This featurization is performed for a complete graph of atoms with self loops added,\n    which considers the following default:\n\n    * Number of bonds between each pairs of atoms\n    * One-hot encoding of bond type if a bond exists between a pair of atoms\n    * Whether a pair of atoms belongs to a same ring\n\n    \"\"\"\n\n    DEFAULT_FEATURIZER = {}\n    DEFAULT_PAIRWISE_FEATURIZER = {\n        \"pairwise_dist_indicator\": pairwise_dist_indicator,\n        \"pairwise_bond_indicator\": pairwise_bond_indicator,\n        \"pairwise_ring_membership\": pairwise_ring_membership,\n    }\n\n    def _concat(self, data_dict: Dict[str, Iterable]):\n\"\"\"Concatenate the data into a single value\n\n        Args:\n            data_dict: mapping of feature names to tensor/arrays\n        Returns:\n            concatenated_dict: a dict with a single key where all array have been concatenated\n        \"\"\"\n\n        # To reproduce DGLDefault, we need to keep the order of dict insertion\n        return concat_dict(\n            data_dict, new_name=self.name, order=list(self.pairwise_atom_funcs.keys())\n        )\n</code></pre>"},{"location":"api/molfeat.calc.html#molfeat.calc.bond.DGLWeaveEdgeCalculator.DEFAULT_FEATURIZER","title":"<code>DEFAULT_FEATURIZER = {}</code>  <code>class-attribute</code>","text":""},{"location":"api/molfeat.calc.html#molfeat.calc.bond.DGLWeaveEdgeCalculator.DEFAULT_PAIRWISE_FEATURIZER","title":"<code>DEFAULT_PAIRWISE_FEATURIZER = {'pairwise_dist_indicator': pairwise_dist_indicator, 'pairwise_bond_indicator': pairwise_bond_indicator, 'pairwise_ring_membership': pairwise_ring_membership}</code>  <code>class-attribute</code>","text":""},{"location":"api/molfeat.calc.html#molfeat.calc.bond.EdgeMatCalculator","title":"<code>EdgeMatCalculator</code>","text":"<p>         Bases: <code>BondCalculator</code></p> <p>Generate edge featurizer matrix</p> Source code in <code>molfeat/calc/bond.py</code> <pre><code>class EdgeMatCalculator(BondCalculator):\n\"\"\"Generate edge featurizer matrix\"\"\"\n\n    DEFAULT_PAIRWISE_FEATURIZER = {\n        \"pairwise_2D_dist\": pairwise_2D_dist,\n        # \"pairwise_3D_dist\": pairwise_3D_dist,\n        \"pairwise_ring_membership\": pairwise_ring_membership,\n    }\n\n    def __init__(\n        self,\n        featurizer_funcs: Union[list, dict] = None,\n        pairwise_atom_funcs: Union[list, dict, str] = \"default\",\n        name: str = \"he\",\n    ):\n\"\"\"\n        Init function of the edge matrix property calculator\n\n        Args:\n            featurizer_funcs: Mapping feature name to the featurization function.\n            pairwise_atom_funcs: Mapping feature name to pairwise featurization function.\n                Use the keywords \"default\" for the default values\n        \"\"\"\n        if pairwise_atom_funcs == \"default\":\n            pairwise_atom_funcs = self.DEFAULT_PAIRWISE_FEATURIZER\n        if not isinstance(pairwise_atom_funcs, dict):\n            get_name = lambda x: getattr(x, \"__name__\", repr(x))\n            pairwise_atom_funcs = dict((get_name(x), x) for x in pairwise_atom_funcs)\n        self.pairwise_atom_funcs = pairwise_atom_funcs\n        super().__init__(featurizer_funcs=featurizer_funcs, concat=True, name=name)\n        # add conf data to toy mol\n        self._toy_mol = dm.conformers.generate(self._toy_mol, n_confs=1, minimize_energy=False)\n        for k in self.pairwise_atom_funcs.keys():\n            self.feat_size(feat_name=k)\n\n    def to_state_dict(self):\n\"\"\"Convert the Atom calculator to a state dict\n        Due to some constraints and cross-version compatibility,  the featurizer functions\n        need to be pickled and not just list\n        \"\"\"\n        state_dict = super().to_state_dict()\n        # repeat for the pairwise one\n        pairwise_atom_fn_pickled = {}\n        for fname, ffunc in self.pairwise_atom_funcs.items():\n            pairwise_atom_fn_pickled[fname] = fn_to_hex(ffunc)\n        state_dict[\"args\"][\"pairwise_atom_funcs\"] = pairwise_atom_fn_pickled\n        return state_dict\n\n    @classmethod\n    def from_state_dict(cls, state_dict, override_args: Optional[dict] = None):\n\"\"\"Create an instance of an atom calculator from a state dict\n\n        Args:\n            state_dict: state dictionary to use to create the atom calculator\n            overrride_args: optional dictionary of arguments to override the ones in the state dict\n                at construction of the new object\n        \"\"\"\n        # EN: at this moment, version compatibility is not enforced\n        cls_name = state_dict.get(\"name\", cls.__name__)\n        module_name = state_dict.get(\"module\", cls.__module__)\n        module = importlib.import_module(module_name)\n        klass = getattr(module, cls_name)\n\n        kwargs = state_dict[\"args\"].copy()\n        # now we need to unpickle the featurizer functions\n        featurizer_fn_pickled = kwargs.pop(\"featurizer_funcs\", None)\n        if featurizer_fn_pickled is not None:\n            featurizer_fn_loaded = {}\n            for k, v in featurizer_fn_pickled.items():\n                featurizer_fn_loaded[k] = hex_to_fn(v)\n            kwargs[\"featurizer_funcs\"] = featurizer_fn_loaded\n\n        pairwise_atom_fn_pickled = kwargs.pop(\"pairwise_atom_funcs\", None)\n        if pairwise_atom_fn_pickled is not None:\n            pairwise_atom_fn_loaded = {}\n            for k, v in pairwise_atom_fn_pickled.items():\n                pairwise_atom_fn_loaded[k] = hex_to_fn(v)\n            kwargs[\"pairwise_atom_funcs\"] = pairwise_atom_fn_loaded\n        kwargs.update(**(override_args or {}))\n        return klass(**kwargs)\n\n    def feat_size(self, feat_name: Optional[str] = None):\n\"\"\"Get the feature size for ``feat_name``.\n\n        Args:\n            feat_name: Feature for query.\n\n        Returns:\n            int: Feature size for the feature with name ``feat_name``. Default to None.\n        \"\"\"\n        if feat_name not in self.featurizer_funcs and feat_name not in self.pairwise_atom_funcs:\n            raise ValueError(\n                \"Expect feat_name to be in {}, got {}\".format(\n                    list(self.featurizer_funcs.keys()), feat_name\n                )\n            )\n        if feat_name not in self._feat_sizes:\n            if feat_name in self.featurizer_funcs:\n                bond = self._toy_mol.GetBondWithIdx(0)\n                self._feat_sizes[feat_name] = len(self.featurizer_funcs[feat_name](bond))\n            elif feat_name in self.pairwise_atom_funcs:\n                self._feat_sizes[feat_name] = self.pairwise_atom_funcs[feat_name](\n                    self._toy_mol\n                ).shape[-1]\n            else:\n                raise ValueError(f\"Feature name {feat_name} is not defined !\")\n        return self._feat_sizes[feat_name]\n\n    def __call__(self, mol: Union[rdchem.Mol, str], dtype: Callable = None, flat: bool = True):\n\"\"\"Featurize all bonds in a molecule.\n\n        Args:\n            mol: the molecule of interest\n            dtype: requested data type\n            flat: whether to return a collapsed N^2, M or a N, N, M matrix\n\n        Returns:\n            dict: For each function in self.featurizer_funcs with the key ``k``,\n                store the computed feature under the key ``k``.\n        \"\"\"\n\n        mol = dm.to_mol(mol)\n        num_bonds = mol.GetNumBonds()\n        num_atoms = mol.GetNumAtoms()\n        feat_size = len(self)\n        edge_matrix = None\n\n        if self.pairwise_atom_funcs is not None:\n            feat_size -= sum(self._feat_sizes[x] for x in self.pairwise_atom_funcs.keys())\n        if self.featurizer_funcs is not None and len(self.featurizer_funcs) &gt; 0:\n            edge_matrix = np.zeros((num_atoms, num_atoms, feat_size))\n            # Compute features for each bond\n            for i in range(num_bonds):\n                bond = mol.GetBondWithIdx(i)\n                a_idx_1 = bond.GetBeginAtomIdx()\n                a_idx_2 = bond.GetEndAtomIdx()\n                bond_features = defaultdict(list)\n                for feat_name, feat_func in self.featurizer_funcs.items():\n                    feat = feat_func(bond)\n                    bond_features[feat_name].extend([feat])\n                bond_features = self._concat(bond_features)[self.name]\n                edge_matrix[a_idx_1, a_idx_2] = bond_features\n                edge_matrix[a_idx_2, a_idx_1] = bond_features\n\n            edge_matrix = edge_matrix.reshape(-1, feat_size)\n        if self.pairwise_atom_funcs is not None:\n            pwise_features = dict()\n            for pname, pfunc in self.pairwise_atom_funcs.items():\n                pwise_features[pname] = pfunc(mol)\n            pwise_features = self._concat(pwise_features)[self.name]\n            if edge_matrix is not None:\n                edge_matrix = np.concatenate([edge_matrix, pwise_features], axis=-1)\n            else:\n                edge_matrix = pwise_features\n        if not flat:\n            edge_matrix = edge_matrix.reshape(num_atoms, num_atoms, -1)\n        if dtype is not None:\n            edge_matrix = datatype.cast(edge_matrix, dtype=dtype)\n        return {self.name: edge_matrix}\n</code></pre>"},{"location":"api/molfeat.calc.html#molfeat.calc.bond.EdgeMatCalculator.DEFAULT_PAIRWISE_FEATURIZER","title":"<code>DEFAULT_PAIRWISE_FEATURIZER = {'pairwise_2D_dist': pairwise_2D_dist, 'pairwise_ring_membership': pairwise_ring_membership}</code>  <code>class-attribute</code>","text":""},{"location":"api/molfeat.calc.html#molfeat.calc.bond.EdgeMatCalculator.pairwise_atom_funcs","title":"<code>pairwise_atom_funcs = pairwise_atom_funcs</code>  <code>instance-attribute</code>","text":""},{"location":"api/molfeat.calc.html#molfeat.calc.bond.EdgeMatCalculator.__call__","title":"<code>__call__(mol, dtype=None, flat=True)</code>","text":"<p>Featurize all bonds in a molecule.</p> <p>Parameters:</p> Name Type Description Default <code>mol</code> <code>Union[rdchem.Mol, str]</code> <p>the molecule of interest</p> required <code>dtype</code> <code>Callable</code> <p>requested data type</p> <code>None</code> <code>flat</code> <code>bool</code> <p>whether to return a collapsed N^2, M or a N, N, M matrix</p> <code>True</code> <p>Returns:</p> Name Type Description <code>dict</code> <p>For each function in self.featurizer_funcs with the key <code>k</code>, store the computed feature under the key <code>k</code>.</p> Source code in <code>molfeat/calc/bond.py</code> <pre><code>def __call__(self, mol: Union[rdchem.Mol, str], dtype: Callable = None, flat: bool = True):\n\"\"\"Featurize all bonds in a molecule.\n\n    Args:\n        mol: the molecule of interest\n        dtype: requested data type\n        flat: whether to return a collapsed N^2, M or a N, N, M matrix\n\n    Returns:\n        dict: For each function in self.featurizer_funcs with the key ``k``,\n            store the computed feature under the key ``k``.\n    \"\"\"\n\n    mol = dm.to_mol(mol)\n    num_bonds = mol.GetNumBonds()\n    num_atoms = mol.GetNumAtoms()\n    feat_size = len(self)\n    edge_matrix = None\n\n    if self.pairwise_atom_funcs is not None:\n        feat_size -= sum(self._feat_sizes[x] for x in self.pairwise_atom_funcs.keys())\n    if self.featurizer_funcs is not None and len(self.featurizer_funcs) &gt; 0:\n        edge_matrix = np.zeros((num_atoms, num_atoms, feat_size))\n        # Compute features for each bond\n        for i in range(num_bonds):\n            bond = mol.GetBondWithIdx(i)\n            a_idx_1 = bond.GetBeginAtomIdx()\n            a_idx_2 = bond.GetEndAtomIdx()\n            bond_features = defaultdict(list)\n            for feat_name, feat_func in self.featurizer_funcs.items():\n                feat = feat_func(bond)\n                bond_features[feat_name].extend([feat])\n            bond_features = self._concat(bond_features)[self.name]\n            edge_matrix[a_idx_1, a_idx_2] = bond_features\n            edge_matrix[a_idx_2, a_idx_1] = bond_features\n\n        edge_matrix = edge_matrix.reshape(-1, feat_size)\n    if self.pairwise_atom_funcs is not None:\n        pwise_features = dict()\n        for pname, pfunc in self.pairwise_atom_funcs.items():\n            pwise_features[pname] = pfunc(mol)\n        pwise_features = self._concat(pwise_features)[self.name]\n        if edge_matrix is not None:\n            edge_matrix = np.concatenate([edge_matrix, pwise_features], axis=-1)\n        else:\n            edge_matrix = pwise_features\n    if not flat:\n        edge_matrix = edge_matrix.reshape(num_atoms, num_atoms, -1)\n    if dtype is not None:\n        edge_matrix = datatype.cast(edge_matrix, dtype=dtype)\n    return {self.name: edge_matrix}\n</code></pre>"},{"location":"api/molfeat.calc.html#molfeat.calc.bond.EdgeMatCalculator.__init__","title":"<code>__init__(featurizer_funcs=None, pairwise_atom_funcs='default', name='he')</code>","text":"<p>Init function of the edge matrix property calculator</p> <p>Parameters:</p> Name Type Description Default <code>featurizer_funcs</code> <code>Union[list, dict]</code> <p>Mapping feature name to the featurization function.</p> <code>None</code> <code>pairwise_atom_funcs</code> <code>Union[list, dict, str]</code> <p>Mapping feature name to pairwise featurization function. Use the keywords \"default\" for the default values</p> <code>'default'</code> Source code in <code>molfeat/calc/bond.py</code> <pre><code>def __init__(\n    self,\n    featurizer_funcs: Union[list, dict] = None,\n    pairwise_atom_funcs: Union[list, dict, str] = \"default\",\n    name: str = \"he\",\n):\n\"\"\"\n    Init function of the edge matrix property calculator\n\n    Args:\n        featurizer_funcs: Mapping feature name to the featurization function.\n        pairwise_atom_funcs: Mapping feature name to pairwise featurization function.\n            Use the keywords \"default\" for the default values\n    \"\"\"\n    if pairwise_atom_funcs == \"default\":\n        pairwise_atom_funcs = self.DEFAULT_PAIRWISE_FEATURIZER\n    if not isinstance(pairwise_atom_funcs, dict):\n        get_name = lambda x: getattr(x, \"__name__\", repr(x))\n        pairwise_atom_funcs = dict((get_name(x), x) for x in pairwise_atom_funcs)\n    self.pairwise_atom_funcs = pairwise_atom_funcs\n    super().__init__(featurizer_funcs=featurizer_funcs, concat=True, name=name)\n    # add conf data to toy mol\n    self._toy_mol = dm.conformers.generate(self._toy_mol, n_confs=1, minimize_energy=False)\n    for k in self.pairwise_atom_funcs.keys():\n        self.feat_size(feat_name=k)\n</code></pre>"},{"location":"api/molfeat.calc.html#molfeat.calc.bond.EdgeMatCalculator.feat_size","title":"<code>feat_size(feat_name=None)</code>","text":"<p>Get the feature size for <code>feat_name</code>.</p> <p>Parameters:</p> Name Type Description Default <code>feat_name</code> <code>Optional[str]</code> <p>Feature for query.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>int</code> <p>Feature size for the feature with name <code>feat_name</code>. Default to None.</p> Source code in <code>molfeat/calc/bond.py</code> <pre><code>def feat_size(self, feat_name: Optional[str] = None):\n\"\"\"Get the feature size for ``feat_name``.\n\n    Args:\n        feat_name: Feature for query.\n\n    Returns:\n        int: Feature size for the feature with name ``feat_name``. Default to None.\n    \"\"\"\n    if feat_name not in self.featurizer_funcs and feat_name not in self.pairwise_atom_funcs:\n        raise ValueError(\n            \"Expect feat_name to be in {}, got {}\".format(\n                list(self.featurizer_funcs.keys()), feat_name\n            )\n        )\n    if feat_name not in self._feat_sizes:\n        if feat_name in self.featurizer_funcs:\n            bond = self._toy_mol.GetBondWithIdx(0)\n            self._feat_sizes[feat_name] = len(self.featurizer_funcs[feat_name](bond))\n        elif feat_name in self.pairwise_atom_funcs:\n            self._feat_sizes[feat_name] = self.pairwise_atom_funcs[feat_name](\n                self._toy_mol\n            ).shape[-1]\n        else:\n            raise ValueError(f\"Feature name {feat_name} is not defined !\")\n    return self._feat_sizes[feat_name]\n</code></pre>"},{"location":"api/molfeat.calc.html#molfeat.calc.bond.EdgeMatCalculator.from_state_dict","title":"<code>from_state_dict(state_dict, override_args=None)</code>  <code>classmethod</code>","text":"<p>Create an instance of an atom calculator from a state dict</p> <p>Parameters:</p> Name Type Description Default <code>state_dict</code> <p>state dictionary to use to create the atom calculator</p> required <code>overrride_args</code> <p>optional dictionary of arguments to override the ones in the state dict at construction of the new object</p> required Source code in <code>molfeat/calc/bond.py</code> <pre><code>@classmethod\ndef from_state_dict(cls, state_dict, override_args: Optional[dict] = None):\n\"\"\"Create an instance of an atom calculator from a state dict\n\n    Args:\n        state_dict: state dictionary to use to create the atom calculator\n        overrride_args: optional dictionary of arguments to override the ones in the state dict\n            at construction of the new object\n    \"\"\"\n    # EN: at this moment, version compatibility is not enforced\n    cls_name = state_dict.get(\"name\", cls.__name__)\n    module_name = state_dict.get(\"module\", cls.__module__)\n    module = importlib.import_module(module_name)\n    klass = getattr(module, cls_name)\n\n    kwargs = state_dict[\"args\"].copy()\n    # now we need to unpickle the featurizer functions\n    featurizer_fn_pickled = kwargs.pop(\"featurizer_funcs\", None)\n    if featurizer_fn_pickled is not None:\n        featurizer_fn_loaded = {}\n        for k, v in featurizer_fn_pickled.items():\n            featurizer_fn_loaded[k] = hex_to_fn(v)\n        kwargs[\"featurizer_funcs\"] = featurizer_fn_loaded\n\n    pairwise_atom_fn_pickled = kwargs.pop(\"pairwise_atom_funcs\", None)\n    if pairwise_atom_fn_pickled is not None:\n        pairwise_atom_fn_loaded = {}\n        for k, v in pairwise_atom_fn_pickled.items():\n            pairwise_atom_fn_loaded[k] = hex_to_fn(v)\n        kwargs[\"pairwise_atom_funcs\"] = pairwise_atom_fn_loaded\n    kwargs.update(**(override_args or {}))\n    return klass(**kwargs)\n</code></pre>"},{"location":"api/molfeat.calc.html#molfeat.calc.bond.EdgeMatCalculator.to_state_dict","title":"<code>to_state_dict()</code>","text":"<p>Convert the Atom calculator to a state dict Due to some constraints and cross-version compatibility,  the featurizer functions need to be pickled and not just list</p> Source code in <code>molfeat/calc/bond.py</code> <pre><code>def to_state_dict(self):\n\"\"\"Convert the Atom calculator to a state dict\n    Due to some constraints and cross-version compatibility,  the featurizer functions\n    need to be pickled and not just list\n    \"\"\"\n    state_dict = super().to_state_dict()\n    # repeat for the pairwise one\n    pairwise_atom_fn_pickled = {}\n    for fname, ffunc in self.pairwise_atom_funcs.items():\n        pairwise_atom_fn_pickled[fname] = fn_to_hex(ffunc)\n    state_dict[\"args\"][\"pairwise_atom_funcs\"] = pairwise_atom_fn_pickled\n    return state_dict\n</code></pre>"},{"location":"api/molfeat.trans.base.html","title":"molfeat.trans.base","text":""},{"location":"api/molfeat.trans.base.html#molfeat.trans.base.BaseFeaturizer","title":"<code>BaseFeaturizer</code>","text":"<p>         Bases: <code>BaseEstimator</code></p> <p>Molecule featurizer base class that needs to be implemented by all featurizers. This featurizer is compatible with scikit-learn estimators and thus can be plugged into a pipeline</p> Source code in <code>molfeat/trans/base.py</code> <pre><code>class BaseFeaturizer(BaseEstimator):\n\"\"\"\n    Molecule featurizer base class that needs to be implemented by all featurizers.\n    This featurizer is compatible with scikit-learn estimators and thus can be plugged into a pipeline\n    \"\"\"\n\n    def __init__(\n        self,\n        n_jobs: int = 1,\n        verbose: bool = True,\n        dtype: Optional[Union[str, Callable]] = None,\n        parallel_kwargs: Optional[Dict[str, Any]] = None,\n        **params,\n    ):\n        self._n_jobs = n_jobs\n        self.dtype = dtype\n        self.verbose = verbose\n        self.parallel_kwargs = parallel_kwargs or {}\n        for k, v in params.items():\n            setattr(self, k, v)\n        self._input_params = dict(n_jobs=n_jobs, dtype=dtype, verbose=verbose, **params)\n\n    @property\n    def n_jobs(self):\n\"\"\"Get the number of concurrent jobs to run with this featurizer\"\"\"\n        return self._n_jobs\n\n    @n_jobs.setter\n    def n_jobs(self, val):\n        if val &gt;= 1:\n            self._n_jobs = val\n        elif val == -1:\n            self._n_jobs = joblib.cpu_count()\n\n    def _get_param_names(self):\n\"\"\"Get parameter names for the estimator\"\"\"\n        return self._input_params.keys()\n\n    def _update_params(self):\n\"\"\"Update parameters of the current estimator\"\"\"\n        ...\n\n    def set_params(self, **params):\n\"\"\"Set the parameters of this estimator.\n\n        Returns:\n            self: estimator instance\n        \"\"\"\n        super().set_params(**params)\n        for k, v in params.items():\n            if k in self._input_params:\n                self._input_params[k] = v\n        self._update_params()\n        return self\n\n    def copy(self):\n\"\"\"Return a copy of this object.\"\"\"\n        copy_obj = self.__class__(**self._input_params)\n        for k, v in self.__dict__.items():\n            if not hasattr(copy_obj, k):\n                setattr(copy_obj, k, copy.deepcopy(v))\n        return copy_obj\n\n    def preprocess(self, inputs: list, labels: Optional[list] = None):\n\"\"\"Preprocess input\n\n        Args:\n            inputs: inputs to preprocess\n            labels: labels to preprocess (optional)\n\n        Returns:\n            processed: pre-processed input list\n        \"\"\"\n        return inputs, labels\n\n    def postprocess(self, outputs: list):\n\"\"\"Postprocess output\n\n        Args:\n            outputs: featurized output to postprocess\n\n        Returns:\n            processed: post-processed output list\n        \"\"\"\n        return outputs\n\n    def get_collate_fn(self, *args, **kwargs):\n\"\"\"\n        Get collate function of this featurizer. In the implementation of this function\n        you should set the relevant attributes or argument of the underlying collate function\n        (e.g via functools.partial) and return the function itself\n\n        Returns:\n            fn: Collate function for pytorch or None\n        \"\"\"\n        return None\n</code></pre>"},{"location":"api/molfeat.trans.base.html#molfeat.trans.base.BaseFeaturizer.dtype","title":"<code>dtype = dtype</code>  <code>instance-attribute</code>","text":""},{"location":"api/molfeat.trans.base.html#molfeat.trans.base.BaseFeaturizer.n_jobs","title":"<code>n_jobs</code>  <code>writable</code> <code>property</code>","text":"<p>Get the number of concurrent jobs to run with this featurizer</p>"},{"location":"api/molfeat.trans.base.html#molfeat.trans.base.BaseFeaturizer.parallel_kwargs","title":"<code>parallel_kwargs = parallel_kwargs or {}</code>  <code>instance-attribute</code>","text":""},{"location":"api/molfeat.trans.base.html#molfeat.trans.base.BaseFeaturizer.verbose","title":"<code>verbose = verbose</code>  <code>instance-attribute</code>","text":""},{"location":"api/molfeat.trans.base.html#molfeat.trans.base.BaseFeaturizer.__init__","title":"<code>__init__(n_jobs=1, verbose=True, dtype=None, parallel_kwargs=None, **params)</code>","text":"Source code in <code>molfeat/trans/base.py</code> <pre><code>def __init__(\n    self,\n    n_jobs: int = 1,\n    verbose: bool = True,\n    dtype: Optional[Union[str, Callable]] = None,\n    parallel_kwargs: Optional[Dict[str, Any]] = None,\n    **params,\n):\n    self._n_jobs = n_jobs\n    self.dtype = dtype\n    self.verbose = verbose\n    self.parallel_kwargs = parallel_kwargs or {}\n    for k, v in params.items():\n        setattr(self, k, v)\n    self._input_params = dict(n_jobs=n_jobs, dtype=dtype, verbose=verbose, **params)\n</code></pre>"},{"location":"api/molfeat.trans.base.html#molfeat.trans.base.BaseFeaturizer.copy","title":"<code>copy()</code>","text":"<p>Return a copy of this object.</p> Source code in <code>molfeat/trans/base.py</code> <pre><code>def copy(self):\n\"\"\"Return a copy of this object.\"\"\"\n    copy_obj = self.__class__(**self._input_params)\n    for k, v in self.__dict__.items():\n        if not hasattr(copy_obj, k):\n            setattr(copy_obj, k, copy.deepcopy(v))\n    return copy_obj\n</code></pre>"},{"location":"api/molfeat.trans.base.html#molfeat.trans.base.BaseFeaturizer.get_collate_fn","title":"<code>get_collate_fn(*args, **kwargs)</code>","text":"<p>Get collate function of this featurizer. In the implementation of this function you should set the relevant attributes or argument of the underlying collate function (e.g via functools.partial) and return the function itself</p> <p>Returns:</p> Name Type Description <code>fn</code> <p>Collate function for pytorch or None</p> Source code in <code>molfeat/trans/base.py</code> <pre><code>def get_collate_fn(self, *args, **kwargs):\n\"\"\"\n    Get collate function of this featurizer. In the implementation of this function\n    you should set the relevant attributes or argument of the underlying collate function\n    (e.g via functools.partial) and return the function itself\n\n    Returns:\n        fn: Collate function for pytorch or None\n    \"\"\"\n    return None\n</code></pre>"},{"location":"api/molfeat.trans.base.html#molfeat.trans.base.BaseFeaturizer.postprocess","title":"<code>postprocess(outputs)</code>","text":"<p>Postprocess output</p> <p>Parameters:</p> Name Type Description Default <code>outputs</code> <code>list</code> <p>featurized output to postprocess</p> required <p>Returns:</p> Name Type Description <code>processed</code> <p>post-processed output list</p> Source code in <code>molfeat/trans/base.py</code> <pre><code>def postprocess(self, outputs: list):\n\"\"\"Postprocess output\n\n    Args:\n        outputs: featurized output to postprocess\n\n    Returns:\n        processed: post-processed output list\n    \"\"\"\n    return outputs\n</code></pre>"},{"location":"api/molfeat.trans.base.html#molfeat.trans.base.BaseFeaturizer.preprocess","title":"<code>preprocess(inputs, labels=None)</code>","text":"<p>Preprocess input</p> <p>Parameters:</p> Name Type Description Default <code>inputs</code> <code>list</code> <p>inputs to preprocess</p> required <code>labels</code> <code>Optional[list]</code> <p>labels to preprocess (optional)</p> <code>None</code> <p>Returns:</p> Name Type Description <code>processed</code> <p>pre-processed input list</p> Source code in <code>molfeat/trans/base.py</code> <pre><code>def preprocess(self, inputs: list, labels: Optional[list] = None):\n\"\"\"Preprocess input\n\n    Args:\n        inputs: inputs to preprocess\n        labels: labels to preprocess (optional)\n\n    Returns:\n        processed: pre-processed input list\n    \"\"\"\n    return inputs, labels\n</code></pre>"},{"location":"api/molfeat.trans.base.html#molfeat.trans.base.BaseFeaturizer.set_params","title":"<code>set_params(**params)</code>","text":"<p>Set the parameters of this estimator.</p> <p>Returns:</p> Name Type Description <code>self</code> <p>estimator instance</p> Source code in <code>molfeat/trans/base.py</code> <pre><code>def set_params(self, **params):\n\"\"\"Set the parameters of this estimator.\n\n    Returns:\n        self: estimator instance\n    \"\"\"\n    super().set_params(**params)\n    for k, v in params.items():\n        if k in self._input_params:\n            self._input_params[k] = v\n    self._update_params()\n    return self\n</code></pre>"},{"location":"api/molfeat.trans.base.html#molfeat.trans.base.MoleculeTransformer","title":"<code>MoleculeTransformer</code>","text":"<p>         Bases: <code>TransformerMixin</code>, <code>BaseFeaturizer</code></p> <p>Base class for molecular data transformer such as Fingerprinter etc. If you create a subclass of this featurizer, you will need to make sure that the input argument of the init are kept as is in the object attributes.</p> <p>Note</p> <p>The transformer supports a variety of datatype, they are only enforced when passing the <code>enforce_dtype=True</code> attributes in <code>__call__</code>. For pandas dataframes, use <code>'pandas'|'df'|'dataframe'|pd.DataFrame</code></p> Source code in <code>molfeat/trans/base.py</code> <pre><code>class MoleculeTransformer(TransformerMixin, BaseFeaturizer, metaclass=_TransformerMeta):\n\n\"\"\"\n    Base class for molecular data transformer such as Fingerprinter etc.\n    If you create a subclass of this featurizer, you will need to make sure that the\n    input argument of the init are kept as is in the object attributes.\n\n    !!! note\n        The transformer supports a variety of datatype, they are only enforced when passing the\n        `enforce_dtype=True` attributes in `__call__`. For pandas dataframes, use `'pandas'|'df'|'dataframe'|pd.DataFrame`\n    \"\"\"\n\n    def __init__(\n        self,\n        featurizer: Union[str, Callable],\n        n_jobs: int = 1,\n        verbose: bool = False,\n        dtype: Optional[Union[str, Callable]] = None,\n        parallel_kwargs: Optional[Dict[str, Any]] = None,\n        **params,\n    ):\n\"\"\"Mol transformer base class\n\n        Args:\n            featurizer: featurizer to use\n            n_jobs (int, optional): Number of job to run in parallel. Defaults to 1.\n            verbose (bool, optional): Verbosity level. Defaults to True.\n            dtype (callable, optional): Output data type. Defaults to None, where numpy arrays are returned.\n            parallel_kwargs (dict, optional): Optional kwargs to pass to the dm.parallelized function. Defaults to None.\n\n        \"\"\"\n        super().__init__(\n            n_jobs=n_jobs,\n            verbose=verbose,\n            dtype=dtype,\n            featurizer=featurizer,\n            parallel_kwargs=parallel_kwargs,\n            **params,\n        )\n        if callable(featurizer):\n            self.featurizer = featurizer\n        else:\n            self.featurizer = get_calculator(featurizer, **params)\n\n        self.cols_to_keep = None\n        self._fitted = False\n\n        self._save_input_args()\n\n    def _save_input_args(self):\n\"\"\"Save the input arguments of a transformer to the attribute\n        `_input_args` of the object.\n        \"\"\"\n\n        # NOTE(hadim): don't override existing _input_args so\n        # it's possible to use MoleculeTransformer as a featurizer\n        # instead of simply a base class.\n        if not hasattr(self, \"_input_args\"):\n            self._input_args = get_input_args()\n\n    def _update_params(self):\n        if not callable(self.featurizer):\n            params = copy.deepcopy(self._input_params)\n            params.pop(\"featurizer\")\n            self.featurizer = get_calculator(self.featurizer, **params)\n        self._fitted = False\n\n    def __setstate__(self, state):\n        state.pop(\"callbacks\", None)\n        self.__dict__.update(state)\n        self.__dict__[\"parallel_kwargs\"] = state.get(\"parallel_kwargs\", {})\n        self._update_params()\n\n    def fit(self, X: List[Union[rdchem.Mol, str]], y: Optional[list] = None, **fit_params):\n\"\"\"Fit the current transformer on given dataset.\n\n        The goal of fitting is for example to identify nan columns values\n        that needs to be removed from the dataset\n\n        Args:\n            X: input list of molecules\n            y (list, optional): Optional list of molecular properties. Defaults to None.\n\n        Returns:\n            self: MolTransformer instance after fitting\n        \"\"\"\n        feats = self.transform(X, ignore_errors=True)\n        lengths = [len(x) for x in feats if not datatype.is_null(x)]\n        if lengths:\n            # we will ignore all nan\n            feats = datatype.to_numpy([f for f in feats if not datatype.is_null(f)])\n            self.cols_to_keep = (~np.any(np.isnan(feats), axis=0)).nonzero()[0]\n        self._fitted = True\n        return self\n\n    def _transform(self, mol: rdchem.Mol):\nr\"\"\"\n        Compute features for a single molecule.\n        This method would potentially need to be reimplemented by child classes\n\n        Args:\n            mol (rdchem.Mol): molecule to transform into features\n\n        Returns\n            feat: featurized input molecule\n\n        \"\"\"\n        feat = None\n        try:\n            feat = datatype.to_numpy(self.featurizer(mol))\n            if self.cols_to_keep is not None:\n                feat = feat[self.cols_to_keep]\n        except Exception as e:\n            if self.verbose:\n                logger.error(e)\n        return feat\n\n    def transform(\n        self,\n        mols: List[Union[rdchem.Mol, str]],\n        ignore_errors: bool = False,\n        **kwargs,\n    ):\nr\"\"\"\n        Compute the features for a set of molecules.\n\n        !!! note\n            Note that depending on the `ignore_errors` argument, all failed\n            featurization (caused whether by invalid smiles or error during\n            data transformation) will be substitued by None features for the\n            corresponding molecule. This is done, so you can find the positions\n            of these molecules and filter them out according to your own logic.\n\n        Args:\n            mols: a list containing smiles or mol objects\n            ignore_errors (bool, optional): Whether to silently ignore errors\n\n\n        Returns:\n            features: a list of features for each molecule in the input set\n        \"\"\"\n        # Convert single mol to iterable format\n        if isinstance(mols, (str, rdchem.Mol)) or not isinstance(mols, Iterable):\n            mols = [mols]\n\n        def _to_mol(x):\n            return dm.to_mol(x) if x else None\n\n        parallel_kwargs = getattr(self, \"parallel_kwargs\", {})\n\n        mols = dm.parallelized(_to_mol, mols, n_jobs=self.n_jobs, **parallel_kwargs)\n\n        if self.n_jobs not in [0, 1]:\n            # use a proxy model to run in parallel\n            cpy = self.copy()\n            features = dm.parallelized(\n                cpy._transform,\n                mols,\n                n_jobs=self.n_jobs,\n                **cpy.parallel_kwargs,\n            )\n        else:\n            features = [self._transform(mol) for mol in mols]\n        if not ignore_errors:\n            for ind, feat in enumerate(features):\n                if feat is None:\n                    raise ValueError(f\"Cannot transform molecule at index {ind}\")\n\n        return features\n\n    def __len__(self):\n\"\"\"Compute featurizer length\"\"\"\n\n        # check length and _length attribute\n        cols_to_keep = getattr(self, \"cols_to_keep\", None)\n        cur_length = None\n\n        if cols_to_keep is not None:\n            cur_length = len(cols_to_keep)\n        else:\n            cur_length = getattr(self, \"length\", getattr(self, \"_length\", None))\n            # then check the featurizer length if it's a callable and not a string/None\n            if (\n                cur_length is None\n                and callable(self.featurizer)\n                and hasattr(self.featurizer, \"__len__\")\n            ):\n                cur_length = len(self.featurizer)\n\n        if cur_length is None:\n            raise ValueError(\n                f\"Cannot auto-determine length of this MolTransformer: {self.__class__.__name__}\"\n            )\n\n        return cur_length\n\n    def __call__(\n        self,\n        mols: List[Union[rdchem.Mol, str]],\n        enforce_dtype: bool = True,\n        ignore_errors: bool = False,\n        **kwargs,\n    ):\nr\"\"\"\n        Calculate features for molecules. Using __call__, instead of transform.\n        If ignore_error is True, a list of features and valid ids are returned.\n        Note that most Transfomers allow you to specify\n        a return datatype.\n\n        Args:\n            mols:  Mol or SMILES of the molecules to be transformed\n            enforce_dtype: whether to enforce the instance dtype in the generated fingerprint\n            ignore_errors: Whether to ignore errors during featurization or raise an error.\n            kwargs: Named parameters for the transform method\n\n        Returns:\n            feats: list of valid features\n            ids: all valid molecule positions that did not failed during featurization.\n                Only returned when ignore_errors is True.\n\n        \"\"\"\n        features = self.transform(mols, ignore_errors=ignore_errors, enforce_dtype=False, **kwargs)\n        ids = np.arange(len(features))\n        if ignore_errors:\n            features, ids = self._filter_none(features)\n        if self.dtype is not None and enforce_dtype:\n            features = datatype.cast(features, dtype=self.dtype, columns=self.columns)\n        if not ignore_errors:\n            return features\n        return features, ids\n\n    @staticmethod\n    def _filter_none(features):\n        ids_bad = []\n        # If the features are a list, filter the None ids\n        if isinstance(features, (tuple, list, np.ndarray)):\n            for f_id, feat in enumerate(features):\n                if datatype.is_null(feat):\n                    ids_bad.append(f_id)\n            ids_to_keep = [\n                this_id for this_id in np.arange(0, len(features)) if this_id not in ids_bad\n            ]\n            features = [features[ii] for ii in ids_to_keep]\n\n        # If the features are a dict or DataFrame, filter the ids when any key id is None\n        elif isinstance(features, (dict, pd.DataFrame)):\n            if isinstance(features, dict):\n                features = pd.DataFrame(features)\n            for feat_col in features.columns:\n                for f_id, feat in enumerate(features[feat_col].values.flatten()):\n                    if feat is None:\n                        ids_bad.append(f_id)\n            ids_bad = np.unique(ids_bad).tolist()\n            all_ids = np.arange(0, features.shape[0])\n            ids_to_keep = [this_id for this_id in all_ids if this_id not in ids_bad]\n            features = features.iloc[ids_to_keep, :]\n\n        else:\n            ids_to_keep = np.arange(0, features.shape[0])\n        return features, list(ids_to_keep)\n\n    @property\n    def columns(self):\n\"\"\"Get the list of columns for this molecular descriptor\n\n        Returns:\n            columns (list): Name of the columns of the descriptor\n        \"\"\"\n        columns = getattr(self.featurizer, \"columns\", None)\n        cols_to_keep = getattr(self, \"cols_to_keep\", None)\n        if columns is not None and cols_to_keep is not None and len(cols_to_keep) &gt; 0:\n            columns = [columns[i] for i in cols_to_keep]\n        return columns\n\n    @staticmethod\n    def batch_transform(\n        transformer: Callable,\n        mols: List[Union[rdchem.Mol, str]],\n        batch_size: int = 256,\n        n_jobs: Optional[int] = None,\n        concatenate: bool = True,\n        progress: bool = True,\n        leave_progress: bool = False,\n        **parallel_kwargs,\n    ):\n\"\"\"\n        Batched computation of featurization of a list of molecules\n\n        Args:\n            transformer: Fingerprint transformer\n            data: List of molecules to featurize\n            batch_size: Batch size\n            n_jobs: number of jobs to run in parallel\n            concatenate: Whether to concatenate the results or return the list of batched results\n            progress: whether to show progress bar\n            leave_progress: whether to leave progress bar after completion\n            parallel_kwargs: additional arguments to pass to dm.parallelized\n\n        Returns:\n            List of batches\n        \"\"\"\n\n        step_size = int(np.ceil(len(mols) / batch_size))\n        batched_mols = np.array_split(mols, step_size)\n\n        tqdm_kwargs = parallel_kwargs.setdefault(\"tqdm_kwargs\", {})\n        tqdm_kwargs.update(leave=leave_progress, desc=\"Batch compute:\")\n        parallel_kwargs[\"tqdm_kwargs\"] = tqdm_kwargs\n\n        # it's recommended to use a precomputed molecule transformer\n        # instead of the internal cache for pretrained models\n        cache_attr = \"cache\"\n        existing_cache = getattr(transformer, cache_attr, None)\n        if existing_cache is None:\n            cache_attr = \"precompute_cache\"\n            existing_cache = getattr(transformer, cache_attr, None)\n\n        use_mp_cache = (\n            existing_cache is not None\n            and not isinstance(existing_cache, MPDataCache)\n            and n_jobs not in [None, 0, 1]  # this is based on datamol sequential vs parallel\n        )\n        if use_mp_cache:\n            # we need to change the cache system to one that works with multiprocessing\n            # to have a shared memory\n            new_cache = MPDataCache()\n            new_cache.update(existing_cache)\n            transformer.cache = new_cache\n\n        transformed = dm.parallelized(\n            transformer,\n            batched_mols,\n            n_jobs=n_jobs,\n            progress=progress,\n            **parallel_kwargs,\n        )\n        if use_mp_cache:\n            # we set back the original transformation while updating it with\n            # all the missing values\n            existing_cache.update(transformer.cache)\n            setattr(transformer, cache_attr, existing_cache)\n\n        if concatenate:\n            # if we ask for concatenation, then we would need to fix None values ideally\n            fixed_transformations = []\n            for computed_trans in transformed:\n                if computed_trans is None:\n                    computed_trans = np.full(len(computed_trans), len(transformer), np.nan)\n                else:\n                    for i, x in enumerate(computed_trans):\n                        if x is None:\n                            computed_trans[i] = np.full(len(transformer), np.nan)\n                fixed_transformations.append(computed_trans)\n            return np.concatenate(fixed_transformations)\n        return transformed\n\n    # Featurizer to state methods\n\n    def to_state_dict(self) -&gt; dict:\n\"\"\"Serialize the featurizer to a state dict.\"\"\"\n\n        if getattr(self, \"_input_args\") is None:\n            raise ValueError(f\"Cannot save state for this transformer '{self.__class__.__name__}'\")\n\n        # Process the input arguments before building the state\n        args = copy.deepcopy(self._input_args)\n\n        ## Deal with dtype\n        if \"dtype\" in args and not isinstance(args[\"dtype\"], str):\n            if args[\"dtype\"] not in DTYPES_MAPPING:\n                raise ValueError(\n                    f\"Invalid dtype {args['dtype']}. Valid dtypes are {DTYPES_MAPPING.keys()}\"\n                )\n            args[\"dtype\"] = DTYPES_MAPPING[args[\"dtype\"]]\n\n        ## Deal with graph atom/bond featurizers\n        # NOTE(hadim): it's important to highlight that atom/bond featurizers can't be\n        # customized with this logic.\n        if args.get(\"atom_featurizer\") is not None:\n            if hasattr(args.get(\"atom_featurizer\"), \"to_state_dict\"):\n                args[\"atom_featurizer\"] = args[\"atom_featurizer\"].to_state_dict()\n                args[\"_atom_featurizer_is_pickled\"] = False\n            else:\n                logger.warning\n                (\n                    \"You are attempting to pickle an atom featurizer without a `to_state_dict` function into a hex string\"\n                )\n                args[\"atom_featurizer\"] = fn_to_hex(args[\"atom_featurizer\"])\n                args[\"_atom_featurizer_is_pickled\"] = True\n\n        # deal with bond featurizer\n        if args.get(\"bond_featurizer\") is not None:\n            if hasattr(args.get(\"bond_featurizer\"), \"to_state_dict\"):\n                args[\"bond_featurizer\"] = args[\"bond_featurizer\"].to_state_dict()\n                args[\"_bond_featurizer_is_pickled\"] = False\n            else:\n                logger.warning(\n                    \"You are attempting to pickle a bond featurizer without a `to_state_dict` function into a hex string\"\n                )\n                args[\"bond_featurizer\"] = fn_to_hex(args[\"bond_featurizer\"])\n                args[\"_bond_featurizer_is_pickled\"] = True\n\n        ## Deal with custom featurizer\n        if \"featurizer\" in args and isinstance(args[\"featurizer\"], Callable):\n            if hasattr(args[\"featurizer\"], \"to_state_dict\"):\n                args[\"featurizer\"] = args[\"featurizer\"].to_state_dict()\n                args[\"_featurizer_is_pickled\"] = False\n            else:\n                # buffer = io.BytesIO()\n                # joblib.dump(args[\"atom_featurizer\"], buffer)\n                # args[\"atom_featurizer\"] = buffer.getvalue().hex()\n                logger.warning(\n                    \"You are attempting to pickle a callable without a `to_state_dict` function into a hex string\"\n                )\n                args[\"featurizer\"] = fn_to_hex(args[\"featurizer\"])\n                args[\"_featurizer_is_pickled\"] = True\n\n        # Build the state\n        state = {}\n        state[\"name\"] = self.__class__.__name__\n        state[\"args\"] = args\n        state[\"_molfeat_version\"] = MOLFEAT_VERSION\n        return state\n\n    def to_state_json(self) -&gt; str:\n        return json.dumps(self.to_state_dict())\n\n    def to_state_yaml(self) -&gt; str:\n        return yaml.dump(self.to_state_dict(), Dumper=yaml.SafeDumper)\n\n    def to_state_json_file(self, filepath: str):\n        with fsspec.open(filepath, \"w\") as f:\n            f.write(self.to_state_json())  # type: ignore\n\n    def to_state_yaml_file(self, filepath: str):\n        with fsspec.open(filepath, \"w\") as f:\n            f.write(self.to_state_yaml())  # type: ignore\n\n    # State to featurizer methods\n\n    @staticmethod\n    def from_state_dict(state: dict, override_args: Optional[dict] = None) -&gt; \"MoleculeTransformer\":\n\"\"\"Reload a featurizer from a state dict.\"\"\"\n\n        # Don't alter the original state dict\n        state = copy.deepcopy(state)\n\n        # MoleculeTransformer is a special case that has his own logic\n        if state[\"name\"] == \"PrecomputedMolTransformer\":\n            return PrecomputedMolTransformer.from_state_dict(\n                state=state,\n                override_args=override_args,\n            )\n\n        # Get the name\n        transformer_class = _TRANSFORMERS.get(state[\"name\"])\n        if transformer_class is None:\n            raise ValueError(f\"The featurizer '{state['name']}' is not supported.\")\n        if isinstance(transformer_class, str):\n            # Get the transformer class from its path\n            transformer_class = import_from_string(transformer_class)\n\n        # Process the state as needed\n        args = state.get(\"args\", {})\n\n        ## Deal with dtype\n        if \"dtype\" in args:\n            if args[\"dtype\"] not in DTYPES_MAPPING_REVERSE:\n                raise ValueError(\n                    f\"Invalid dtype {args['dtype']}. Valid dtypes are\"\n                    f\" {DTYPES_MAPPING_REVERSE.keys()}\"\n                )\n            args[\"dtype\"] = DTYPES_MAPPING_REVERSE[args[\"dtype\"]]\n\n        ## Deal with graph atom/bond featurizers\n        if args.get(\"atom_featurizer\") is not None:\n            if not args.get(\"_atom_featurizer_is_pickled\"):\n                klass_name = args[\"atom_featurizer\"].get(\"name\")\n                args[\"atom_featurizer\"] = ATOM_FEATURIZER_MAPPING_REVERSE[\n                    klass_name\n                ].from_state_dict(args[\"atom_featurizer\"])\n            else:\n                # buffer = io.BytesIO(bytes.fromhex(args[\"atom_featurizer\"]))\n                # args[\"atom_featurizer\"] = joblib.load(buffer)\n                args[\"atom_featurizer\"] = hex_to_fn(args[\"atom_featurizer\"])\n            args.pop(\"_atom_featurizer_is_pickled\", None)\n        if args.get(\"bond_featurizer\") is not None:\n            if not args.get(\"_bond_featurizer_is_pickled\"):\n                klass_name = args[\"bond_featurizer\"].get(\"name\")\n                args[\"bond_featurizer\"] = BOND_FEATURIZER_MAPPING_REVERSE[\n                    klass_name\n                ].from_state_dict(args[\"bond_featurizer\"])\n            else:\n                # buffer = io.BytesIO(bytes.fromhex(args[\"bond_featurizer\"]))\n                # args[\"bond_featurizer\"] = joblib.load(buffer)\n                args[\"bond_featurizer\"] = hex_to_fn(args[\"bond_featurizer\"])\n            args.pop(\"_bond_featurizer_is_pickled\", None)\n        ## Deal with custom featurizer\n        if \"featurizer\" in args and args.get(\"_featurizer_is_pickled\") is True:\n            # buffer = io.BytesIO(bytes.fromhex(args[\"featurizer\"]))\n            # args[\"featurizer\"] = joblib.load(buffer)\n            args[\"featurizer\"] = hex_to_fn(args[\"featurizer\"])\n            args.pop(\"_featurizer_is_pickled\")\n\n        if override_args is not None:\n            args.update(override_args)\n\n        # Create the transformer\n        featurizer = transformer_class(**args)\n        return featurizer\n\n    @staticmethod\n    def from_state_json(\n        state_json: str,\n        override_args: Optional[dict] = None,\n    ) -&gt; \"MoleculeTransformer\":\n        state_dict = json.loads(state_json)\n        return MoleculeTransformer.from_state_dict(state_dict, override_args=override_args)\n\n    @staticmethod\n    def from_state_yaml(\n        state_yaml: str,\n        override_args: Optional[dict] = None,\n    ) -&gt; \"MoleculeTransformer\":\n        state_dict = yaml.load(state_yaml, Loader=yaml.SafeLoader)\n        return MoleculeTransformer.from_state_dict(state_dict, override_args=override_args)\n\n    @staticmethod\n    def from_state_json_file(\n        filepath: str,\n        override_args: Optional[dict] = None,\n    ) -&gt; \"MoleculeTransformer\":\n        with fsspec.open(filepath, \"r\") as f:\n            featurizer = MoleculeTransformer.from_state_json(f.read(), override_args=override_args)  # type: ignore\n        return featurizer\n\n    @staticmethod\n    def from_state_yaml_file(\n        filepath: str,\n        override_args: Optional[dict] = None,\n    ) -&gt; \"MoleculeTransformer\":\n        with fsspec.open(filepath, \"r\") as f:\n            featurizer = MoleculeTransformer.from_state_yaml(f.read(), override_args=override_args)  # type: ignore\n        return featurizer\n</code></pre>"},{"location":"api/molfeat.trans.base.html#molfeat.trans.base.MoleculeTransformer.cols_to_keep","title":"<code>cols_to_keep = None</code>  <code>instance-attribute</code>","text":""},{"location":"api/molfeat.trans.base.html#molfeat.trans.base.MoleculeTransformer.columns","title":"<code>columns</code>  <code>property</code>","text":"<p>Get the list of columns for this molecular descriptor</p> <p>Returns:</p> Name Type Description <code>columns</code> <code>list</code> <p>Name of the columns of the descriptor</p>"},{"location":"api/molfeat.trans.base.html#molfeat.trans.base.MoleculeTransformer.featurizer","title":"<code>featurizer = featurizer</code>  <code>instance-attribute</code>","text":""},{"location":"api/molfeat.trans.base.html#molfeat.trans.base.MoleculeTransformer.__call__","title":"<code>__call__(mols, enforce_dtype=True, ignore_errors=False, **kwargs)</code>","text":"<p>Calculate features for molecules. Using call, instead of transform. If ignore_error is True, a list of features and valid ids are returned. Note that most Transfomers allow you to specify a return datatype.</p> <p>Parameters:</p> Name Type Description Default <code>mols</code> <code>List[Union[rdchem.Mol, str]]</code> <p>Mol or SMILES of the molecules to be transformed</p> required <code>enforce_dtype</code> <code>bool</code> <p>whether to enforce the instance dtype in the generated fingerprint</p> <code>True</code> <code>ignore_errors</code> <code>bool</code> <p>Whether to ignore errors during featurization or raise an error.</p> <code>False</code> <code>kwargs</code> <p>Named parameters for the transform method</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>feats</code> <p>list of valid features</p> <code>ids</code> <p>all valid molecule positions that did not failed during featurization. Only returned when ignore_errors is True.</p> Source code in <code>molfeat/trans/base.py</code> <pre><code>def __call__(\n    self,\n    mols: List[Union[rdchem.Mol, str]],\n    enforce_dtype: bool = True,\n    ignore_errors: bool = False,\n    **kwargs,\n):\nr\"\"\"\n    Calculate features for molecules. Using __call__, instead of transform.\n    If ignore_error is True, a list of features and valid ids are returned.\n    Note that most Transfomers allow you to specify\n    a return datatype.\n\n    Args:\n        mols:  Mol or SMILES of the molecules to be transformed\n        enforce_dtype: whether to enforce the instance dtype in the generated fingerprint\n        ignore_errors: Whether to ignore errors during featurization or raise an error.\n        kwargs: Named parameters for the transform method\n\n    Returns:\n        feats: list of valid features\n        ids: all valid molecule positions that did not failed during featurization.\n            Only returned when ignore_errors is True.\n\n    \"\"\"\n    features = self.transform(mols, ignore_errors=ignore_errors, enforce_dtype=False, **kwargs)\n    ids = np.arange(len(features))\n    if ignore_errors:\n        features, ids = self._filter_none(features)\n    if self.dtype is not None and enforce_dtype:\n        features = datatype.cast(features, dtype=self.dtype, columns=self.columns)\n    if not ignore_errors:\n        return features\n    return features, ids\n</code></pre>"},{"location":"api/molfeat.trans.base.html#molfeat.trans.base.MoleculeTransformer.__init__","title":"<code>__init__(featurizer, n_jobs=1, verbose=False, dtype=None, parallel_kwargs=None, **params)</code>","text":"<p>Mol transformer base class</p> <p>Parameters:</p> Name Type Description Default <code>featurizer</code> <code>Union[str, Callable]</code> <p>featurizer to use</p> required <code>n_jobs</code> <code>int</code> <p>Number of job to run in parallel. Defaults to 1.</p> <code>1</code> <code>verbose</code> <code>bool</code> <p>Verbosity level. Defaults to True.</p> <code>False</code> <code>dtype</code> <code>callable</code> <p>Output data type. Defaults to None, where numpy arrays are returned.</p> <code>None</code> <code>parallel_kwargs</code> <code>dict</code> <p>Optional kwargs to pass to the dm.parallelized function. Defaults to None.</p> <code>None</code> Source code in <code>molfeat/trans/base.py</code> <pre><code>def __init__(\n    self,\n    featurizer: Union[str, Callable],\n    n_jobs: int = 1,\n    verbose: bool = False,\n    dtype: Optional[Union[str, Callable]] = None,\n    parallel_kwargs: Optional[Dict[str, Any]] = None,\n    **params,\n):\n\"\"\"Mol transformer base class\n\n    Args:\n        featurizer: featurizer to use\n        n_jobs (int, optional): Number of job to run in parallel. Defaults to 1.\n        verbose (bool, optional): Verbosity level. Defaults to True.\n        dtype (callable, optional): Output data type. Defaults to None, where numpy arrays are returned.\n        parallel_kwargs (dict, optional): Optional kwargs to pass to the dm.parallelized function. Defaults to None.\n\n    \"\"\"\n    super().__init__(\n        n_jobs=n_jobs,\n        verbose=verbose,\n        dtype=dtype,\n        featurizer=featurizer,\n        parallel_kwargs=parallel_kwargs,\n        **params,\n    )\n    if callable(featurizer):\n        self.featurizer = featurizer\n    else:\n        self.featurizer = get_calculator(featurizer, **params)\n\n    self.cols_to_keep = None\n    self._fitted = False\n\n    self._save_input_args()\n</code></pre>"},{"location":"api/molfeat.trans.base.html#molfeat.trans.base.MoleculeTransformer.__len__","title":"<code>__len__()</code>","text":"<p>Compute featurizer length</p> Source code in <code>molfeat/trans/base.py</code> <pre><code>def __len__(self):\n\"\"\"Compute featurizer length\"\"\"\n\n    # check length and _length attribute\n    cols_to_keep = getattr(self, \"cols_to_keep\", None)\n    cur_length = None\n\n    if cols_to_keep is not None:\n        cur_length = len(cols_to_keep)\n    else:\n        cur_length = getattr(self, \"length\", getattr(self, \"_length\", None))\n        # then check the featurizer length if it's a callable and not a string/None\n        if (\n            cur_length is None\n            and callable(self.featurizer)\n            and hasattr(self.featurizer, \"__len__\")\n        ):\n            cur_length = len(self.featurizer)\n\n    if cur_length is None:\n        raise ValueError(\n            f\"Cannot auto-determine length of this MolTransformer: {self.__class__.__name__}\"\n        )\n\n    return cur_length\n</code></pre>"},{"location":"api/molfeat.trans.base.html#molfeat.trans.base.MoleculeTransformer.__setstate__","title":"<code>__setstate__(state)</code>","text":"Source code in <code>molfeat/trans/base.py</code> <pre><code>def __setstate__(self, state):\n    state.pop(\"callbacks\", None)\n    self.__dict__.update(state)\n    self.__dict__[\"parallel_kwargs\"] = state.get(\"parallel_kwargs\", {})\n    self._update_params()\n</code></pre>"},{"location":"api/molfeat.trans.base.html#molfeat.trans.base.MoleculeTransformer.batch_transform","title":"<code>batch_transform(transformer, mols, batch_size=256, n_jobs=None, concatenate=True, progress=True, leave_progress=False, **parallel_kwargs)</code>  <code>staticmethod</code>","text":"<p>Batched computation of featurization of a list of molecules</p> <p>Parameters:</p> Name Type Description Default <code>transformer</code> <code>Callable</code> <p>Fingerprint transformer</p> required <code>data</code> <p>List of molecules to featurize</p> required <code>batch_size</code> <code>int</code> <p>Batch size</p> <code>256</code> <code>n_jobs</code> <code>Optional[int]</code> <p>number of jobs to run in parallel</p> <code>None</code> <code>concatenate</code> <code>bool</code> <p>Whether to concatenate the results or return the list of batched results</p> <code>True</code> <code>progress</code> <code>bool</code> <p>whether to show progress bar</p> <code>True</code> <code>leave_progress</code> <code>bool</code> <p>whether to leave progress bar after completion</p> <code>False</code> <code>parallel_kwargs</code> <p>additional arguments to pass to dm.parallelized</p> <code>{}</code> <p>Returns:</p> Type Description <p>List of batches</p> Source code in <code>molfeat/trans/base.py</code> <pre><code>@staticmethod\ndef batch_transform(\n    transformer: Callable,\n    mols: List[Union[rdchem.Mol, str]],\n    batch_size: int = 256,\n    n_jobs: Optional[int] = None,\n    concatenate: bool = True,\n    progress: bool = True,\n    leave_progress: bool = False,\n    **parallel_kwargs,\n):\n\"\"\"\n    Batched computation of featurization of a list of molecules\n\n    Args:\n        transformer: Fingerprint transformer\n        data: List of molecules to featurize\n        batch_size: Batch size\n        n_jobs: number of jobs to run in parallel\n        concatenate: Whether to concatenate the results or return the list of batched results\n        progress: whether to show progress bar\n        leave_progress: whether to leave progress bar after completion\n        parallel_kwargs: additional arguments to pass to dm.parallelized\n\n    Returns:\n        List of batches\n    \"\"\"\n\n    step_size = int(np.ceil(len(mols) / batch_size))\n    batched_mols = np.array_split(mols, step_size)\n\n    tqdm_kwargs = parallel_kwargs.setdefault(\"tqdm_kwargs\", {})\n    tqdm_kwargs.update(leave=leave_progress, desc=\"Batch compute:\")\n    parallel_kwargs[\"tqdm_kwargs\"] = tqdm_kwargs\n\n    # it's recommended to use a precomputed molecule transformer\n    # instead of the internal cache for pretrained models\n    cache_attr = \"cache\"\n    existing_cache = getattr(transformer, cache_attr, None)\n    if existing_cache is None:\n        cache_attr = \"precompute_cache\"\n        existing_cache = getattr(transformer, cache_attr, None)\n\n    use_mp_cache = (\n        existing_cache is not None\n        and not isinstance(existing_cache, MPDataCache)\n        and n_jobs not in [None, 0, 1]  # this is based on datamol sequential vs parallel\n    )\n    if use_mp_cache:\n        # we need to change the cache system to one that works with multiprocessing\n        # to have a shared memory\n        new_cache = MPDataCache()\n        new_cache.update(existing_cache)\n        transformer.cache = new_cache\n\n    transformed = dm.parallelized(\n        transformer,\n        batched_mols,\n        n_jobs=n_jobs,\n        progress=progress,\n        **parallel_kwargs,\n    )\n    if use_mp_cache:\n        # we set back the original transformation while updating it with\n        # all the missing values\n        existing_cache.update(transformer.cache)\n        setattr(transformer, cache_attr, existing_cache)\n\n    if concatenate:\n        # if we ask for concatenation, then we would need to fix None values ideally\n        fixed_transformations = []\n        for computed_trans in transformed:\n            if computed_trans is None:\n                computed_trans = np.full(len(computed_trans), len(transformer), np.nan)\n            else:\n                for i, x in enumerate(computed_trans):\n                    if x is None:\n                        computed_trans[i] = np.full(len(transformer), np.nan)\n            fixed_transformations.append(computed_trans)\n        return np.concatenate(fixed_transformations)\n    return transformed\n</code></pre>"},{"location":"api/molfeat.trans.base.html#molfeat.trans.base.MoleculeTransformer.fit","title":"<code>fit(X, y=None, **fit_params)</code>","text":"<p>Fit the current transformer on given dataset.</p> <p>The goal of fitting is for example to identify nan columns values that needs to be removed from the dataset</p> <p>Parameters:</p> Name Type Description Default <code>X</code> <code>List[Union[rdchem.Mol, str]]</code> <p>input list of molecules</p> required <code>y</code> <code>list</code> <p>Optional list of molecular properties. Defaults to None.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>self</code> <p>MolTransformer instance after fitting</p> Source code in <code>molfeat/trans/base.py</code> <pre><code>def fit(self, X: List[Union[rdchem.Mol, str]], y: Optional[list] = None, **fit_params):\n\"\"\"Fit the current transformer on given dataset.\n\n    The goal of fitting is for example to identify nan columns values\n    that needs to be removed from the dataset\n\n    Args:\n        X: input list of molecules\n        y (list, optional): Optional list of molecular properties. Defaults to None.\n\n    Returns:\n        self: MolTransformer instance after fitting\n    \"\"\"\n    feats = self.transform(X, ignore_errors=True)\n    lengths = [len(x) for x in feats if not datatype.is_null(x)]\n    if lengths:\n        # we will ignore all nan\n        feats = datatype.to_numpy([f for f in feats if not datatype.is_null(f)])\n        self.cols_to_keep = (~np.any(np.isnan(feats), axis=0)).nonzero()[0]\n    self._fitted = True\n    return self\n</code></pre>"},{"location":"api/molfeat.trans.base.html#molfeat.trans.base.MoleculeTransformer.from_state_dict","title":"<code>from_state_dict(state, override_args=None)</code>  <code>staticmethod</code>","text":"<p>Reload a featurizer from a state dict.</p> Source code in <code>molfeat/trans/base.py</code> <pre><code>@staticmethod\ndef from_state_dict(state: dict, override_args: Optional[dict] = None) -&gt; \"MoleculeTransformer\":\n\"\"\"Reload a featurizer from a state dict.\"\"\"\n\n    # Don't alter the original state dict\n    state = copy.deepcopy(state)\n\n    # MoleculeTransformer is a special case that has his own logic\n    if state[\"name\"] == \"PrecomputedMolTransformer\":\n        return PrecomputedMolTransformer.from_state_dict(\n            state=state,\n            override_args=override_args,\n        )\n\n    # Get the name\n    transformer_class = _TRANSFORMERS.get(state[\"name\"])\n    if transformer_class is None:\n        raise ValueError(f\"The featurizer '{state['name']}' is not supported.\")\n    if isinstance(transformer_class, str):\n        # Get the transformer class from its path\n        transformer_class = import_from_string(transformer_class)\n\n    # Process the state as needed\n    args = state.get(\"args\", {})\n\n    ## Deal with dtype\n    if \"dtype\" in args:\n        if args[\"dtype\"] not in DTYPES_MAPPING_REVERSE:\n            raise ValueError(\n                f\"Invalid dtype {args['dtype']}. Valid dtypes are\"\n                f\" {DTYPES_MAPPING_REVERSE.keys()}\"\n            )\n        args[\"dtype\"] = DTYPES_MAPPING_REVERSE[args[\"dtype\"]]\n\n    ## Deal with graph atom/bond featurizers\n    if args.get(\"atom_featurizer\") is not None:\n        if not args.get(\"_atom_featurizer_is_pickled\"):\n            klass_name = args[\"atom_featurizer\"].get(\"name\")\n            args[\"atom_featurizer\"] = ATOM_FEATURIZER_MAPPING_REVERSE[\n                klass_name\n            ].from_state_dict(args[\"atom_featurizer\"])\n        else:\n            # buffer = io.BytesIO(bytes.fromhex(args[\"atom_featurizer\"]))\n            # args[\"atom_featurizer\"] = joblib.load(buffer)\n            args[\"atom_featurizer\"] = hex_to_fn(args[\"atom_featurizer\"])\n        args.pop(\"_atom_featurizer_is_pickled\", None)\n    if args.get(\"bond_featurizer\") is not None:\n        if not args.get(\"_bond_featurizer_is_pickled\"):\n            klass_name = args[\"bond_featurizer\"].get(\"name\")\n            args[\"bond_featurizer\"] = BOND_FEATURIZER_MAPPING_REVERSE[\n                klass_name\n            ].from_state_dict(args[\"bond_featurizer\"])\n        else:\n            # buffer = io.BytesIO(bytes.fromhex(args[\"bond_featurizer\"]))\n            # args[\"bond_featurizer\"] = joblib.load(buffer)\n            args[\"bond_featurizer\"] = hex_to_fn(args[\"bond_featurizer\"])\n        args.pop(\"_bond_featurizer_is_pickled\", None)\n    ## Deal with custom featurizer\n    if \"featurizer\" in args and args.get(\"_featurizer_is_pickled\") is True:\n        # buffer = io.BytesIO(bytes.fromhex(args[\"featurizer\"]))\n        # args[\"featurizer\"] = joblib.load(buffer)\n        args[\"featurizer\"] = hex_to_fn(args[\"featurizer\"])\n        args.pop(\"_featurizer_is_pickled\")\n\n    if override_args is not None:\n        args.update(override_args)\n\n    # Create the transformer\n    featurizer = transformer_class(**args)\n    return featurizer\n</code></pre>"},{"location":"api/molfeat.trans.base.html#molfeat.trans.base.MoleculeTransformer.from_state_json","title":"<code>from_state_json(state_json, override_args=None)</code>  <code>staticmethod</code>","text":"Source code in <code>molfeat/trans/base.py</code> <pre><code>@staticmethod\ndef from_state_json(\n    state_json: str,\n    override_args: Optional[dict] = None,\n) -&gt; \"MoleculeTransformer\":\n    state_dict = json.loads(state_json)\n    return MoleculeTransformer.from_state_dict(state_dict, override_args=override_args)\n</code></pre>"},{"location":"api/molfeat.trans.base.html#molfeat.trans.base.MoleculeTransformer.from_state_json_file","title":"<code>from_state_json_file(filepath, override_args=None)</code>  <code>staticmethod</code>","text":"Source code in <code>molfeat/trans/base.py</code> <pre><code>@staticmethod\ndef from_state_json_file(\n    filepath: str,\n    override_args: Optional[dict] = None,\n) -&gt; \"MoleculeTransformer\":\n    with fsspec.open(filepath, \"r\") as f:\n        featurizer = MoleculeTransformer.from_state_json(f.read(), override_args=override_args)  # type: ignore\n    return featurizer\n</code></pre>"},{"location":"api/molfeat.trans.base.html#molfeat.trans.base.MoleculeTransformer.from_state_yaml","title":"<code>from_state_yaml(state_yaml, override_args=None)</code>  <code>staticmethod</code>","text":"Source code in <code>molfeat/trans/base.py</code> <pre><code>@staticmethod\ndef from_state_yaml(\n    state_yaml: str,\n    override_args: Optional[dict] = None,\n) -&gt; \"MoleculeTransformer\":\n    state_dict = yaml.load(state_yaml, Loader=yaml.SafeLoader)\n    return MoleculeTransformer.from_state_dict(state_dict, override_args=override_args)\n</code></pre>"},{"location":"api/molfeat.trans.base.html#molfeat.trans.base.MoleculeTransformer.from_state_yaml_file","title":"<code>from_state_yaml_file(filepath, override_args=None)</code>  <code>staticmethod</code>","text":"Source code in <code>molfeat/trans/base.py</code> <pre><code>@staticmethod\ndef from_state_yaml_file(\n    filepath: str,\n    override_args: Optional[dict] = None,\n) -&gt; \"MoleculeTransformer\":\n    with fsspec.open(filepath, \"r\") as f:\n        featurizer = MoleculeTransformer.from_state_yaml(f.read(), override_args=override_args)  # type: ignore\n    return featurizer\n</code></pre>"},{"location":"api/molfeat.trans.base.html#molfeat.trans.base.MoleculeTransformer.to_state_dict","title":"<code>to_state_dict()</code>","text":"<p>Serialize the featurizer to a state dict.</p> Source code in <code>molfeat/trans/base.py</code> <pre><code>def to_state_dict(self) -&gt; dict:\n\"\"\"Serialize the featurizer to a state dict.\"\"\"\n\n    if getattr(self, \"_input_args\") is None:\n        raise ValueError(f\"Cannot save state for this transformer '{self.__class__.__name__}'\")\n\n    # Process the input arguments before building the state\n    args = copy.deepcopy(self._input_args)\n\n    ## Deal with dtype\n    if \"dtype\" in args and not isinstance(args[\"dtype\"], str):\n        if args[\"dtype\"] not in DTYPES_MAPPING:\n            raise ValueError(\n                f\"Invalid dtype {args['dtype']}. Valid dtypes are {DTYPES_MAPPING.keys()}\"\n            )\n        args[\"dtype\"] = DTYPES_MAPPING[args[\"dtype\"]]\n\n    ## Deal with graph atom/bond featurizers\n    # NOTE(hadim): it's important to highlight that atom/bond featurizers can't be\n    # customized with this logic.\n    if args.get(\"atom_featurizer\") is not None:\n        if hasattr(args.get(\"atom_featurizer\"), \"to_state_dict\"):\n            args[\"atom_featurizer\"] = args[\"atom_featurizer\"].to_state_dict()\n            args[\"_atom_featurizer_is_pickled\"] = False\n        else:\n            logger.warning\n            (\n                \"You are attempting to pickle an atom featurizer without a `to_state_dict` function into a hex string\"\n            )\n            args[\"atom_featurizer\"] = fn_to_hex(args[\"atom_featurizer\"])\n            args[\"_atom_featurizer_is_pickled\"] = True\n\n    # deal with bond featurizer\n    if args.get(\"bond_featurizer\") is not None:\n        if hasattr(args.get(\"bond_featurizer\"), \"to_state_dict\"):\n            args[\"bond_featurizer\"] = args[\"bond_featurizer\"].to_state_dict()\n            args[\"_bond_featurizer_is_pickled\"] = False\n        else:\n            logger.warning(\n                \"You are attempting to pickle a bond featurizer without a `to_state_dict` function into a hex string\"\n            )\n            args[\"bond_featurizer\"] = fn_to_hex(args[\"bond_featurizer\"])\n            args[\"_bond_featurizer_is_pickled\"] = True\n\n    ## Deal with custom featurizer\n    if \"featurizer\" in args and isinstance(args[\"featurizer\"], Callable):\n        if hasattr(args[\"featurizer\"], \"to_state_dict\"):\n            args[\"featurizer\"] = args[\"featurizer\"].to_state_dict()\n            args[\"_featurizer_is_pickled\"] = False\n        else:\n            # buffer = io.BytesIO()\n            # joblib.dump(args[\"atom_featurizer\"], buffer)\n            # args[\"atom_featurizer\"] = buffer.getvalue().hex()\n            logger.warning(\n                \"You are attempting to pickle a callable without a `to_state_dict` function into a hex string\"\n            )\n            args[\"featurizer\"] = fn_to_hex(args[\"featurizer\"])\n            args[\"_featurizer_is_pickled\"] = True\n\n    # Build the state\n    state = {}\n    state[\"name\"] = self.__class__.__name__\n    state[\"args\"] = args\n    state[\"_molfeat_version\"] = MOLFEAT_VERSION\n    return state\n</code></pre>"},{"location":"api/molfeat.trans.base.html#molfeat.trans.base.MoleculeTransformer.to_state_json","title":"<code>to_state_json()</code>","text":"Source code in <code>molfeat/trans/base.py</code> <pre><code>def to_state_json(self) -&gt; str:\n    return json.dumps(self.to_state_dict())\n</code></pre>"},{"location":"api/molfeat.trans.base.html#molfeat.trans.base.MoleculeTransformer.to_state_json_file","title":"<code>to_state_json_file(filepath)</code>","text":"Source code in <code>molfeat/trans/base.py</code> <pre><code>def to_state_json_file(self, filepath: str):\n    with fsspec.open(filepath, \"w\") as f:\n        f.write(self.to_state_json())  # type: ignore\n</code></pre>"},{"location":"api/molfeat.trans.base.html#molfeat.trans.base.MoleculeTransformer.to_state_yaml","title":"<code>to_state_yaml()</code>","text":"Source code in <code>molfeat/trans/base.py</code> <pre><code>def to_state_yaml(self) -&gt; str:\n    return yaml.dump(self.to_state_dict(), Dumper=yaml.SafeDumper)\n</code></pre>"},{"location":"api/molfeat.trans.base.html#molfeat.trans.base.MoleculeTransformer.to_state_yaml_file","title":"<code>to_state_yaml_file(filepath)</code>","text":"Source code in <code>molfeat/trans/base.py</code> <pre><code>def to_state_yaml_file(self, filepath: str):\n    with fsspec.open(filepath, \"w\") as f:\n        f.write(self.to_state_yaml())  # type: ignore\n</code></pre>"},{"location":"api/molfeat.trans.base.html#molfeat.trans.base.MoleculeTransformer.transform","title":"<code>transform(mols, ignore_errors=False, **kwargs)</code>","text":"<p>Compute the features for a set of molecules.</p> <p>Note</p> <p>Note that depending on the <code>ignore_errors</code> argument, all failed featurization (caused whether by invalid smiles or error during data transformation) will be substitued by None features for the corresponding molecule. This is done, so you can find the positions of these molecules and filter them out according to your own logic.</p> <p>Parameters:</p> Name Type Description Default <code>mols</code> <code>List[Union[rdchem.Mol, str]]</code> <p>a list containing smiles or mol objects</p> required <code>ignore_errors</code> <code>bool</code> <p>Whether to silently ignore errors</p> <code>False</code> <p>Returns:</p> Name Type Description <code>features</code> <p>a list of features for each molecule in the input set</p> Source code in <code>molfeat/trans/base.py</code> <pre><code>def transform(\n    self,\n    mols: List[Union[rdchem.Mol, str]],\n    ignore_errors: bool = False,\n    **kwargs,\n):\nr\"\"\"\n    Compute the features for a set of molecules.\n\n    !!! note\n        Note that depending on the `ignore_errors` argument, all failed\n        featurization (caused whether by invalid smiles or error during\n        data transformation) will be substitued by None features for the\n        corresponding molecule. This is done, so you can find the positions\n        of these molecules and filter them out according to your own logic.\n\n    Args:\n        mols: a list containing smiles or mol objects\n        ignore_errors (bool, optional): Whether to silently ignore errors\n\n\n    Returns:\n        features: a list of features for each molecule in the input set\n    \"\"\"\n    # Convert single mol to iterable format\n    if isinstance(mols, (str, rdchem.Mol)) or not isinstance(mols, Iterable):\n        mols = [mols]\n\n    def _to_mol(x):\n        return dm.to_mol(x) if x else None\n\n    parallel_kwargs = getattr(self, \"parallel_kwargs\", {})\n\n    mols = dm.parallelized(_to_mol, mols, n_jobs=self.n_jobs, **parallel_kwargs)\n\n    if self.n_jobs not in [0, 1]:\n        # use a proxy model to run in parallel\n        cpy = self.copy()\n        features = dm.parallelized(\n            cpy._transform,\n            mols,\n            n_jobs=self.n_jobs,\n            **cpy.parallel_kwargs,\n        )\n    else:\n        features = [self._transform(mol) for mol in mols]\n    if not ignore_errors:\n        for ind, feat in enumerate(features):\n            if feat is None:\n                raise ValueError(f\"Cannot transform molecule at index {ind}\")\n\n    return features\n</code></pre>"},{"location":"api/molfeat.trans.base.html#molfeat.trans.base.PrecomputedMolTransformer","title":"<code>PrecomputedMolTransformer</code>","text":"<p>         Bases: <code>MoleculeTransformer</code></p> <p>Convenience class for storing precomputed features.</p> Source code in <code>molfeat/trans/base.py</code> <pre><code>class PrecomputedMolTransformer(MoleculeTransformer):\n\"\"\"Convenience class for storing precomputed features.\"\"\"\n\n    def __init__(\n        self,\n        cache: Optional[Union[_Cache, Mapping[Any, Any], CacheList]] = None,\n        cache_dict: Optional[Dict[str, Union[_Cache, Mapping[Any, Any], CacheList]]] = None,\n        cache_key: Optional[str] = None,\n        *args,\n        featurizer: Optional[Union[MoleculeTransformer, str]] = None,\n        state_path: Optional[str] = None,\n        **kwargs,\n    ):\n\"\"\"\n        Transformer that supports precomputation of features. You can either pass an empty cache or a pre-populated cache\n\n        Args:\n            cache: a datastructure of type mapping that maps each molecule to the precomputed features\n            cache_dict: A dictionary of cache objects. This is a convenient structure when use multiple\n                datacache for model selection.\n            cache_key: The key of cache object to use.\n            featurizer: optional featurizer used to compute the features of values not in the cache.\n                Either the featurizer object or a string.\n            state_path: optional state file path used to initiate the transformer object at the initialization\n        \"\"\"\n        if (state_path is not None) and (\n            (cache is not None) or (cache_dict is not None and cache_key is not None)\n        ):\n            raise ValueError(\n                \"`PrecomputedMolTransformer` can only be initiated by either `state_path` or\"\n                \" the rest of parameters for cache and featurizer. But both are given.\"\n            )\n\n        super().__init__(*args, featurizer=\"none\", **kwargs)\n\n        if state_path is not None:\n            self.__dict__ = self.from_state_file(state_path=state_path).__dict__.copy()\n        else:\n            if cache_dict is not None and cache_key is not None:\n                self.cache_key = cache_key\n                self.cache = cache_dict[self.cache_key]\n            elif cache is not None:\n                self.cache = cache\n            else:\n                raise AttributeError(\"The cache is not specified.\")\n\n            if isinstance(featurizer, str):\n                self.base_featurizer = MoleculeTransformer(featurizer, *args, **kwargs)\n            else:\n                self.base_featurizer = featurizer\n\n        # Set the length of the featurizer\n        if len(self.cache) &gt; 0:\n            self.length = len(list(self.cache.values())[0])\n        elif self.base_featurizer is not None:\n            self.length = len(self.base_featurizer)\n        else:\n            raise AttributeError(\n                \"The cache is empty and the base featurizer is not specified. It's impossible\"\n                \" to determine the length of the featurizer.\"\n            )\n\n    def _transform(self, mol: rdchem.Mol):\nr\"\"\"\n        Return precomputed feature for a single molecule\n\n        Args:\n            mol (rdchem.Mol): molecule to transform into features\n\n        Returns\n            feat: featurized input molecule\n\n        \"\"\"\n        feat = self.cache.get(mol)\n        # if feat is None and we have an existing featurizer, we can update the cache\n        if feat is None and self.base_featurizer is not None:\n            feat = self.base_featurizer._transform(mol)\n            self.cache[mol] = feat\n\n        try:\n            feat = datatype.to_numpy(feat)\n            if self.cols_to_keep is not None:\n                feat = feat[self.cols_to_keep]\n        except Exception as e:\n            if self.verbose:\n                logger.error(e)\n        return feat\n\n    def update(self, feat_dict: Mapping[Any, Any]):\nr\"\"\"\n        Fill the cache with new set of features for the molecules in mols.\n\n        Args:\n            feat_dict: A dictionary of molecules to features.\n        \"\"\"\n        self.cache.update(feat_dict)\n\n    def __getstate__(self):\n\"\"\"Get the state for pickling\"\"\"\n        state = {k: copy.deepcopy(v) for k, v in self.__dict__.items() if k not in [\"cache\"]}\n        if isinstance(self.cache, FileCache):\n            state[\"file_cache_args\"] = dict(\n                cache_file=self.cache.cache_file,\n                name=self.cache.name,\n                mol_hasher=self.cache.mol_hasher,\n                n_jobs=self.cache.n_jobs,\n                verbose=self.cache.verbose,\n                file_type=self.cache.file_type,\n                parquet_kwargs=self.cache.parquet_kwargs,\n            )\n        else:\n            # EN: we do not copy the cache\n            state[\"cache\"] = self.cache\n        return state\n\n    def __setstate__(self, state):\n        if \"file_cache_args\" in state:\n            cache = FileCache(**state.pop(\"file_cache_args\"))\n            state[\"cache\"] = cache\n        return super().__setstate__(state)\n\n    def to_state_dict(self, save_to_file: bool = True) -&gt; dict:\n\"\"\"Serialize a PrecomputedMolTransformer object to a state dict.\n\n        Notes:\n            - The base_featurizer must be set or a ValueError will be raised.\n            - The cache must be a FileCache object or a ValueError will be raised.\n\n        Args:\n            save_to_file: whether to save the cache to file.\n        \"\"\"\n\n        if self.base_featurizer is None:\n            raise ValueError(\n                \"You can't serialize a PrecomputedMolTransformer that does not contain a\"\n                \" featurizer.\"\n            )\n\n        if not isinstance(self.cache, FileCache):\n            raise ValueError(\"The cache must be a FileCache object.\")\n\n        state = {}\n        state[\"name\"] = \"PrecomputedMolTransformer\"\n        state[\"base_featurizer\"] = self.base_featurizer.to_state_dict()\n        state[\"cache\"] = self.cache.to_state_dict(save_to_file=save_to_file)\n        state[\"_molfeat_version\"] = MOLFEAT_VERSION\n\n        return state\n\n    @staticmethod\n    def from_state_dict(\n        state: dict,\n        override_args: Optional[dict] = None,\n    ) -&gt; \"PrecomputedMolTransformer\":\n        # Don't alter the original state dict\n        state = copy.deepcopy(state)\n\n        args = {}\n\n        # Load the FileCache object\n        args[\"cache\"] = FileCache.from_state_dict(state[\"cache\"])\n\n        # Load the base featurizer\n        args[\"featurizer\"] = MoleculeTransformer.from_state_dict(state[\"base_featurizer\"])\n\n        if override_args is not None:\n            args.update(override_args)\n\n        # Doesn't allow state_path in the initiation args\n        args.pop(\"state_path\", None)\n        return PrecomputedMolTransformer(**args)\n\n    def from_state_file(\n        self,\n        state_path: str,\n        override_args: Optional[dict] = None,\n    ) -&gt; \"PrecomputedMolTransformer\":\n        if state_path.endswith(\"yaml\") or state_path.endswith(\"yml\"):\n            return self.from_state_yaml_file(filepath=state_path, override_args=override_args)\n        elif state_path.endswith(\"json\"):\n            return self.from_state_json_file(filepath=state_path, override_args=override_args)\n        else:\n            raise ValueError(\n                \"Only files with 'yaml' or 'json' format are allowed. \"\n                \"The filename must be ending with `yaml`, 'yml' or 'json'.\"\n            )\n</code></pre>"},{"location":"api/molfeat.trans.base.html#molfeat.trans.base.PrecomputedMolTransformer.__dict__","title":"<code>__dict__ = self.from_state_file(state_path=state_path).__dict__.copy()</code>  <code>instance-attribute</code>","text":""},{"location":"api/molfeat.trans.base.html#molfeat.trans.base.PrecomputedMolTransformer.base_featurizer","title":"<code>base_featurizer = MoleculeTransformer(featurizer, args, None=kwargs)</code>  <code>instance-attribute</code>","text":""},{"location":"api/molfeat.trans.base.html#molfeat.trans.base.PrecomputedMolTransformer.cache","title":"<code>cache = cache_dict[self.cache_key]</code>  <code>instance-attribute</code>","text":""},{"location":"api/molfeat.trans.base.html#molfeat.trans.base.PrecomputedMolTransformer.cache_key","title":"<code>cache_key = cache_key</code>  <code>instance-attribute</code>","text":""},{"location":"api/molfeat.trans.base.html#molfeat.trans.base.PrecomputedMolTransformer.length","title":"<code>length = len(list(self.cache.values())[0])</code>  <code>instance-attribute</code>","text":""},{"location":"api/molfeat.trans.base.html#molfeat.trans.base.PrecomputedMolTransformer.__getstate__","title":"<code>__getstate__()</code>","text":"<p>Get the state for pickling</p> Source code in <code>molfeat/trans/base.py</code> <pre><code>def __getstate__(self):\n\"\"\"Get the state for pickling\"\"\"\n    state = {k: copy.deepcopy(v) for k, v in self.__dict__.items() if k not in [\"cache\"]}\n    if isinstance(self.cache, FileCache):\n        state[\"file_cache_args\"] = dict(\n            cache_file=self.cache.cache_file,\n            name=self.cache.name,\n            mol_hasher=self.cache.mol_hasher,\n            n_jobs=self.cache.n_jobs,\n            verbose=self.cache.verbose,\n            file_type=self.cache.file_type,\n            parquet_kwargs=self.cache.parquet_kwargs,\n        )\n    else:\n        # EN: we do not copy the cache\n        state[\"cache\"] = self.cache\n    return state\n</code></pre>"},{"location":"api/molfeat.trans.base.html#molfeat.trans.base.PrecomputedMolTransformer.__init__","title":"<code>__init__(cache=None, cache_dict=None, cache_key=None, *args, featurizer=None, state_path=None, **kwargs)</code>","text":"<p>Transformer that supports precomputation of features. You can either pass an empty cache or a pre-populated cache</p> <p>Parameters:</p> Name Type Description Default <code>cache</code> <code>Optional[Union[_Cache, Mapping[Any, Any], CacheList]]</code> <p>a datastructure of type mapping that maps each molecule to the precomputed features</p> <code>None</code> <code>cache_dict</code> <code>Optional[Dict[str, Union[_Cache, Mapping[Any, Any], CacheList]]]</code> <p>A dictionary of cache objects. This is a convenient structure when use multiple datacache for model selection.</p> <code>None</code> <code>cache_key</code> <code>Optional[str]</code> <p>The key of cache object to use.</p> <code>None</code> <code>featurizer</code> <code>Optional[Union[MoleculeTransformer, str]]</code> <p>optional featurizer used to compute the features of values not in the cache. Either the featurizer object or a string.</p> <code>None</code> <code>state_path</code> <code>Optional[str]</code> <p>optional state file path used to initiate the transformer object at the initialization</p> <code>None</code> Source code in <code>molfeat/trans/base.py</code> <pre><code>def __init__(\n    self,\n    cache: Optional[Union[_Cache, Mapping[Any, Any], CacheList]] = None,\n    cache_dict: Optional[Dict[str, Union[_Cache, Mapping[Any, Any], CacheList]]] = None,\n    cache_key: Optional[str] = None,\n    *args,\n    featurizer: Optional[Union[MoleculeTransformer, str]] = None,\n    state_path: Optional[str] = None,\n    **kwargs,\n):\n\"\"\"\n    Transformer that supports precomputation of features. You can either pass an empty cache or a pre-populated cache\n\n    Args:\n        cache: a datastructure of type mapping that maps each molecule to the precomputed features\n        cache_dict: A dictionary of cache objects. This is a convenient structure when use multiple\n            datacache for model selection.\n        cache_key: The key of cache object to use.\n        featurizer: optional featurizer used to compute the features of values not in the cache.\n            Either the featurizer object or a string.\n        state_path: optional state file path used to initiate the transformer object at the initialization\n    \"\"\"\n    if (state_path is not None) and (\n        (cache is not None) or (cache_dict is not None and cache_key is not None)\n    ):\n        raise ValueError(\n            \"`PrecomputedMolTransformer` can only be initiated by either `state_path` or\"\n            \" the rest of parameters for cache and featurizer. But both are given.\"\n        )\n\n    super().__init__(*args, featurizer=\"none\", **kwargs)\n\n    if state_path is not None:\n        self.__dict__ = self.from_state_file(state_path=state_path).__dict__.copy()\n    else:\n        if cache_dict is not None and cache_key is not None:\n            self.cache_key = cache_key\n            self.cache = cache_dict[self.cache_key]\n        elif cache is not None:\n            self.cache = cache\n        else:\n            raise AttributeError(\"The cache is not specified.\")\n\n        if isinstance(featurizer, str):\n            self.base_featurizer = MoleculeTransformer(featurizer, *args, **kwargs)\n        else:\n            self.base_featurizer = featurizer\n\n    # Set the length of the featurizer\n    if len(self.cache) &gt; 0:\n        self.length = len(list(self.cache.values())[0])\n    elif self.base_featurizer is not None:\n        self.length = len(self.base_featurizer)\n    else:\n        raise AttributeError(\n            \"The cache is empty and the base featurizer is not specified. It's impossible\"\n            \" to determine the length of the featurizer.\"\n        )\n</code></pre>"},{"location":"api/molfeat.trans.base.html#molfeat.trans.base.PrecomputedMolTransformer.__setstate__","title":"<code>__setstate__(state)</code>","text":"Source code in <code>molfeat/trans/base.py</code> <pre><code>def __setstate__(self, state):\n    if \"file_cache_args\" in state:\n        cache = FileCache(**state.pop(\"file_cache_args\"))\n        state[\"cache\"] = cache\n    return super().__setstate__(state)\n</code></pre>"},{"location":"api/molfeat.trans.base.html#molfeat.trans.base.PrecomputedMolTransformer.from_state_dict","title":"<code>from_state_dict(state, override_args=None)</code>  <code>staticmethod</code>","text":"Source code in <code>molfeat/trans/base.py</code> <pre><code>@staticmethod\ndef from_state_dict(\n    state: dict,\n    override_args: Optional[dict] = None,\n) -&gt; \"PrecomputedMolTransformer\":\n    # Don't alter the original state dict\n    state = copy.deepcopy(state)\n\n    args = {}\n\n    # Load the FileCache object\n    args[\"cache\"] = FileCache.from_state_dict(state[\"cache\"])\n\n    # Load the base featurizer\n    args[\"featurizer\"] = MoleculeTransformer.from_state_dict(state[\"base_featurizer\"])\n\n    if override_args is not None:\n        args.update(override_args)\n\n    # Doesn't allow state_path in the initiation args\n    args.pop(\"state_path\", None)\n    return PrecomputedMolTransformer(**args)\n</code></pre>"},{"location":"api/molfeat.trans.base.html#molfeat.trans.base.PrecomputedMolTransformer.from_state_file","title":"<code>from_state_file(state_path, override_args=None)</code>","text":"Source code in <code>molfeat/trans/base.py</code> <pre><code>def from_state_file(\n    self,\n    state_path: str,\n    override_args: Optional[dict] = None,\n) -&gt; \"PrecomputedMolTransformer\":\n    if state_path.endswith(\"yaml\") or state_path.endswith(\"yml\"):\n        return self.from_state_yaml_file(filepath=state_path, override_args=override_args)\n    elif state_path.endswith(\"json\"):\n        return self.from_state_json_file(filepath=state_path, override_args=override_args)\n    else:\n        raise ValueError(\n            \"Only files with 'yaml' or 'json' format are allowed. \"\n            \"The filename must be ending with `yaml`, 'yml' or 'json'.\"\n        )\n</code></pre>"},{"location":"api/molfeat.trans.base.html#molfeat.trans.base.PrecomputedMolTransformer.to_state_dict","title":"<code>to_state_dict(save_to_file=True)</code>","text":"<p>Serialize a PrecomputedMolTransformer object to a state dict.</p> Notes <ul> <li>The base_featurizer must be set or a ValueError will be raised.</li> <li>The cache must be a FileCache object or a ValueError will be raised.</li> </ul> <p>Parameters:</p> Name Type Description Default <code>save_to_file</code> <code>bool</code> <p>whether to save the cache to file.</p> <code>True</code> Source code in <code>molfeat/trans/base.py</code> <pre><code>def to_state_dict(self, save_to_file: bool = True) -&gt; dict:\n\"\"\"Serialize a PrecomputedMolTransformer object to a state dict.\n\n    Notes:\n        - The base_featurizer must be set or a ValueError will be raised.\n        - The cache must be a FileCache object or a ValueError will be raised.\n\n    Args:\n        save_to_file: whether to save the cache to file.\n    \"\"\"\n\n    if self.base_featurizer is None:\n        raise ValueError(\n            \"You can't serialize a PrecomputedMolTransformer that does not contain a\"\n            \" featurizer.\"\n        )\n\n    if not isinstance(self.cache, FileCache):\n        raise ValueError(\"The cache must be a FileCache object.\")\n\n    state = {}\n    state[\"name\"] = \"PrecomputedMolTransformer\"\n    state[\"base_featurizer\"] = self.base_featurizer.to_state_dict()\n    state[\"cache\"] = self.cache.to_state_dict(save_to_file=save_to_file)\n    state[\"_molfeat_version\"] = MOLFEAT_VERSION\n\n    return state\n</code></pre>"},{"location":"api/molfeat.trans.base.html#molfeat.trans.base.PrecomputedMolTransformer.update","title":"<code>update(feat_dict)</code>","text":"<p>Fill the cache with new set of features for the molecules in mols.</p> <p>Parameters:</p> Name Type Description Default <code>feat_dict</code> <code>Mapping[Any, Any]</code> <p>A dictionary of molecules to features.</p> required Source code in <code>molfeat/trans/base.py</code> <pre><code>def update(self, feat_dict: Mapping[Any, Any]):\nr\"\"\"\n    Fill the cache with new set of features for the molecules in mols.\n\n    Args:\n        feat_dict: A dictionary of molecules to features.\n    \"\"\"\n    self.cache.update(feat_dict)\n</code></pre>"},{"location":"api/molfeat.trans.concat.html","title":"molfeat.trans.concat","text":""},{"location":"api/molfeat.trans.concat.html#molfeat.trans.concat.FeatConcat","title":"<code>FeatConcat</code>","text":"<p>         Bases: <code>list</code>, <code>BaseEstimator</code></p> <p>Concatenation container for <code>FPVecTransformer</code>. This class allows merging multiple fingerprints into a single one. It gives the ability to call the following methods     - <code>fit</code>     - <code>transform</code>     - <code>fit_transform</code> on a list of transformers and concatenate the results.</p> <p>Note</p> <p>The featurization length of this featurizer is accessible via the <code>length</code> property. <code>len()</code> will return the number of base featurizer.</p> Source code in <code>molfeat/trans/concat.py</code> <pre><code>class FeatConcat(list, BaseEstimator):\nr\"\"\"\n    Concatenation container for `FPVecTransformer`. This class allows\n    merging multiple fingerprints into a single one.\n    It gives the ability to call the following methods\n        - `fit`\n        - `transform`\n        - `fit_transform`\n    on a list of transformers and concatenate the results.\n\n    !!! note\n        The featurization length of this featurizer is accessible via the `length` property.\n        `len()` will return the number of base featurizer.\n    \"\"\"\n\n    _STR_DELIMITER = \"||\"\n\n    def __init__(\n        self,\n        iterable: Optional[Union[Iterable, str]] = None,\n        dtype: Optional[Callable] = None,\n        params: Optional[Dict[str, Any]] = None,\n        collate_fn: Optional[Callable] = None,\n    ):\n\"\"\"Featurizer concatenator\n\n        Args:\n            iterable: List of featurizer to concatenate.\n            dtype: Datatype of the computed fingerprint\n            params: Optional dictionary of parameters for the featurizers when there is a need for initializing them\n            collate_fn: optional function to provide for custom collating.\n                By default the collate function will be None, which will use the torch default\n        \"\"\"\n        super().__init__()\n        self.params = params or {}\n        if isinstance(iterable, str):\n            iterable = [x.strip() for x in iterable.split(self._STR_DELIMITER)]\n        if iterable is not None:\n            for item in iterable:\n                if isinstance(item, str):\n                    item = FPVecTransformer(kind=item, **self.params.get(item, {}))\n                self.append(item)\n        self.dtype = dtype\n        self._length = None\n        self.collate_fn = collate_fn\n\n    def append(self, item):\nr\"\"\"Override the ``append`` to accept only ``FPVecTransformer``\"\"\"\n        self._check_supported(item)\n        super().append(item)\n\n    def insert(self, index, item):\nr\"\"\"Override the ``insert`` to accept only ``BaseFeaturizer``\"\"\"\n        self._check_suported(item)\n        super().insert(index, item)\n\n    def __add__(self, item):\n\"\"\"Override the `__add__` method\"\"\"\n        self._check_supported(item)\n        super().__add__(item)\n\n    def __setitem__(self, index, value):\n\"\"\"Override the `__setitem__`  method\"\"\"\n        self._check_supported(value)\n        super().__setitem__(index, value)\n\n    @property\n    def length(self):\n\"\"\"\n        Length property for Feat concatenation.  This is the sum of the length of each transformer.\n        Note that __len__ returns the number of base featurizer here instead.\n        \"\"\"\n        if self._length is None:\n            full_length = 0\n            for feat in self:\n                if isinstance(feat, FeatConcat):\n                    full_length += feat.length\n                else:\n                    full_length += len(feat)\n            self._length = full_length\n        return self._length\n\n    def _check_supported(self, item):\nr\"\"\"Check if the item is the right type\"\"\"\n        if not isinstance(item, FPVecTransformer):\n            raise ValueError(\"FPVecTransformer allowed only, provided {}\".format(type(item)))\n\n    def get_collate_fn(self, *args, **kwargs):\n\"\"\"\n        Get collate function of this featurizer. The FeatConcat featurizer use the default\n        collate function which does not do anything.\n\n        Returns:\n            fn: Collate function for pytorch or None\n        \"\"\"\n        return getattr(self, \"collate_fn\", None)\n\n    def iter_index(self, indexes: Union[int, Iterator[int]]):\nr\"\"\"\n        Allow the `FeatConcat` to be indexed using a list, or any other iterable.\n\n        Args:\n            indexes: The indexes to index the ``FeatConcat``.\n\n        Returns\n            indexed_fpconcat: A new FeatConcat object with the indexed element\n        \"\"\"\n        if not isinstance(indexes, (list, tuple)):\n            try:\n                indexes = list(indexes)\n            except TypeError:\n                indexes = [indexes]\n        return FeatConcat([self[ii] for ii in indexes])\n\n    @property\n    def columns(self):\n\"\"\"Get the list of columns for the concatenated molecules\n\n        Returns:\n            columns (list): Name of the columns of the descriptor\n        \"\"\"\n        tmp_mol = dm.to_mol(\"CC(C)O\")\n        columns = []\n        for fp in self:\n            fp_columns = getattr(fp, \"columns\", None)\n            fp_name = str(fp)\n            if fp_columns is None:\n                fp_out, _ = fp([tmp_mol])\n                fp_out = np.asarray(fp_out)\n                fp_columns = [f\"{fp_name}:{ind}\" for ind in range(fp_out.shape[-1])]\n            columns.extend(fp_columns)\n        return columns\n\n    def transform(self, mols: List[Union[rdchem.Mol, str]], **kwargs):\nr\"\"\"\n        Calls the ``FPVecTransformer.transform`` for each transformer in\n        the current list, and concatenates the resulting fingerprints.\n\n        Args:\n            mols: List of SMILES or molecules\n            kwargs: named parameters for transform (see below)\n\n        Returns:\n            fps: Computed fingerprints of size NxD, where D is the\n                sum of the length of each transformer and N is the number of input\n                molecules that have been successfully featurized.\n        \"\"\"\n\n        fps = []\n        for _, fp_trans in enumerate(self):\n            out = fp_trans.transform(mols, enforce_dtype=False, **kwargs)\n            out = datatype.cast(out, dtype=\"pandas\")\n            fps.append(out)\n        fps = pd.concat(fps, axis=1)\n        fps.columns = self.columns\n        return fps.values\n\n    def __call__(\n        self,\n        mols: List[Union[rdchem.Mol, str]],\n        enforce_dtype: bool = False,\n        ignore_errors: bool = False,\n        **kwargs,\n    ):\nr\"\"\"\n        Calls each of the internal transformer and concatenate results only on valid indices.\n\n        Args:\n            mols:  Mol or SMILES of the molecules to be transformed\n            enforce_dtype: whether to enforce the instance dtype in the generated fingerprint\n            ignore_errors: Whether to ignore errors during featurization or raise an error.\n            kwargs: Named parameters for the transform method\n\n        Returns:\n\n            fp: array\n                computed fingerprints of size NxD, where D is the\n                sum of the length of each transformer and N is the number of input\n                molecules that have been successfully featurized.\n            idx: array\n                Indices of successful featurization given the original molecule input.\n        \"\"\"\n\n        fps = []\n        valid_idx = np.zeros(len(mols))\n        for _, trans in enumerate(self):\n            fp = trans.transform(mols, ignore_errors=ignore_errors, **kwargs)\n            fp, idx = trans._filter_none(fp)\n            fps.append(fp)\n            valid_idx[idx] += 1  # increase counter of valids\n        valid_idx = np.nonzero(valid_idx == len(self))[0]\n        fps = np.concatenate(fps, axis=1)\n        if self.dtype is not None and enforce_dtype:\n            fps = datatype.cast(fps, dtype=self.dtype, columns=self.columns)\n        if not ignore_errors:\n            return fps\n        return fps, list(valid_idx)\n\n    def fit_transform(\n        self,\n        mols: List[Union[str, rdchem.Mol]],\n        y: Optional[Iterable] = None,\n        fit_kwargs: Dict = None,\n        trans_kwargs: Dict = None,\n    ):\nr\"\"\"\n        Calls the ``self.fit`` followed by the ``fit.transform`` for each transfomer in\n        the current list, and concatenates the resulting fingerprints.\n\n        Args:\n            mols: List of SMILES or molecules\n            y: target for the fitting. Usually ignored for FPVecTransformer\n            fit_kwargs:  named parameters for fit\n            fit_kwargs:named parameters for transform\n\n        Returns:\n\n            fp: computed fingerprints of size NxD, where D is the\n                sum of the length of each transformer and N is the number of input\n                molecules that have been successfully featurized.\n        \"\"\"\n        fit_kwargs = {} if fit_kwargs is None else fit_kwargs\n        trans_kwargs = {} if trans_kwargs is None else trans_kwargs\n        self.fit(mols, y=y, **fit_kwargs)\n        return self.transform(mols, **trans_kwargs)\n\n    def fit(self, X: List[Union[rdchem.Mol, str]], y=None, **kwargs):\nr\"\"\"\n        Calls the ``FPVecTransformer.fit`` for each transformer in the current list.\n\n        Args:\n            X: input list of molecules\n            y (list, optional): Optional list of molecular properties. Defaults to None.\n\n        Returns:\n            self: FeatConcat instance after fitting\n        \"\"\"\n\n        for _, fp_trans in enumerate(self):\n            fp_trans.fit(X, y=y, **kwargs)\n        return self\n</code></pre>"},{"location":"api/molfeat.trans.concat.html#molfeat.trans.concat.FeatConcat.collate_fn","title":"<code>collate_fn = collate_fn</code>  <code>instance-attribute</code>","text":""},{"location":"api/molfeat.trans.concat.html#molfeat.trans.concat.FeatConcat.columns","title":"<code>columns</code>  <code>property</code>","text":"<p>Get the list of columns for the concatenated molecules</p> <p>Returns:</p> Name Type Description <code>columns</code> <code>list</code> <p>Name of the columns of the descriptor</p>"},{"location":"api/molfeat.trans.concat.html#molfeat.trans.concat.FeatConcat.dtype","title":"<code>dtype = dtype</code>  <code>instance-attribute</code>","text":""},{"location":"api/molfeat.trans.concat.html#molfeat.trans.concat.FeatConcat.length","title":"<code>length</code>  <code>property</code>","text":"<p>Length property for Feat concatenation.  This is the sum of the length of each transformer. Note that len returns the number of base featurizer here instead.</p>"},{"location":"api/molfeat.trans.concat.html#molfeat.trans.concat.FeatConcat.params","title":"<code>params = params or {}</code>  <code>instance-attribute</code>","text":""},{"location":"api/molfeat.trans.concat.html#molfeat.trans.concat.FeatConcat.__add__","title":"<code>__add__(item)</code>","text":"<p>Override the <code>__add__</code> method</p> Source code in <code>molfeat/trans/concat.py</code> <pre><code>def __add__(self, item):\n\"\"\"Override the `__add__` method\"\"\"\n    self._check_supported(item)\n    super().__add__(item)\n</code></pre>"},{"location":"api/molfeat.trans.concat.html#molfeat.trans.concat.FeatConcat.__call__","title":"<code>__call__(mols, enforce_dtype=False, ignore_errors=False, **kwargs)</code>","text":"<p>Calls each of the internal transformer and concatenate results only on valid indices.</p> <p>Parameters:</p> Name Type Description Default <code>mols</code> <code>List[Union[rdchem.Mol, str]]</code> <p>Mol or SMILES of the molecules to be transformed</p> required <code>enforce_dtype</code> <code>bool</code> <p>whether to enforce the instance dtype in the generated fingerprint</p> <code>False</code> <code>ignore_errors</code> <code>bool</code> <p>Whether to ignore errors during featurization or raise an error.</p> <code>False</code> <code>kwargs</code> <p>Named parameters for the transform method</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>fp</code> <p>array computed fingerprints of size NxD, where D is the sum of the length of each transformer and N is the number of input molecules that have been successfully featurized.</p> <code>idx</code> <p>array Indices of successful featurization given the original molecule input.</p> Source code in <code>molfeat/trans/concat.py</code> <pre><code>def __call__(\n    self,\n    mols: List[Union[rdchem.Mol, str]],\n    enforce_dtype: bool = False,\n    ignore_errors: bool = False,\n    **kwargs,\n):\nr\"\"\"\n    Calls each of the internal transformer and concatenate results only on valid indices.\n\n    Args:\n        mols:  Mol or SMILES of the molecules to be transformed\n        enforce_dtype: whether to enforce the instance dtype in the generated fingerprint\n        ignore_errors: Whether to ignore errors during featurization or raise an error.\n        kwargs: Named parameters for the transform method\n\n    Returns:\n\n        fp: array\n            computed fingerprints of size NxD, where D is the\n            sum of the length of each transformer and N is the number of input\n            molecules that have been successfully featurized.\n        idx: array\n            Indices of successful featurization given the original molecule input.\n    \"\"\"\n\n    fps = []\n    valid_idx = np.zeros(len(mols))\n    for _, trans in enumerate(self):\n        fp = trans.transform(mols, ignore_errors=ignore_errors, **kwargs)\n        fp, idx = trans._filter_none(fp)\n        fps.append(fp)\n        valid_idx[idx] += 1  # increase counter of valids\n    valid_idx = np.nonzero(valid_idx == len(self))[0]\n    fps = np.concatenate(fps, axis=1)\n    if self.dtype is not None and enforce_dtype:\n        fps = datatype.cast(fps, dtype=self.dtype, columns=self.columns)\n    if not ignore_errors:\n        return fps\n    return fps, list(valid_idx)\n</code></pre>"},{"location":"api/molfeat.trans.concat.html#molfeat.trans.concat.FeatConcat.__init__","title":"<code>__init__(iterable=None, dtype=None, params=None, collate_fn=None)</code>","text":"<p>Featurizer concatenator</p> <p>Parameters:</p> Name Type Description Default <code>iterable</code> <code>Optional[Union[Iterable, str]]</code> <p>List of featurizer to concatenate.</p> <code>None</code> <code>dtype</code> <code>Optional[Callable]</code> <p>Datatype of the computed fingerprint</p> <code>None</code> <code>params</code> <code>Optional[Dict[str, Any]]</code> <p>Optional dictionary of parameters for the featurizers when there is a need for initializing them</p> <code>None</code> <code>collate_fn</code> <code>Optional[Callable]</code> <p>optional function to provide for custom collating. By default the collate function will be None, which will use the torch default</p> <code>None</code> Source code in <code>molfeat/trans/concat.py</code> <pre><code>def __init__(\n    self,\n    iterable: Optional[Union[Iterable, str]] = None,\n    dtype: Optional[Callable] = None,\n    params: Optional[Dict[str, Any]] = None,\n    collate_fn: Optional[Callable] = None,\n):\n\"\"\"Featurizer concatenator\n\n    Args:\n        iterable: List of featurizer to concatenate.\n        dtype: Datatype of the computed fingerprint\n        params: Optional dictionary of parameters for the featurizers when there is a need for initializing them\n        collate_fn: optional function to provide for custom collating.\n            By default the collate function will be None, which will use the torch default\n    \"\"\"\n    super().__init__()\n    self.params = params or {}\n    if isinstance(iterable, str):\n        iterable = [x.strip() for x in iterable.split(self._STR_DELIMITER)]\n    if iterable is not None:\n        for item in iterable:\n            if isinstance(item, str):\n                item = FPVecTransformer(kind=item, **self.params.get(item, {}))\n            self.append(item)\n    self.dtype = dtype\n    self._length = None\n    self.collate_fn = collate_fn\n</code></pre>"},{"location":"api/molfeat.trans.concat.html#molfeat.trans.concat.FeatConcat.__setitem__","title":"<code>__setitem__(index, value)</code>","text":"<p>Override the <code>__setitem__</code>  method</p> Source code in <code>molfeat/trans/concat.py</code> <pre><code>def __setitem__(self, index, value):\n\"\"\"Override the `__setitem__`  method\"\"\"\n    self._check_supported(value)\n    super().__setitem__(index, value)\n</code></pre>"},{"location":"api/molfeat.trans.concat.html#molfeat.trans.concat.FeatConcat.append","title":"<code>append(item)</code>","text":"<p>Override the <code>append</code> to accept only <code>FPVecTransformer</code></p> Source code in <code>molfeat/trans/concat.py</code> <pre><code>def append(self, item):\nr\"\"\"Override the ``append`` to accept only ``FPVecTransformer``\"\"\"\n    self._check_supported(item)\n    super().append(item)\n</code></pre>"},{"location":"api/molfeat.trans.concat.html#molfeat.trans.concat.FeatConcat.fit","title":"<code>fit(X, y=None, **kwargs)</code>","text":"<p>Calls the <code>FPVecTransformer.fit</code> for each transformer in the current list.</p> <p>Parameters:</p> Name Type Description Default <code>X</code> <code>List[Union[rdchem.Mol, str]]</code> <p>input list of molecules</p> required <code>y</code> <code>list</code> <p>Optional list of molecular properties. Defaults to None.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>self</code> <p>FeatConcat instance after fitting</p> Source code in <code>molfeat/trans/concat.py</code> <pre><code>def fit(self, X: List[Union[rdchem.Mol, str]], y=None, **kwargs):\nr\"\"\"\n    Calls the ``FPVecTransformer.fit`` for each transformer in the current list.\n\n    Args:\n        X: input list of molecules\n        y (list, optional): Optional list of molecular properties. Defaults to None.\n\n    Returns:\n        self: FeatConcat instance after fitting\n    \"\"\"\n\n    for _, fp_trans in enumerate(self):\n        fp_trans.fit(X, y=y, **kwargs)\n    return self\n</code></pre>"},{"location":"api/molfeat.trans.concat.html#molfeat.trans.concat.FeatConcat.fit_transform","title":"<code>fit_transform(mols, y=None, fit_kwargs=None, trans_kwargs=None)</code>","text":"<p>Calls the <code>self.fit</code> followed by the <code>fit.transform</code> for each transfomer in the current list, and concatenates the resulting fingerprints.</p> <p>Parameters:</p> Name Type Description Default <code>mols</code> <code>List[Union[str, rdchem.Mol]]</code> <p>List of SMILES or molecules</p> required <code>y</code> <code>Optional[Iterable]</code> <p>target for the fitting. Usually ignored for FPVecTransformer</p> <code>None</code> <code>fit_kwargs</code> <code>Dict</code> <p>named parameters for fit</p> <code>None</code> <code>fit_kwargs</code> <code>Dict</code> <p>named parameters for transform</p> <code>None</code> <p>Returns:</p> Name Type Description <code>fp</code> <p>computed fingerprints of size NxD, where D is the sum of the length of each transformer and N is the number of input molecules that have been successfully featurized.</p> Source code in <code>molfeat/trans/concat.py</code> <pre><code>def fit_transform(\n    self,\n    mols: List[Union[str, rdchem.Mol]],\n    y: Optional[Iterable] = None,\n    fit_kwargs: Dict = None,\n    trans_kwargs: Dict = None,\n):\nr\"\"\"\n    Calls the ``self.fit`` followed by the ``fit.transform`` for each transfomer in\n    the current list, and concatenates the resulting fingerprints.\n\n    Args:\n        mols: List of SMILES or molecules\n        y: target for the fitting. Usually ignored for FPVecTransformer\n        fit_kwargs:  named parameters for fit\n        fit_kwargs:named parameters for transform\n\n    Returns:\n\n        fp: computed fingerprints of size NxD, where D is the\n            sum of the length of each transformer and N is the number of input\n            molecules that have been successfully featurized.\n    \"\"\"\n    fit_kwargs = {} if fit_kwargs is None else fit_kwargs\n    trans_kwargs = {} if trans_kwargs is None else trans_kwargs\n    self.fit(mols, y=y, **fit_kwargs)\n    return self.transform(mols, **trans_kwargs)\n</code></pre>"},{"location":"api/molfeat.trans.concat.html#molfeat.trans.concat.FeatConcat.get_collate_fn","title":"<code>get_collate_fn(*args, **kwargs)</code>","text":"<p>Get collate function of this featurizer. The FeatConcat featurizer use the default collate function which does not do anything.</p> <p>Returns:</p> Name Type Description <code>fn</code> <p>Collate function for pytorch or None</p> Source code in <code>molfeat/trans/concat.py</code> <pre><code>def get_collate_fn(self, *args, **kwargs):\n\"\"\"\n    Get collate function of this featurizer. The FeatConcat featurizer use the default\n    collate function which does not do anything.\n\n    Returns:\n        fn: Collate function for pytorch or None\n    \"\"\"\n    return getattr(self, \"collate_fn\", None)\n</code></pre>"},{"location":"api/molfeat.trans.concat.html#molfeat.trans.concat.FeatConcat.insert","title":"<code>insert(index, item)</code>","text":"<p>Override the <code>insert</code> to accept only <code>BaseFeaturizer</code></p> Source code in <code>molfeat/trans/concat.py</code> <pre><code>def insert(self, index, item):\nr\"\"\"Override the ``insert`` to accept only ``BaseFeaturizer``\"\"\"\n    self._check_suported(item)\n    super().insert(index, item)\n</code></pre>"},{"location":"api/molfeat.trans.concat.html#molfeat.trans.concat.FeatConcat.iter_index","title":"<code>iter_index(indexes)</code>","text":"<p>Allow the <code>FeatConcat</code> to be indexed using a list, or any other iterable.</p> <p>Parameters:</p> Name Type Description Default <code>indexes</code> <code>Union[int, Iterator[int]]</code> <p>The indexes to index the <code>FeatConcat</code>.</p> required <p>Returns     indexed_fpconcat: A new FeatConcat object with the indexed element</p> Source code in <code>molfeat/trans/concat.py</code> <pre><code>def iter_index(self, indexes: Union[int, Iterator[int]]):\nr\"\"\"\n    Allow the `FeatConcat` to be indexed using a list, or any other iterable.\n\n    Args:\n        indexes: The indexes to index the ``FeatConcat``.\n\n    Returns\n        indexed_fpconcat: A new FeatConcat object with the indexed element\n    \"\"\"\n    if not isinstance(indexes, (list, tuple)):\n        try:\n            indexes = list(indexes)\n        except TypeError:\n            indexes = [indexes]\n    return FeatConcat([self[ii] for ii in indexes])\n</code></pre>"},{"location":"api/molfeat.trans.concat.html#molfeat.trans.concat.FeatConcat.transform","title":"<code>transform(mols, **kwargs)</code>","text":"<p>Calls the <code>FPVecTransformer.transform</code> for each transformer in the current list, and concatenates the resulting fingerprints.</p> <p>Parameters:</p> Name Type Description Default <code>mols</code> <code>List[Union[rdchem.Mol, str]]</code> <p>List of SMILES or molecules</p> required <code>kwargs</code> <p>named parameters for transform (see below)</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>fps</code> <p>Computed fingerprints of size NxD, where D is the sum of the length of each transformer and N is the number of input molecules that have been successfully featurized.</p> Source code in <code>molfeat/trans/concat.py</code> <pre><code>def transform(self, mols: List[Union[rdchem.Mol, str]], **kwargs):\nr\"\"\"\n    Calls the ``FPVecTransformer.transform`` for each transformer in\n    the current list, and concatenates the resulting fingerprints.\n\n    Args:\n        mols: List of SMILES or molecules\n        kwargs: named parameters for transform (see below)\n\n    Returns:\n        fps: Computed fingerprints of size NxD, where D is the\n            sum of the length of each transformer and N is the number of input\n            molecules that have been successfully featurized.\n    \"\"\"\n\n    fps = []\n    for _, fp_trans in enumerate(self):\n        out = fp_trans.transform(mols, enforce_dtype=False, **kwargs)\n        out = datatype.cast(out, dtype=\"pandas\")\n        fps.append(out)\n    fps = pd.concat(fps, axis=1)\n    fps.columns = self.columns\n    return fps.values\n</code></pre>"},{"location":"api/molfeat.trans.fp.html","title":"molfeat.trans.fp","text":""},{"location":"api/molfeat.trans.fp.html#molfeat.trans.fp.FPVecFilteredTransformer","title":"<code>FPVecFilteredTransformer</code>","text":"<p>         Bases: <code>FPVecTransformer</code></p> <p>Fingerprint molecule transformer with columns filters applying to the featurized vector when <code>fit</code> is called</p> Source code in <code>molfeat/trans/fp.py</code> <pre><code>class FPVecFilteredTransformer(FPVecTransformer):\nr\"\"\"\n    Fingerprint molecule transformer with columns filters applying to the featurized vector when `fit` is called\n    \"\"\"\n\n    def __init__(\n        self,\n        kind: str = \"ecfp:4\",\n        length: int = 2000,\n        occ_threshold: float = 0,\n        del_invariant: bool = False,\n        n_jobs: int = 1,\n        verbose: bool = False,\n        dtype: Callable = np.float32,\n        **params,\n    ):\n\"\"\"Molecular to vector featurization with filtering applied\n\n        Args:\n            kind (str, optional): Name of the fingerprints (one supported fingerprints: see self.AVAILABLE_FPS). Defaults to \"ecfp4\".\n            length (int, optional): Length of the fingerprint. Defaults to 2000.\n            occ_threshold (float, optional): Minimum proportion a columns need to be non null to be kept.\n            del_invariant (bool, optional): Whether to delete columns that are invariant.\n            n_jobs (int, optional): Number of jobs. Defaults to 1.\n            verbose (bool, optional): Verbosity level. Defaults to False.\n            dtype (Callable, optional): Data type. Defaults to np.float32.\n            params (dict, optional): Any additional parameters to the fingerprint function\n        \"\"\"\n\n        super().__init__(\n            kind=kind,\n            length=length,\n            n_jobs=n_jobs,\n            verbose=verbose,\n            dtype=dtype,\n            **params,\n        )\n        self.occ_threshold = occ_threshold\n        self.del_invariant = del_invariant\n        self._input_params.update(occ_threshold=occ_threshold, del_invariant=del_invariant)\n\n    def _update_params(self):\n        params = copy.deepcopy(self._input_params)\n        params.pop(\"featurizer\", None)\n        params.pop(\"length\", None)\n        params.pop(\"kind\", None)\n        params.pop(\"verbose\", None)\n        params.pop(\"dtype\", None)\n        params.pop(\"n_jobs\", None)\n        params.pop(\"callbacks\", None)\n        params.pop(\"occ_threshold\", None)\n        params.pop(\"del_invariant\", None)\n        self.featurizer = self._prepare_featurizer(self.kind, self.length, **params)\n\n    def __repr__(self):\n        return \"{} (kind={}, length={}, occ_threshold={}, del_invariant={}, dtype={})\".format(\n            self.__class__.__name__,\n            _parse_to_evaluable_str(self.kind),\n            _parse_to_evaluable_str(self.length),\n            _parse_to_evaluable_str(self.occ_threshold),\n            _parse_to_evaluable_str(self.del_invariant),\n            _parse_to_evaluable_str(self.dtype),\n        )\n\n    def fit(self, X: List[Union[rdchem.Mol, str]], y: Optional[list] = None, **fit_params):\n\"\"\"Fit the current transformer on given dataset.\n\n        The goal of fitting is for example to identify nan columns values\n        that needs to be removed from the dataset\n\n        Args:\n            X: input list of molecules\n            y (list, optional): Optional list of molecular properties. Defaults to None.\n\n        Returns:\n            self: MolTransformer instance after fitting\n        \"\"\"\n\n        feats = self.transform(X, ignore_errors=True)\n        lengths = [len(x) for x in feats if not datatype.is_null(x)]\n\n        if lengths:\n            # we will ignore all nan\n            feats = datatype.to_numpy([f for f in feats if not datatype.is_null(f)])\n            # all nan columns\n            unwanted_columns = []\n            # let's adjsut occ to float\n            occ_threshold = self.occ_threshold\n            if occ_threshold &gt; 1:\n                occ_threshold = occ_threshold / feats.shape[0]\n            # not nan\n            unwanted_columns.append(~np.any(np.isnan(feats), axis=0))\n            # not enough set bits\n            unwanted_columns.append(\n                (np.count_nonzero(feats, axis=0) / feats.shape[0]) &gt; occ_threshold\n            )\n            if self.del_invariant:\n                unwanted_columns.append(~np.all(feats == feats[0, :], axis=0))\n            self.cols_to_keep = (np.logical_and.reduce(unwanted_columns)).nonzero()[0]\n        self._fitted = True\n        return self\n</code></pre>"},{"location":"api/molfeat.trans.fp.html#molfeat.trans.fp.FPVecFilteredTransformer.del_invariant","title":"<code>del_invariant = del_invariant</code>  <code>instance-attribute</code>","text":""},{"location":"api/molfeat.trans.fp.html#molfeat.trans.fp.FPVecFilteredTransformer.occ_threshold","title":"<code>occ_threshold = occ_threshold</code>  <code>instance-attribute</code>","text":""},{"location":"api/molfeat.trans.fp.html#molfeat.trans.fp.FPVecFilteredTransformer.__init__","title":"<code>__init__(kind='ecfp:4', length=2000, occ_threshold=0, del_invariant=False, n_jobs=1, verbose=False, dtype=np.float32, **params)</code>","text":"<p>Molecular to vector featurization with filtering applied</p> <p>Parameters:</p> Name Type Description Default <code>kind</code> <code>str</code> <p>Name of the fingerprints (one supported fingerprints: see self.AVAILABLE_FPS). Defaults to \"ecfp4\".</p> <code>'ecfp:4'</code> <code>length</code> <code>int</code> <p>Length of the fingerprint. Defaults to 2000.</p> <code>2000</code> <code>occ_threshold</code> <code>float</code> <p>Minimum proportion a columns need to be non null to be kept.</p> <code>0</code> <code>del_invariant</code> <code>bool</code> <p>Whether to delete columns that are invariant.</p> <code>False</code> <code>n_jobs</code> <code>int</code> <p>Number of jobs. Defaults to 1.</p> <code>1</code> <code>verbose</code> <code>bool</code> <p>Verbosity level. Defaults to False.</p> <code>False</code> <code>dtype</code> <code>Callable</code> <p>Data type. Defaults to np.float32.</p> <code>np.float32</code> <code>params</code> <code>dict</code> <p>Any additional parameters to the fingerprint function</p> <code>{}</code> Source code in <code>molfeat/trans/fp.py</code> <pre><code>def __init__(\n    self,\n    kind: str = \"ecfp:4\",\n    length: int = 2000,\n    occ_threshold: float = 0,\n    del_invariant: bool = False,\n    n_jobs: int = 1,\n    verbose: bool = False,\n    dtype: Callable = np.float32,\n    **params,\n):\n\"\"\"Molecular to vector featurization with filtering applied\n\n    Args:\n        kind (str, optional): Name of the fingerprints (one supported fingerprints: see self.AVAILABLE_FPS). Defaults to \"ecfp4\".\n        length (int, optional): Length of the fingerprint. Defaults to 2000.\n        occ_threshold (float, optional): Minimum proportion a columns need to be non null to be kept.\n        del_invariant (bool, optional): Whether to delete columns that are invariant.\n        n_jobs (int, optional): Number of jobs. Defaults to 1.\n        verbose (bool, optional): Verbosity level. Defaults to False.\n        dtype (Callable, optional): Data type. Defaults to np.float32.\n        params (dict, optional): Any additional parameters to the fingerprint function\n    \"\"\"\n\n    super().__init__(\n        kind=kind,\n        length=length,\n        n_jobs=n_jobs,\n        verbose=verbose,\n        dtype=dtype,\n        **params,\n    )\n    self.occ_threshold = occ_threshold\n    self.del_invariant = del_invariant\n    self._input_params.update(occ_threshold=occ_threshold, del_invariant=del_invariant)\n</code></pre>"},{"location":"api/molfeat.trans.fp.html#molfeat.trans.fp.FPVecFilteredTransformer.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>molfeat/trans/fp.py</code> <pre><code>def __repr__(self):\n    return \"{} (kind={}, length={}, occ_threshold={}, del_invariant={}, dtype={})\".format(\n        self.__class__.__name__,\n        _parse_to_evaluable_str(self.kind),\n        _parse_to_evaluable_str(self.length),\n        _parse_to_evaluable_str(self.occ_threshold),\n        _parse_to_evaluable_str(self.del_invariant),\n        _parse_to_evaluable_str(self.dtype),\n    )\n</code></pre>"},{"location":"api/molfeat.trans.fp.html#molfeat.trans.fp.FPVecFilteredTransformer.fit","title":"<code>fit(X, y=None, **fit_params)</code>","text":"<p>Fit the current transformer on given dataset.</p> <p>The goal of fitting is for example to identify nan columns values that needs to be removed from the dataset</p> <p>Parameters:</p> Name Type Description Default <code>X</code> <code>List[Union[rdchem.Mol, str]]</code> <p>input list of molecules</p> required <code>y</code> <code>list</code> <p>Optional list of molecular properties. Defaults to None.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>self</code> <p>MolTransformer instance after fitting</p> Source code in <code>molfeat/trans/fp.py</code> <pre><code>def fit(self, X: List[Union[rdchem.Mol, str]], y: Optional[list] = None, **fit_params):\n\"\"\"Fit the current transformer on given dataset.\n\n    The goal of fitting is for example to identify nan columns values\n    that needs to be removed from the dataset\n\n    Args:\n        X: input list of molecules\n        y (list, optional): Optional list of molecular properties. Defaults to None.\n\n    Returns:\n        self: MolTransformer instance after fitting\n    \"\"\"\n\n    feats = self.transform(X, ignore_errors=True)\n    lengths = [len(x) for x in feats if not datatype.is_null(x)]\n\n    if lengths:\n        # we will ignore all nan\n        feats = datatype.to_numpy([f for f in feats if not datatype.is_null(f)])\n        # all nan columns\n        unwanted_columns = []\n        # let's adjsut occ to float\n        occ_threshold = self.occ_threshold\n        if occ_threshold &gt; 1:\n            occ_threshold = occ_threshold / feats.shape[0]\n        # not nan\n        unwanted_columns.append(~np.any(np.isnan(feats), axis=0))\n        # not enough set bits\n        unwanted_columns.append(\n            (np.count_nonzero(feats, axis=0) / feats.shape[0]) &gt; occ_threshold\n        )\n        if self.del_invariant:\n            unwanted_columns.append(~np.all(feats == feats[0, :], axis=0))\n        self.cols_to_keep = (np.logical_and.reduce(unwanted_columns)).nonzero()[0]\n    self._fitted = True\n    return self\n</code></pre>"},{"location":"api/molfeat.trans.fp.html#molfeat.trans.fp.FPVecTransformer","title":"<code>FPVecTransformer</code>","text":"<p>         Bases: <code>MoleculeTransformer</code></p> <p>Molecular fingerprinter that computes various fingerprints and descriptors regularly used in QSAR modeling.</p> <p>Note</p> <p>For fingerprints with a radius parameter, you can provide the radius using the notation \"fp:radius\". For example \"Morgan Circular 2\" can be written as \"morgan:2\". Under the hood, morgan and ecfp fingerprints are equated with the proper radius/diameter adjustment.</p> <p>For counting fingerprints, you just need to add the '-count' suffix to the name of the fingerprint. For example: \"morgan-count:2\"</p> Source code in <code>molfeat/trans/fp.py</code> <pre><code>class FPVecTransformer(MoleculeTransformer):\nr\"\"\"\n    Molecular fingerprinter that computes various fingerprints and descriptors regularly used in QSAR modeling.\n\n    !!! note\n        For fingerprints with a radius parameter, you can provide the radius using the notation \"fp:radius\".\n        For example \"Morgan Circular 2\" can be written as \"morgan:2\". Under the hood, morgan and ecfp fingerprints\n        are equated with the proper radius/diameter adjustment.\n\n        For counting fingerprints, you just need to add the '-count' suffix to the name of the fingerprint. For example:\n        \"morgan-count:2\"\n    \"\"\"\n\n    AVAILABLE_FPS = list(FP_FUNCS.keys()) + [\n        \"desc3D\",\n        \"desc2D\",\n        \"mordred\",\n        \"cats2D\",\n        \"cats3D\",\n        \"pharm2D\",\n        \"pharm3D\",\n        \"scaffoldkeys\",\n        \"skeys\",\n    ]\n\n    def __init__(\n        self,\n        kind: str = \"ecfp:4\",\n        length: int = 2000,\n        n_jobs: int = 1,\n        verbose: bool = False,\n        dtype: Callable = np.float32,\n        parallel_kwargs: Optional[dict] = None,\n        **params,\n    ):\n\"\"\"Molecular to vector fingerprinter\n\n        Args:\n            kind (str, optional): Name of the fingerprints (one supported fingerprints: see self.AVAILABLE_FPS). Defaults to \"ecfp4\".\n            length (int, optional): Length of the fingerprint. Defaults to 2000.\n            n_jobs (int, optional): Number of jobs. Defaults to 1.\n            verbose (bool, optional): Verbosity level. Defaults to False.\n            dtype (Callable, optional): Data type. Defaults to np.float32.\n            parallel_kwargs (dict, optional): Optional arguments to pass to dm.parallelized when required. Defaults to None.\n            params (dict, optional): Any additional parameters to the fingerprint function\n        \"\"\"\n        self._save_input_args()\n\n        # remove any featurizer that was passed as argument\n        params.pop(\"featurizer\", None)\n        self._feat_params = params\n        featurizer = self._prepare_featurizer(kind, length, **params)\n        super().__init__(\n            featurizer=featurizer,\n            n_jobs=n_jobs,\n            verbose=verbose,\n            dtype=dtype,\n            parallel_kwargs=parallel_kwargs,\n            **params,\n        )\n        self.kind = kind\n        self.length = length\n        self._length = None\n        # update length for featurizer that have they fixed length\n        # EN: setting up a protected _length function helps to bypass\n        # the absurd \"is\" comparison done by sklearn in clone\n        # note that the featurizer length would likely be ignored by featurizer\n        # that do not support a variable length\n        if hasattr(self.featurizer, \"__len__\"):\n            self._length = len(featurizer)\n        self._input_params.update(kind=kind, length=length)\n        if self.kind.lower() in _UNSERIALIZABLE_FPS:\n            self.parallel_kwargs.update(scheduler=\"threads\")\n\n    def __len__(self):\n\"\"\"Compute featurizer length\"\"\"\n        if getattr(self, \"cols_to_keep\", None) is None and self._length is not None:\n            return self._length\n        return super().__len__()\n\n    def _get_param_names(self):\n\"\"\"Get parameter names for the estimator\"\"\"\n        out = self._input_params.keys()\n        return [x for x in out if x != \"featurizer\"]\n\n    @classmethod\n    def _prepare_featurizer(cls, kind: str, length: int, **params):\n\"\"\"Prepare featurizer from its name and parameters\n\n        Args:\n            kind: Name of the featurizer\n            length: Length of the featurizer\n        Returns:\n            calculator (Callable): fingerprint calculator\n        \"\"\"\n        match = re.search(r\":(\\d+)$\", kind)\n        radius = None\n        if match is not None:\n            radius = match.group(1)\n        if radius is not None:\n            kind = kind.replace(radius, \"\").strip(\":\").lower()\n            radius = int(radius)\n            if any(x in kind for x in [\"ecfp\", \"fcfp\"]):\n                radius = max(radius // 2, 1)\n            params[\"radius\"] = radius\n        if any(x in kind for x in [\"morgan\", \"morgan_circular\", \"morgan-circular\"]):\n            kind.replace(\"_circular\", \"\").replace(\"-circular\", \"\").replace(\"morgan\", \"ecfp\")\n        if kind not in cls.AVAILABLE_FPS:\n            raise ValueError(f\"{kind} is not a valid featurizer\")\n        params[\"length\"] = length\n\n        return get_calculator(kind, **params)\n\n    def _update_params(self):\n        params = copy.deepcopy(self._input_params)\n        params.pop(\"featurizer\", None)\n        params.pop(\"length\", None)\n        params.pop(\"kind\", None)\n        params.pop(\"verbose\", None)\n        params.pop(\"dtype\", None)\n        params.pop(\"n_jobs\", None)\n        params.pop(\"callbacks\", None)\n        self._fitted = False\n        self.featurizer = self._prepare_featurizer(self.kind, self.length, **params)\n\n    def __repr__(self):\n        return \"{}(kind={}, length={}, dtype={})\".format(\n            self.__class__.__name__,\n            _parse_to_evaluable_str(self.kind),\n            _parse_to_evaluable_str(self.length),\n            _parse_to_evaluable_str(self.dtype),\n        )\n\n    def __str__(self):\n        # The output for the print function\n        return self.__repr__()\n\n    def __eq__(self, other):\n        same_type = type(self) == type(other)\n        return same_type and all(\n            [getattr(other, k) == v for k, v in self.get_params() if not callable(v)]\n        )\n\n    def __ne__(self, other):\n        return not (self == other)\n\n    def __hash__(self):\n        return hash(repr(self))\n</code></pre>"},{"location":"api/molfeat.trans.fp.html#molfeat.trans.fp.FPVecTransformer.AVAILABLE_FPS","title":"<code>AVAILABLE_FPS = list(FP_FUNCS.keys()) + ['desc3D', 'desc2D', 'mordred', 'cats2D', 'cats3D', 'pharm2D', 'pharm3D', 'scaffoldkeys', 'skeys']</code>  <code>class-attribute</code>","text":""},{"location":"api/molfeat.trans.fp.html#molfeat.trans.fp.FPVecTransformer.kind","title":"<code>kind = kind</code>  <code>instance-attribute</code>","text":""},{"location":"api/molfeat.trans.fp.html#molfeat.trans.fp.FPVecTransformer.length","title":"<code>length = length</code>  <code>instance-attribute</code>","text":""},{"location":"api/molfeat.trans.fp.html#molfeat.trans.fp.FPVecTransformer.__eq__","title":"<code>__eq__(other)</code>","text":"Source code in <code>molfeat/trans/fp.py</code> <pre><code>def __eq__(self, other):\n    same_type = type(self) == type(other)\n    return same_type and all(\n        [getattr(other, k) == v for k, v in self.get_params() if not callable(v)]\n    )\n</code></pre>"},{"location":"api/molfeat.trans.fp.html#molfeat.trans.fp.FPVecTransformer.__hash__","title":"<code>__hash__()</code>","text":"Source code in <code>molfeat/trans/fp.py</code> <pre><code>def __hash__(self):\n    return hash(repr(self))\n</code></pre>"},{"location":"api/molfeat.trans.fp.html#molfeat.trans.fp.FPVecTransformer.__init__","title":"<code>__init__(kind='ecfp:4', length=2000, n_jobs=1, verbose=False, dtype=np.float32, parallel_kwargs=None, **params)</code>","text":"<p>Molecular to vector fingerprinter</p> <p>Parameters:</p> Name Type Description Default <code>kind</code> <code>str</code> <p>Name of the fingerprints (one supported fingerprints: see self.AVAILABLE_FPS). Defaults to \"ecfp4\".</p> <code>'ecfp:4'</code> <code>length</code> <code>int</code> <p>Length of the fingerprint. Defaults to 2000.</p> <code>2000</code> <code>n_jobs</code> <code>int</code> <p>Number of jobs. Defaults to 1.</p> <code>1</code> <code>verbose</code> <code>bool</code> <p>Verbosity level. Defaults to False.</p> <code>False</code> <code>dtype</code> <code>Callable</code> <p>Data type. Defaults to np.float32.</p> <code>np.float32</code> <code>parallel_kwargs</code> <code>dict</code> <p>Optional arguments to pass to dm.parallelized when required. Defaults to None.</p> <code>None</code> <code>params</code> <code>dict</code> <p>Any additional parameters to the fingerprint function</p> <code>{}</code> Source code in <code>molfeat/trans/fp.py</code> <pre><code>def __init__(\n    self,\n    kind: str = \"ecfp:4\",\n    length: int = 2000,\n    n_jobs: int = 1,\n    verbose: bool = False,\n    dtype: Callable = np.float32,\n    parallel_kwargs: Optional[dict] = None,\n    **params,\n):\n\"\"\"Molecular to vector fingerprinter\n\n    Args:\n        kind (str, optional): Name of the fingerprints (one supported fingerprints: see self.AVAILABLE_FPS). Defaults to \"ecfp4\".\n        length (int, optional): Length of the fingerprint. Defaults to 2000.\n        n_jobs (int, optional): Number of jobs. Defaults to 1.\n        verbose (bool, optional): Verbosity level. Defaults to False.\n        dtype (Callable, optional): Data type. Defaults to np.float32.\n        parallel_kwargs (dict, optional): Optional arguments to pass to dm.parallelized when required. Defaults to None.\n        params (dict, optional): Any additional parameters to the fingerprint function\n    \"\"\"\n    self._save_input_args()\n\n    # remove any featurizer that was passed as argument\n    params.pop(\"featurizer\", None)\n    self._feat_params = params\n    featurizer = self._prepare_featurizer(kind, length, **params)\n    super().__init__(\n        featurizer=featurizer,\n        n_jobs=n_jobs,\n        verbose=verbose,\n        dtype=dtype,\n        parallel_kwargs=parallel_kwargs,\n        **params,\n    )\n    self.kind = kind\n    self.length = length\n    self._length = None\n    # update length for featurizer that have they fixed length\n    # EN: setting up a protected _length function helps to bypass\n    # the absurd \"is\" comparison done by sklearn in clone\n    # note that the featurizer length would likely be ignored by featurizer\n    # that do not support a variable length\n    if hasattr(self.featurizer, \"__len__\"):\n        self._length = len(featurizer)\n    self._input_params.update(kind=kind, length=length)\n    if self.kind.lower() in _UNSERIALIZABLE_FPS:\n        self.parallel_kwargs.update(scheduler=\"threads\")\n</code></pre>"},{"location":"api/molfeat.trans.fp.html#molfeat.trans.fp.FPVecTransformer.__len__","title":"<code>__len__()</code>","text":"<p>Compute featurizer length</p> Source code in <code>molfeat/trans/fp.py</code> <pre><code>def __len__(self):\n\"\"\"Compute featurizer length\"\"\"\n    if getattr(self, \"cols_to_keep\", None) is None and self._length is not None:\n        return self._length\n    return super().__len__()\n</code></pre>"},{"location":"api/molfeat.trans.fp.html#molfeat.trans.fp.FPVecTransformer.__ne__","title":"<code>__ne__(other)</code>","text":"Source code in <code>molfeat/trans/fp.py</code> <pre><code>def __ne__(self, other):\n    return not (self == other)\n</code></pre>"},{"location":"api/molfeat.trans.fp.html#molfeat.trans.fp.FPVecTransformer.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>molfeat/trans/fp.py</code> <pre><code>def __repr__(self):\n    return \"{}(kind={}, length={}, dtype={})\".format(\n        self.__class__.__name__,\n        _parse_to_evaluable_str(self.kind),\n        _parse_to_evaluable_str(self.length),\n        _parse_to_evaluable_str(self.dtype),\n    )\n</code></pre>"},{"location":"api/molfeat.trans.fp.html#molfeat.trans.fp.FPVecTransformer.__str__","title":"<code>__str__()</code>","text":"Source code in <code>molfeat/trans/fp.py</code> <pre><code>def __str__(self):\n    # The output for the print function\n    return self.__repr__()\n</code></pre>"},{"location":"api/molfeat.trans.graph.html","title":"molfeat.trans.graph","text":""},{"location":"api/molfeat.trans.graph.html#graphs","title":"Graphs","text":""},{"location":"api/molfeat.trans.graph.html#molfeat.trans.graph.adj.AdjGraphTransformer","title":"<code>AdjGraphTransformer</code>","text":"<p>         Bases: <code>GraphTransformer</code></p> <p>Transforms a molecule into a molecular graph representation formed by an adjacency matrix of atoms and a set of features for each atom (and potentially bond).</p> Source code in <code>molfeat/trans/graph/adj.py</code> <pre><code>class AdjGraphTransformer(GraphTransformer):\nr\"\"\"\n    Transforms a molecule into a molecular graph representation formed by an\n    adjacency matrix of atoms and a set of features for each atom (and potentially bond).\n    \"\"\"\n\n    def __init__(\n        self,\n        atom_featurizer: Optional[Callable] = None,\n        bond_featurizer: Optional[Callable] = None,\n        self_loop: bool = False,\n        explicit_hydrogens: bool = False,\n        canonical_atom_order: bool = True,\n        max_n_atoms: Optional[int] = None,\n        n_jobs: int = 1,\n        verbose: bool = False,\n        dtype: Optional[Callable] = None,\n        **params,\n    ):\n\"\"\"\n        Adjacency graph transformer\n\n        Args:\n            atom_featurizer: atom featurizer to use\n            bond_featurizer: bond featurizer to use\n            self_loop: whether to add self loops to the adjacency matrix. Your bond featurizer needs to supports this.\n            explicit_hydrogens: Whether to use explicit hydrogen in preprocessing of the input molecule\n            canonical_atom_order: Whether to use a canonical ordering of the atoms\n            max_n_atoms: Maximum number of atom to set the size of the graph\n            n_jobs: Number of job to run in parallel. Defaults to 1.\n            verbose: Verbosity level. Defaults to True.\n            dtype: Output data type. Defaults to None, where numpy arrays are returned.\n        \"\"\"\n        super().__init__(\n            atom_featurizer=atom_featurizer,\n            bond_featurizer=bond_featurizer,\n            max_n_atoms=max_n_atoms,\n            self_loop=self_loop,\n            n_jobs=n_jobs,\n            verbose=verbose,\n            dtype=dtype,\n            canonical_atom_order=canonical_atom_order,\n            explicit_hydrogens=explicit_hydrogens,\n            **params,\n        )\n\n    def _graph_featurizer(self, mol: dm.Mol):\n\"\"\"Internal adjacency graph featurizer\n\n        Returns:\n            mat : N,N matrix representing the graph\n        \"\"\"\n        adj_mat = GetAdjacencyMatrix(mol)\n        if self.self_loop:\n            np.fill_diagonal(adj_mat, 1)\n        return adj_mat\n\n    @staticmethod\n    def _collate_batch(batch, max_n_atoms=None, pack=False):\n\"\"\"\n        Collate a batch of samples. Expected format is either single graphs, e.g. a list of tuples of the form (adj, feats),\n        or graphs together with their labels, where each sample is of the form ((adj, feats), label).\n\n        Args:\n             batch: list\n                Batch of samples.\n             max_n_atoms: Max num atoms in graphs.\n             pack: Whether the graph should be packed or not into a supergraph.\n\n        Returns:\n            Collated samples.\n\n        \"\"\"\n        if isinstance(batch[0], (list, tuple)) and len(batch[0]) &gt; 2:\n            graphs, feats, labels = map(list, zip(*batch))\n            batched_graph = AdjGraphTransformer._collate_graphs(\n                zip(graphs, feats), max_n_atoms=max_n_atoms, pack=pack\n            )\n\n            if torch.is_tensor(labels[0]):\n                return batched_graph, torch.stack(labels)\n            else:\n                return batched_graph, labels\n\n        # Otherwise we assume the batch is composed of single graphs.\n        return AdjGraphTransformer._collate_graphs(batch, max_n_atoms=max_n_atoms, pack=pack)\n\n    @staticmethod\n    def _collate_graphs(batch, max_n_atoms, pack):\n        if not all([len(b) == 2 for b in batch]):\n            raise ValueError(\"Default collate function only supports pair of (Graph, AtomFeats) \")\n\n        graphs, feats = zip(*batch)\n        # in case someone does not convert to tensor and wants to use collate\n        # who would do that ?\n        graphs = [datatype.to_tensor(g) for g in graphs]\n        feats = [datatype.to_tensor(f) for f in feats]\n        if pack:\n            return pack_graph(graphs, feats)\n        else:\n            if max_n_atoms is None:\n                cur_max_atoms = max([x.shape[0] for x in feats])\n            else:\n                cur_max_atoms = max_n_atoms\n\n            graphs = torch.stack(\n                [\n                    F.pad(\n                        g,\n                        (0, cur_max_atoms - g.shape[0], 0, cur_max_atoms - g.shape[1]),\n                    )\n                    for g in graphs\n                ]\n            )\n            feats = torch.stack([F.pad(f, (0, 0, 0, cur_max_atoms - f.shape[0])) for f in feats])\n        return graphs, feats\n\n    def get_collate_fn(self, pack: bool = False, max_n_atoms: Optional[int] = None):\n\"\"\"Get collate function. Adj Graph are collated either through batching\n        or diagonally packing the graph into a super graph. Either a format of (batch, labels) or graph is supported.\n\n        !!! note\n            Edge features are not supported yet in the default collate because\n            there is no straightforward and universal way to collate them\n\n        Args:\n            pack : Whether to pack or batch the graphs.\n            max_n_atoms: Maximum number of node per graph when packing is False.\n                If the graph needs to be packed and it is not set, instance attributes will be used\n        \"\"\"\n        if self.bond_featurizer is not None:\n            raise ValueError(\n                \"Default collate function is not supported for transformer with bond featurizer\"\n            )\n        max_n_atoms = max_n_atoms or self.max_n_atoms\n\n        return partial(self._collate_batch, pack=pack, max_n_atoms=max_n_atoms)\n\n    def transform(self, mols: List[Union[dm.Mol, str]], keep_dict: bool = False, **kwargs):\nr\"\"\"\n        Compute the graph featurization for a set of molecules.\n\n        Args:\n            mols: a list containing smiles or mol objects\n            keep_dict: whether to keep atom and bond featurizer as dict or get the underlying data\n            kwargs: arguments to pass to the `super().transform`\n\n         Returns:\n             features: a list of features for each molecule in the input set\n        \"\"\"\n        features = super().transform(mols, **kwargs)\n        if not keep_dict:\n            out = []\n            for i, feat in enumerate(features):\n                if feat is not None:\n                    graph, nodes, *bonds = feat\n                    if isinstance(nodes, dict):\n                        nodes = nodes[self.atom_featurizer.name]\n                    if len(bonds) &gt; 0 and isinstance(bonds[0], dict):\n                        try:\n                            bonds = bonds[0][self.bond_featurizer.name]\n                            feat = (graph, nodes, bonds)\n                        except KeyError as e:\n                            # more information on failure\n                            logger.error(\"Encountered Molecule without bonds\")\n                            raise e\n                    else:\n                        feat = (graph, nodes)\n                out.append(feat)\n            features = out\n        return features\n\n    def _transform(self, mol: dm.Mol):\nr\"\"\"\n        Transforms a molecule into an Adjacency graph with a set of atom and optional bond features\n\n        Args:\n            mol: molecule to transform into features\n\n        Returns\n            feat: featurized input molecule (adj_mat, node_feat) or (adj_mat, node_feat, edge_feat)\n\n        \"\"\"\n        if mol is None:\n            return None\n\n        try:\n            adj_matrix = datatype.cast(self._graph_featurizer(mol), dtype=self.dtype)\n            atom_data = self.atom_featurizer(mol, dtype=self.dtype)\n            feats = (adj_matrix, atom_data)\n            bond_data = None\n            if self.bond_featurizer is not None:\n                bond_data = self.bond_featurizer(mol, flat=False, dtype=self.dtype)\n                feats = (\n                    adj_matrix,\n                    atom_data,\n                    bond_data,\n                )\n        except Exception as e:\n            if self.verbose:\n                logger.error(e)\n            feats = None\n        return feats\n</code></pre>"},{"location":"api/molfeat.trans.graph.html#molfeat.trans.graph.adj.AdjGraphTransformer.__init__","title":"<code>__init__(atom_featurizer=None, bond_featurizer=None, self_loop=False, explicit_hydrogens=False, canonical_atom_order=True, max_n_atoms=None, n_jobs=1, verbose=False, dtype=None, **params)</code>","text":"<p>Adjacency graph transformer</p> <p>Parameters:</p> Name Type Description Default <code>atom_featurizer</code> <code>Optional[Callable]</code> <p>atom featurizer to use</p> <code>None</code> <code>bond_featurizer</code> <code>Optional[Callable]</code> <p>bond featurizer to use</p> <code>None</code> <code>self_loop</code> <code>bool</code> <p>whether to add self loops to the adjacency matrix. Your bond featurizer needs to supports this.</p> <code>False</code> <code>explicit_hydrogens</code> <code>bool</code> <p>Whether to use explicit hydrogen in preprocessing of the input molecule</p> <code>False</code> <code>canonical_atom_order</code> <code>bool</code> <p>Whether to use a canonical ordering of the atoms</p> <code>True</code> <code>max_n_atoms</code> <code>Optional[int]</code> <p>Maximum number of atom to set the size of the graph</p> <code>None</code> <code>n_jobs</code> <code>int</code> <p>Number of job to run in parallel. Defaults to 1.</p> <code>1</code> <code>verbose</code> <code>bool</code> <p>Verbosity level. Defaults to True.</p> <code>False</code> <code>dtype</code> <code>Optional[Callable]</code> <p>Output data type. Defaults to None, where numpy arrays are returned.</p> <code>None</code> Source code in <code>molfeat/trans/graph/adj.py</code> <pre><code>def __init__(\n    self,\n    atom_featurizer: Optional[Callable] = None,\n    bond_featurizer: Optional[Callable] = None,\n    self_loop: bool = False,\n    explicit_hydrogens: bool = False,\n    canonical_atom_order: bool = True,\n    max_n_atoms: Optional[int] = None,\n    n_jobs: int = 1,\n    verbose: bool = False,\n    dtype: Optional[Callable] = None,\n    **params,\n):\n\"\"\"\n    Adjacency graph transformer\n\n    Args:\n        atom_featurizer: atom featurizer to use\n        bond_featurizer: bond featurizer to use\n        self_loop: whether to add self loops to the adjacency matrix. Your bond featurizer needs to supports this.\n        explicit_hydrogens: Whether to use explicit hydrogen in preprocessing of the input molecule\n        canonical_atom_order: Whether to use a canonical ordering of the atoms\n        max_n_atoms: Maximum number of atom to set the size of the graph\n        n_jobs: Number of job to run in parallel. Defaults to 1.\n        verbose: Verbosity level. Defaults to True.\n        dtype: Output data type. Defaults to None, where numpy arrays are returned.\n    \"\"\"\n    super().__init__(\n        atom_featurizer=atom_featurizer,\n        bond_featurizer=bond_featurizer,\n        max_n_atoms=max_n_atoms,\n        self_loop=self_loop,\n        n_jobs=n_jobs,\n        verbose=verbose,\n        dtype=dtype,\n        canonical_atom_order=canonical_atom_order,\n        explicit_hydrogens=explicit_hydrogens,\n        **params,\n    )\n</code></pre>"},{"location":"api/molfeat.trans.graph.html#molfeat.trans.graph.adj.AdjGraphTransformer.get_collate_fn","title":"<code>get_collate_fn(pack=False, max_n_atoms=None)</code>","text":"<p>Get collate function. Adj Graph are collated either through batching or diagonally packing the graph into a super graph. Either a format of (batch, labels) or graph is supported.</p> <p>Note</p> <p>Edge features are not supported yet in the default collate because there is no straightforward and universal way to collate them</p> <p>Parameters:</p> Name Type Description Default <code>pack</code> <p>Whether to pack or batch the graphs.</p> <code>False</code> <code>max_n_atoms</code> <code>Optional[int]</code> <p>Maximum number of node per graph when packing is False. If the graph needs to be packed and it is not set, instance attributes will be used</p> <code>None</code> Source code in <code>molfeat/trans/graph/adj.py</code> <pre><code>def get_collate_fn(self, pack: bool = False, max_n_atoms: Optional[int] = None):\n\"\"\"Get collate function. Adj Graph are collated either through batching\n    or diagonally packing the graph into a super graph. Either a format of (batch, labels) or graph is supported.\n\n    !!! note\n        Edge features are not supported yet in the default collate because\n        there is no straightforward and universal way to collate them\n\n    Args:\n        pack : Whether to pack or batch the graphs.\n        max_n_atoms: Maximum number of node per graph when packing is False.\n            If the graph needs to be packed and it is not set, instance attributes will be used\n    \"\"\"\n    if self.bond_featurizer is not None:\n        raise ValueError(\n            \"Default collate function is not supported for transformer with bond featurizer\"\n        )\n    max_n_atoms = max_n_atoms or self.max_n_atoms\n\n    return partial(self._collate_batch, pack=pack, max_n_atoms=max_n_atoms)\n</code></pre>"},{"location":"api/molfeat.trans.graph.html#molfeat.trans.graph.adj.AdjGraphTransformer.transform","title":"<code>transform(mols, keep_dict=False, **kwargs)</code>","text":"<p>Compute the graph featurization for a set of molecules.</p> <p>Parameters:</p> Name Type Description Default <code>mols</code> <code>List[Union[dm.Mol, str]]</code> <p>a list containing smiles or mol objects</p> required <code>keep_dict</code> <code>bool</code> <p>whether to keep atom and bond featurizer as dict or get the underlying data</p> <code>False</code> <code>kwargs</code> <p>arguments to pass to the <code>super().transform</code></p> <code>{}</code> <p>Returns:      features: a list of features for each molecule in the input set</p> Source code in <code>molfeat/trans/graph/adj.py</code> <pre><code>def transform(self, mols: List[Union[dm.Mol, str]], keep_dict: bool = False, **kwargs):\nr\"\"\"\n    Compute the graph featurization for a set of molecules.\n\n    Args:\n        mols: a list containing smiles or mol objects\n        keep_dict: whether to keep atom and bond featurizer as dict or get the underlying data\n        kwargs: arguments to pass to the `super().transform`\n\n     Returns:\n         features: a list of features for each molecule in the input set\n    \"\"\"\n    features = super().transform(mols, **kwargs)\n    if not keep_dict:\n        out = []\n        for i, feat in enumerate(features):\n            if feat is not None:\n                graph, nodes, *bonds = feat\n                if isinstance(nodes, dict):\n                    nodes = nodes[self.atom_featurizer.name]\n                if len(bonds) &gt; 0 and isinstance(bonds[0], dict):\n                    try:\n                        bonds = bonds[0][self.bond_featurizer.name]\n                        feat = (graph, nodes, bonds)\n                    except KeyError as e:\n                        # more information on failure\n                        logger.error(\"Encountered Molecule without bonds\")\n                        raise e\n                else:\n                    feat = (graph, nodes)\n            out.append(feat)\n        features = out\n    return features\n</code></pre>"},{"location":"api/molfeat.trans.graph.html#molfeat.trans.graph.adj.CompleteGraphTransformer","title":"<code>CompleteGraphTransformer</code>","text":"<p>         Bases: <code>GraphTransformer</code></p> <p>Transforms a molecule into a complete graph</p> Source code in <code>molfeat/trans/graph/adj.py</code> <pre><code>class CompleteGraphTransformer(GraphTransformer):\n\"\"\"Transforms a molecule into a complete graph\"\"\"\n\n    def _graph_featurizer(self, mol: dm.Mol):\n\"\"\"Complete grah featurizer\n\n        Args:\n            mol: molecule to transform into a graph\n\n        Returns:\n            mat : N,N matrix representing the graph\n        \"\"\"\n        n_atoms = mol.GetNumAtoms()\n        adj_mat = np.ones((n_atoms, n_atoms))\n        if not self.self_loop:\n            np.fill_diagonal(adj_mat, 0)\n        return adj_mat\n</code></pre>"},{"location":"api/molfeat.trans.graph.html#molfeat.trans.graph.adj.DGLGraphTransformer","title":"<code>DGLGraphTransformer</code>","text":"<p>         Bases: <code>GraphTransformer</code></p> <p>Transforms a molecule into a molecular graph representation formed by an adjacency matrix of atoms and a set of features for each atom (and potentially bond).</p> Source code in <code>molfeat/trans/graph/adj.py</code> <pre><code>class DGLGraphTransformer(GraphTransformer):\nr\"\"\"\n    Transforms a molecule into a molecular graph representation formed by an\n    adjacency matrix of atoms and a set of features for each atom (and potentially bond).\n    \"\"\"\n\n    def __init__(\n        self,\n        atom_featurizer: Optional[Callable] = None,\n        bond_featurizer: Optional[Callable] = None,\n        self_loop: bool = False,\n        explicit_hydrogens: bool = False,\n        canonical_atom_order: bool = True,\n        complete_graph: bool = False,\n        num_virtual_nodes: int = 0,\n        n_jobs: int = 1,\n        verbose: bool = False,\n        dtype: Optional[Callable] = None,\n        **params,\n    ):\n\"\"\"\n        Adjacency graph transformer\n\n        Args:\n           atom_featurizer: atom featurizer to use\n           bond_featurizer: atom featurizer to use\n           self_loop: whether to use self loop or not\n           explicit_hydrogens: Whether to use explicit hydrogen in preprocessing of the input molecule\n           canonical_atom_order: Whether to use a canonical ordering of the atoms\n           complete_graph: Whether to use a complete graph constructor or not\n           num_virtual_nodes: number of virtual nodes to add\n           n_jobs: Number of job to run in parallel. Defaults to 1.\n           verbose: Verbosity level. Defaults to True.\n           dtype: Output data type. Defaults to None, where numpy arrays are returned.\n        \"\"\"\n\n        super().__init__(\n            atom_featurizer=atom_featurizer,\n            bond_featurizer=bond_featurizer,\n            n_jobs=n_jobs,\n            self_loop=self_loop,\n            num_virtual_nodes=num_virtual_nodes,\n            complete_graph=complete_graph,\n            verbose=verbose,\n            dtype=dtype,\n            canonical_atom_order=canonical_atom_order,\n            explicit_hydrogens=explicit_hydrogens,\n            **params,\n        )\n\n        if not requires.check(\"dgllife\"):\n            logger.error(\n                \"Cannot find dgllife. It's required for some features. Please install it first !\"\n            )\n        if not requires.check(\"dgl\"):\n            raise ValueError(\"Cannot find dgl, please install it first !\")\n        if self.dtype is not None and not datatype.is_dtype_tensor(self.dtype):\n            raise ValueError(\"DGL featurizer only supports torch tensors currently\")\n\n    def auto_self_loop(self):\n\"\"\"Patch the featurizer to auto support self loop based on the bond featurizer characteristics\"\"\"\n        super().auto_self_loop()\n        if isinstance(self.bond_featurizer, EdgeMatCalculator):\n            self.self_loop = True\n\n    def get_collate_fn(self, *args, **kwargs):\n\"\"\"Return DGL collate function for a batch of molecular graph\"\"\"\n        return self._dgl_collate\n\n    @staticmethod\n    def _dgl_collate(batch):\n\"\"\"\n        Batch of samples to be used with the featurizer. A sample of the batch is expected to\n        be of the form (graph, label) or simply a graph.\n\n        Args:\n         batch: list\n            batch of samples.\n\n        returns:\n            Batched lists of graphs and labels\n        \"\"\"\n        if isinstance(batch[0], (list, tuple)):\n            graphs, labels = map(list, zip(*batch))\n            batched_graph = dgl.batch(graphs)\n\n            if torch.is_tensor(labels[0]):\n                return batched_graph, torch.stack(labels)\n            else:\n                return batched_graph, labels\n\n        # Otherwise we assume the batch is composed of single graphs.\n        return dgl.batch(batch)\n\n    def _graph_featurizer(self, mol: dm.Mol):\n\"\"\"Convert a molecule to a DGL graph.\n\n        This only supports the bigraph and not any virtual nodes or complete graph.\n\n        Args:\n            mol (dm.Mol): molecule to transform into features\n\n        Returns:\n            graph (dgl.DGLGraph): graph built with dgl\n        \"\"\"\n\n        n_atoms = mol.GetNumAtoms()\n        num_bonds = mol.GetNumBonds()\n        graph = dgl.graph()\n        graph.add_nodes(n_atoms)\n        bond_src = []\n        bond_dst = []\n        for i in range(num_bonds):\n            bond = mol.GetBondWithIdx(i)\n            begin_idx = bond.GetBeginAtom().GetIdx()\n            end_idx = bond.GetEndAtom().GetIdx()\n            bond_src.append(begin_idx)\n            bond_dst.append(end_idx)\n            # set up the reverse direction\n            bond_src.append(end_idx)\n            bond_dst.append(begin_idx)\n\n        if self.self_loop:\n            nodes = graph.nodes().tolist()\n            bond_src.extend(nodes)\n            bond_dst.extend(nodes)\n\n        graph.add_edges(bond_src, bond_dst)\n        return graph\n\n    @property\n    def atom_dim(self):\n        return super(DGLGraphTransformer, self).atom_dim + int(self.num_virtual_nodes &gt; 0)\n\n    @property\n    def bond_dim(self):\n        return super(DGLGraphTransformer, self).bond_dim + int(self.num_virtual_nodes &gt; 0)\n\n    def _transform(self, mol: dm.Mol):\nr\"\"\"\n        Transforms a molecule into an Adjacency graph with a set of atom and bond features\n\n        Args:\n            mol (dm.Mol): molecule to transform into features\n\n        Returns\n            graph (dgl.DGLGraph): a dgl graph containing atoms and bond data\n\n        \"\"\"\n        if mol is None:\n            return None\n\n        graph = None\n        if requires.check(\"dgllife\"):\n            graph_featurizer = dgllife_utils.mol_to_bigraph\n\n            if self.complete_graph:\n                graph_featurizer = dgllife_utils.mol_to_complete_graph\n            try:\n                graph = graph_featurizer(\n                    mol,\n                    add_self_loop=self.self_loop,\n                    node_featurizer=self.__recast(self.atom_featurizer),\n                    edge_featurizer=self.__recast(self.bond_featurizer),\n                    canonical_atom_order=self.canonical_atom_order,\n                    explicit_hydrogens=self.explicit_hydrogens,\n                    num_virtual_nodes=self.num_virtual_nodes,\n                )\n            except Exception as e:\n                if self.verbose:\n                    logger.error(e)\n                graph = None\n\n        elif requires.check(\"dgl\") and not self.complete_graph:\n            # we need to build the graph ourselves.\n            graph = self._graph_featurizer(mol)\n            if self.atom_featurizer is not None:\n                graph.ndata.update(self.atom_featurizer(mol, dtype=self.dtype))\n\n            if self.bond_featurizer is not None:\n                graph.edata.update(self.bond_featurizer(mol, dtype=self.dtype))\n\n        else:\n            raise ValueError(\n                \"Incorrect setup, please install missing packages (dgl, dgllife) for more features\"\n            )\n        return graph\n\n    def __recast(self, featurizer: Callable):\n\"\"\"Recast the output of a featurizer to the transformer underlying type\n\n        Args:\n            featurizer: featurizer to patch\n        \"\"\"\n        if featurizer is None:\n            return None\n        dtype = self.dtype or torch.float\n\n        def patch_feats(*args, **kwargs):\n            out_dict = featurizer(*args, **kwargs)\n            out_dict = {k: datatype.cast(val, dtype=dtype) for k, val in out_dict.items()}\n            return out_dict\n\n        return patch_feats\n</code></pre>"},{"location":"api/molfeat.trans.graph.html#molfeat.trans.graph.adj.DGLGraphTransformer.atom_dim","title":"<code>atom_dim</code>  <code>property</code>","text":""},{"location":"api/molfeat.trans.graph.html#molfeat.trans.graph.adj.DGLGraphTransformer.bond_dim","title":"<code>bond_dim</code>  <code>property</code>","text":""},{"location":"api/molfeat.trans.graph.html#molfeat.trans.graph.adj.DGLGraphTransformer.__init__","title":"<code>__init__(atom_featurizer=None, bond_featurizer=None, self_loop=False, explicit_hydrogens=False, canonical_atom_order=True, complete_graph=False, num_virtual_nodes=0, n_jobs=1, verbose=False, dtype=None, **params)</code>","text":"<p>Adjacency graph transformer</p> <p>Parameters:</p> Name Type Description Default <code>atom_featurizer</code> <code>Optional[Callable]</code> <p>atom featurizer to use</p> <code>None</code> <code>bond_featurizer</code> <code>Optional[Callable]</code> <p>atom featurizer to use</p> <code>None</code> <code>self_loop</code> <code>bool</code> <p>whether to use self loop or not</p> <code>False</code> <code>explicit_hydrogens</code> <code>bool</code> <p>Whether to use explicit hydrogen in preprocessing of the input molecule</p> <code>False</code> <code>canonical_atom_order</code> <code>bool</code> <p>Whether to use a canonical ordering of the atoms</p> <code>True</code> <code>complete_graph</code> <code>bool</code> <p>Whether to use a complete graph constructor or not</p> <code>False</code> <code>num_virtual_nodes</code> <code>int</code> <p>number of virtual nodes to add</p> <code>0</code> <code>n_jobs</code> <code>int</code> <p>Number of job to run in parallel. Defaults to 1.</p> <code>1</code> <code>verbose</code> <code>bool</code> <p>Verbosity level. Defaults to True.</p> <code>False</code> <code>dtype</code> <code>Optional[Callable]</code> <p>Output data type. Defaults to None, where numpy arrays are returned.</p> <code>None</code> Source code in <code>molfeat/trans/graph/adj.py</code> <pre><code>def __init__(\n    self,\n    atom_featurizer: Optional[Callable] = None,\n    bond_featurizer: Optional[Callable] = None,\n    self_loop: bool = False,\n    explicit_hydrogens: bool = False,\n    canonical_atom_order: bool = True,\n    complete_graph: bool = False,\n    num_virtual_nodes: int = 0,\n    n_jobs: int = 1,\n    verbose: bool = False,\n    dtype: Optional[Callable] = None,\n    **params,\n):\n\"\"\"\n    Adjacency graph transformer\n\n    Args:\n       atom_featurizer: atom featurizer to use\n       bond_featurizer: atom featurizer to use\n       self_loop: whether to use self loop or not\n       explicit_hydrogens: Whether to use explicit hydrogen in preprocessing of the input molecule\n       canonical_atom_order: Whether to use a canonical ordering of the atoms\n       complete_graph: Whether to use a complete graph constructor or not\n       num_virtual_nodes: number of virtual nodes to add\n       n_jobs: Number of job to run in parallel. Defaults to 1.\n       verbose: Verbosity level. Defaults to True.\n       dtype: Output data type. Defaults to None, where numpy arrays are returned.\n    \"\"\"\n\n    super().__init__(\n        atom_featurizer=atom_featurizer,\n        bond_featurizer=bond_featurizer,\n        n_jobs=n_jobs,\n        self_loop=self_loop,\n        num_virtual_nodes=num_virtual_nodes,\n        complete_graph=complete_graph,\n        verbose=verbose,\n        dtype=dtype,\n        canonical_atom_order=canonical_atom_order,\n        explicit_hydrogens=explicit_hydrogens,\n        **params,\n    )\n\n    if not requires.check(\"dgllife\"):\n        logger.error(\n            \"Cannot find dgllife. It's required for some features. Please install it first !\"\n        )\n    if not requires.check(\"dgl\"):\n        raise ValueError(\"Cannot find dgl, please install it first !\")\n    if self.dtype is not None and not datatype.is_dtype_tensor(self.dtype):\n        raise ValueError(\"DGL featurizer only supports torch tensors currently\")\n</code></pre>"},{"location":"api/molfeat.trans.graph.html#molfeat.trans.graph.adj.DGLGraphTransformer.__recast","title":"<code>__recast(featurizer)</code>","text":"<p>Recast the output of a featurizer to the transformer underlying type</p> <p>Parameters:</p> Name Type Description Default <code>featurizer</code> <code>Callable</code> <p>featurizer to patch</p> required Source code in <code>molfeat/trans/graph/adj.py</code> <pre><code>def __recast(self, featurizer: Callable):\n\"\"\"Recast the output of a featurizer to the transformer underlying type\n\n    Args:\n        featurizer: featurizer to patch\n    \"\"\"\n    if featurizer is None:\n        return None\n    dtype = self.dtype or torch.float\n\n    def patch_feats(*args, **kwargs):\n        out_dict = featurizer(*args, **kwargs)\n        out_dict = {k: datatype.cast(val, dtype=dtype) for k, val in out_dict.items()}\n        return out_dict\n\n    return patch_feats\n</code></pre>"},{"location":"api/molfeat.trans.graph.html#molfeat.trans.graph.adj.DGLGraphTransformer.auto_self_loop","title":"<code>auto_self_loop()</code>","text":"<p>Patch the featurizer to auto support self loop based on the bond featurizer characteristics</p> Source code in <code>molfeat/trans/graph/adj.py</code> <pre><code>def auto_self_loop(self):\n\"\"\"Patch the featurizer to auto support self loop based on the bond featurizer characteristics\"\"\"\n    super().auto_self_loop()\n    if isinstance(self.bond_featurizer, EdgeMatCalculator):\n        self.self_loop = True\n</code></pre>"},{"location":"api/molfeat.trans.graph.html#molfeat.trans.graph.adj.DGLGraphTransformer.get_collate_fn","title":"<code>get_collate_fn(*args, **kwargs)</code>","text":"<p>Return DGL collate function for a batch of molecular graph</p> Source code in <code>molfeat/trans/graph/adj.py</code> <pre><code>def get_collate_fn(self, *args, **kwargs):\n\"\"\"Return DGL collate function for a batch of molecular graph\"\"\"\n    return self._dgl_collate\n</code></pre>"},{"location":"api/molfeat.trans.graph.html#molfeat.trans.graph.adj.DistGraphTransformer3D","title":"<code>DistGraphTransformer3D</code>","text":"<p>         Bases: <code>AdjGraphTransformer</code></p> <p>Graph featurizer using the 3D distance between pair of atoms for the adjacency matrix The <code>self_loop</code> attribute is ignored here as the distance between an atom and itself is 0.</p> Source code in <code>molfeat/trans/graph/adj.py</code> <pre><code>class DistGraphTransformer3D(AdjGraphTransformer):\n\"\"\"\n    Graph featurizer using the 3D distance between pair of atoms for the adjacency matrix\n    The `self_loop` attribute is ignored here as the distance between an atom and itself is 0.\n\n    \"\"\"\n\n    @requires_conformer\n    def _graph_featurizer(self, mol: dm.Mol):\n\"\"\"Graph topological distance featurizer\n\n        Args:\n            mol: molecule to transform into a graph\n\n        Returns:\n            mat : N,N matrix representing the graph\n        \"\"\"\n        return Get3DDistanceMatrix(mol)\n</code></pre>"},{"location":"api/molfeat.trans.graph.html#molfeat.trans.graph.adj.GraphTransformer","title":"<code>GraphTransformer</code>","text":"<p>         Bases: <code>MoleculeTransformer</code></p> <p>Base class for all graph transformers including DGL</p> Source code in <code>molfeat/trans/graph/adj.py</code> <pre><code>class GraphTransformer(MoleculeTransformer):\n\"\"\"\n    Base class for all graph transformers including DGL\n    \"\"\"\n\n    def __init__(\n        self,\n        atom_featurizer: Optional[Callable] = None,\n        bond_featurizer: Optional[Callable] = None,\n        explicit_hydrogens: bool = False,\n        canonical_atom_order: bool = True,\n        self_loop: bool = False,\n        n_jobs: int = 1,\n        verbose: bool = False,\n        dtype: Optional[Callable] = None,\n        **params,\n    ):\n\"\"\"Mol to Graph transformer base class\n\n        Args:\n            atom_featurizer: atom featurizer to use\n            bond_featurizer: atom featurizer to use\n            explicit_hydrogens: Whether to use explicit hydrogen in preprocessing of the input molecule\n            canonical_atom_order: Whether to use a canonical ordering of the atoms\n            self_loop: Whether to add self loops or not\n            n_jobs: Number of job to run in parallel. Defaults to 1.\n            verbose: Verbosity level. Defaults to True.\n            dtype: Output data type. Defaults to None\n        \"\"\"\n\n        self._save_input_args()\n\n        super().__init__(\n            n_jobs=n_jobs,\n            verbose=verbose,\n            dtype=dtype,\n            featurizer=\"none\",\n            self_loop=self_loop,\n            canonical_atom_order=canonical_atom_order,\n            explicit_hydrogens=explicit_hydrogens,\n            **params,\n        )\n        if atom_featurizer is None:\n            atom_featurizer = AtomCalculator()\n        self.atom_featurizer = atom_featurizer\n        self.bond_featurizer = bond_featurizer\n        self._atom_dim = None\n        self._bond_dim = None\n\n    def auto_self_loop(self):\n\"\"\"Patch the featurizer to auto support self loop based on the bond featurizer characteristics\"\"\"\n        bf_self_loop = None\n        if self.bond_featurizer is not None:\n            bf_self_loop = getattr(self.bond_featurizer, \"self_loop\", None)\n            bf_self_loop = bf_self_loop or getattr(self.bond_featurizer, \"_self_loop\", None)\n        if bf_self_loop is not None:\n            self.self_loop = bf_self_loop\n\n    def preprocess(self, inputs, labels=None):\n\"\"\"Preprocess list of input molecules\n        Args:\n            labels: For compatibility\n        \"\"\"\n        inputs, labels = super().preprocess(inputs, labels)\n        new_inputs = []\n        for m in inputs:\n            try:\n                mol = dm.to_mol(\n                    m, add_hs=self.explicit_hydrogens, ordered=self.canonical_atom_order\n                )\n            except:\n                mol = None\n            new_inputs.append(mol)\n\n        return new_inputs, labels\n\n    def fit(self, **fit_params):\n\"\"\"Fit the current transformer on given dataset.\"\"\"\n        if self.verbose:\n            logger.error(\"GraphTransformer featurizers cannot be fitted !\")\n        return self\n\n    @property\n    def atom_dim(self):\nr\"\"\"\n        Get the number of features per atom\n\n        Returns:\n            atom_dim (int): Number of atom features\n        \"\"\"\n        if self._atom_dim is None:\n            try:\n                self._atom_dim = len(self.atom_featurizer)\n            except:\n                _toy_mol = dm.to_mol(\"C\")\n                out = self.atom_featurizer(_toy_mol)\n                self._atom_dim = sum([x.shape[-1] for x in out.values()])\n        return self._atom_dim\n\n    @property\n    def bond_dim(self):\nr\"\"\"\n        Get the number of features for a bond\n\n        Returns:\n            bond_dim (int): Number of bond features\n        \"\"\"\n        if self.bond_featurizer is None:\n            self._bond_dim = 0\n        if self._bond_dim is None:\n            try:\n                self._bond_dim = len(self.bond_featurizer)\n            except:\n                _toy_mol = dm.to_mol(\"CO\")\n                out = self.bond_featurizer(_toy_mol)\n                self._bond_dim = sum([x.shape[-1] for x in out.values()])\n        return self._bond_dim\n\n    def _transform(self, mol: dm.Mol):\nr\"\"\"\n        Compute features for a single molecule.\n        This method would potentially need to be reimplemented by child classes\n\n        Args:\n            mol: molecule to transform into features\n\n        Returns\n            feat: featurized input molecule\n\n        \"\"\"\n        raise NotImplementedError\n\n    def __call__(self, mols: List[Union[dm.Mol, str]], ignore_errors: bool = False, **kwargs):\nr\"\"\"\n        Calculate features for molecules. Using __call__, instead of transform.\n        Note that most Transfomers allow you to specify\n        a return datatype.\n\n        Args:\n            mols:  Mol or SMILES of the molecules to be transformed\n            ignore_errors: Whether to ignore errors during featurization or raise an error.\n            kwargs: Named parameters for the transform method\n\n        Returns:\n            feats: list of valid features\n            ids: all valid molecule positions that did not failed during featurization\n                Only returned when ignore_errors is True.\n\n        \"\"\"\n        features = self.transform(mols, ignore_errors=ignore_errors, **kwargs)\n        if not ignore_errors:\n            return features\n        features, ids = self._filter_none(features)\n        return features, ids\n</code></pre>"},{"location":"api/molfeat.trans.graph.html#molfeat.trans.graph.adj.GraphTransformer.atom_dim","title":"<code>atom_dim</code>  <code>property</code>","text":"<p>Get the number of features per atom</p> <p>Returns:</p> Name Type Description <code>atom_dim</code> <code>int</code> <p>Number of atom features</p>"},{"location":"api/molfeat.trans.graph.html#molfeat.trans.graph.adj.GraphTransformer.atom_featurizer","title":"<code>atom_featurizer = atom_featurizer</code>  <code>instance-attribute</code>","text":""},{"location":"api/molfeat.trans.graph.html#molfeat.trans.graph.adj.GraphTransformer.bond_dim","title":"<code>bond_dim</code>  <code>property</code>","text":"<p>Get the number of features for a bond</p> <p>Returns:</p> Name Type Description <code>bond_dim</code> <code>int</code> <p>Number of bond features</p>"},{"location":"api/molfeat.trans.graph.html#molfeat.trans.graph.adj.GraphTransformer.bond_featurizer","title":"<code>bond_featurizer = bond_featurizer</code>  <code>instance-attribute</code>","text":""},{"location":"api/molfeat.trans.graph.html#molfeat.trans.graph.adj.GraphTransformer.__call__","title":"<code>__call__(mols, ignore_errors=False, **kwargs)</code>","text":"<p>Calculate features for molecules. Using call, instead of transform. Note that most Transfomers allow you to specify a return datatype.</p> <p>Parameters:</p> Name Type Description Default <code>mols</code> <code>List[Union[dm.Mol, str]]</code> <p>Mol or SMILES of the molecules to be transformed</p> required <code>ignore_errors</code> <code>bool</code> <p>Whether to ignore errors during featurization or raise an error.</p> <code>False</code> <code>kwargs</code> <p>Named parameters for the transform method</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>feats</code> <p>list of valid features</p> <code>ids</code> <p>all valid molecule positions that did not failed during featurization Only returned when ignore_errors is True.</p> Source code in <code>molfeat/trans/graph/adj.py</code> <pre><code>def __call__(self, mols: List[Union[dm.Mol, str]], ignore_errors: bool = False, **kwargs):\nr\"\"\"\n    Calculate features for molecules. Using __call__, instead of transform.\n    Note that most Transfomers allow you to specify\n    a return datatype.\n\n    Args:\n        mols:  Mol or SMILES of the molecules to be transformed\n        ignore_errors: Whether to ignore errors during featurization or raise an error.\n        kwargs: Named parameters for the transform method\n\n    Returns:\n        feats: list of valid features\n        ids: all valid molecule positions that did not failed during featurization\n            Only returned when ignore_errors is True.\n\n    \"\"\"\n    features = self.transform(mols, ignore_errors=ignore_errors, **kwargs)\n    if not ignore_errors:\n        return features\n    features, ids = self._filter_none(features)\n    return features, ids\n</code></pre>"},{"location":"api/molfeat.trans.graph.html#molfeat.trans.graph.adj.GraphTransformer.__init__","title":"<code>__init__(atom_featurizer=None, bond_featurizer=None, explicit_hydrogens=False, canonical_atom_order=True, self_loop=False, n_jobs=1, verbose=False, dtype=None, **params)</code>","text":"<p>Mol to Graph transformer base class</p> <p>Parameters:</p> Name Type Description Default <code>atom_featurizer</code> <code>Optional[Callable]</code> <p>atom featurizer to use</p> <code>None</code> <code>bond_featurizer</code> <code>Optional[Callable]</code> <p>atom featurizer to use</p> <code>None</code> <code>explicit_hydrogens</code> <code>bool</code> <p>Whether to use explicit hydrogen in preprocessing of the input molecule</p> <code>False</code> <code>canonical_atom_order</code> <code>bool</code> <p>Whether to use a canonical ordering of the atoms</p> <code>True</code> <code>self_loop</code> <code>bool</code> <p>Whether to add self loops or not</p> <code>False</code> <code>n_jobs</code> <code>int</code> <p>Number of job to run in parallel. Defaults to 1.</p> <code>1</code> <code>verbose</code> <code>bool</code> <p>Verbosity level. Defaults to True.</p> <code>False</code> <code>dtype</code> <code>Optional[Callable]</code> <p>Output data type. Defaults to None</p> <code>None</code> Source code in <code>molfeat/trans/graph/adj.py</code> <pre><code>def __init__(\n    self,\n    atom_featurizer: Optional[Callable] = None,\n    bond_featurizer: Optional[Callable] = None,\n    explicit_hydrogens: bool = False,\n    canonical_atom_order: bool = True,\n    self_loop: bool = False,\n    n_jobs: int = 1,\n    verbose: bool = False,\n    dtype: Optional[Callable] = None,\n    **params,\n):\n\"\"\"Mol to Graph transformer base class\n\n    Args:\n        atom_featurizer: atom featurizer to use\n        bond_featurizer: atom featurizer to use\n        explicit_hydrogens: Whether to use explicit hydrogen in preprocessing of the input molecule\n        canonical_atom_order: Whether to use a canonical ordering of the atoms\n        self_loop: Whether to add self loops or not\n        n_jobs: Number of job to run in parallel. Defaults to 1.\n        verbose: Verbosity level. Defaults to True.\n        dtype: Output data type. Defaults to None\n    \"\"\"\n\n    self._save_input_args()\n\n    super().__init__(\n        n_jobs=n_jobs,\n        verbose=verbose,\n        dtype=dtype,\n        featurizer=\"none\",\n        self_loop=self_loop,\n        canonical_atom_order=canonical_atom_order,\n        explicit_hydrogens=explicit_hydrogens,\n        **params,\n    )\n    if atom_featurizer is None:\n        atom_featurizer = AtomCalculator()\n    self.atom_featurizer = atom_featurizer\n    self.bond_featurizer = bond_featurizer\n    self._atom_dim = None\n    self._bond_dim = None\n</code></pre>"},{"location":"api/molfeat.trans.graph.html#molfeat.trans.graph.adj.GraphTransformer.auto_self_loop","title":"<code>auto_self_loop()</code>","text":"<p>Patch the featurizer to auto support self loop based on the bond featurizer characteristics</p> Source code in <code>molfeat/trans/graph/adj.py</code> <pre><code>def auto_self_loop(self):\n\"\"\"Patch the featurizer to auto support self loop based on the bond featurizer characteristics\"\"\"\n    bf_self_loop = None\n    if self.bond_featurizer is not None:\n        bf_self_loop = getattr(self.bond_featurizer, \"self_loop\", None)\n        bf_self_loop = bf_self_loop or getattr(self.bond_featurizer, \"_self_loop\", None)\n    if bf_self_loop is not None:\n        self.self_loop = bf_self_loop\n</code></pre>"},{"location":"api/molfeat.trans.graph.html#molfeat.trans.graph.adj.GraphTransformer.fit","title":"<code>fit(**fit_params)</code>","text":"<p>Fit the current transformer on given dataset.</p> Source code in <code>molfeat/trans/graph/adj.py</code> <pre><code>def fit(self, **fit_params):\n\"\"\"Fit the current transformer on given dataset.\"\"\"\n    if self.verbose:\n        logger.error(\"GraphTransformer featurizers cannot be fitted !\")\n    return self\n</code></pre>"},{"location":"api/molfeat.trans.graph.html#molfeat.trans.graph.adj.GraphTransformer.preprocess","title":"<code>preprocess(inputs, labels=None)</code>","text":"<p>Preprocess list of input molecules</p> <p>Parameters:</p> Name Type Description Default <code>labels</code> <p>For compatibility</p> <code>None</code> Source code in <code>molfeat/trans/graph/adj.py</code> <pre><code>def preprocess(self, inputs, labels=None):\n\"\"\"Preprocess list of input molecules\n    Args:\n        labels: For compatibility\n    \"\"\"\n    inputs, labels = super().preprocess(inputs, labels)\n    new_inputs = []\n    for m in inputs:\n        try:\n            mol = dm.to_mol(\n                m, add_hs=self.explicit_hydrogens, ordered=self.canonical_atom_order\n            )\n        except:\n            mol = None\n        new_inputs.append(mol)\n\n    return new_inputs, labels\n</code></pre>"},{"location":"api/molfeat.trans.graph.html#molfeat.trans.graph.adj.PYGGraphTransformer","title":"<code>PYGGraphTransformer</code>","text":"<p>         Bases: <code>AdjGraphTransformer</code></p> <p>Graph transformer for the PYG models</p> Source code in <code>molfeat/trans/graph/adj.py</code> <pre><code>class PYGGraphTransformer(AdjGraphTransformer):\n\"\"\"Graph transformer for the PYG models\"\"\"\n\n    def _graph_featurizer(self, mol: dm.Mol):\n        # we have used bond_calculator, therefore we need to\n        # go over the molecules and fetch the proper bond info from the atom idx\n        if self.bond_featurizer is None or (\n            isinstance(self.bond_featurizer, EdgeMatCalculator)\n            or hasattr(self.bond_featurizer, \"pairwise_atom_funcs\")\n        ):\n            graph = super()._graph_featurizer(mol)\n            (rows, cols) = np.nonzero(graph)\n            return np.vstack((rows, cols))\n\n        # we have a regular bond calculator here instead of all pairwise atoms\n        graph = []\n        for i in range(mol.GetNumBonds()):\n            bond = mol.GetBondWithIdx(i)\n            a_idx_1 = bond.GetBeginAtomIdx()\n            a_idx_2 = bond.GetEndAtomIdx()\n            graph += [[a_idx_1, a_idx_2], [a_idx_2, a_idx_1]]\n        if getattr(self.bond_featurizer, \"_self_loop\", False):\n            graph.extend([[atom_ind, atom_ind] for atom_ind in range(mol.GetNumAtoms())])\n        graph = np.asarray(graph).T\n        return graph\n\n    def _convert_feat_to_data_point(\n        self,\n        graph: np.ndarray,\n        node_feat: np.ndarray,\n        bond_feat: Optional[np.ndarray] = None,\n    ):\n\"\"\"Convert extracted graph features to a pyg Data object\n        Args:\n            graph: graph adjacency matrix\n            node_feat: node features\n            bond_feat: bond features\n\n        Returns:\n            datapoint: a pyg Data object\n        \"\"\"\n        node_feat = torch.tensor(node_feat, dtype=torch.float32)\n        # construct edge index array E of shape (2, n_edges)\n        graph = torch.LongTensor(graph).view(2, -1)\n\n        if bond_feat is not None:\n            bond_feat = torch.tensor(bond_feat, dtype=torch.float32)\n            if bond_feat.ndim == 3:\n                bond_feat = bond_feat[graph[0, :], graph[1, :]]\n\n        d = Data(x=node_feat, edge_index=graph, edge_attr=bond_feat)\n        return d\n\n    def transform(self, mols: List[Union[dm.Mol, str]], **kwargs):\nr\"\"\"\n        Compute the graph featurization for a set of molecules.\n\n        Args:\n            mols: a list containing smiles or mol objects\n            kwargs: arguments to pass to the `super().transform`\n\n         Returns:\n             features: a list of Data point for each molecule in the input set\n        \"\"\"\n        features = super().transform(mols, keep_dict=False, **kwargs)\n        return [self._convert_feat_to_data_point(*feat) for feat in features]\n\n    def get_collate_fn(\n        self,\n        follow_batch: Optional[List[str]] = None,\n        exclude_keys: Optional[List[str]] = None,\n        return_pair: Optional[bool] = True,\n        **kwargs,\n    ):\n\"\"\"\n        Get collate function for pyg graphs\n\n        Args:\n            follow_batchL Creates assignment batch vectors for each key in the list. (default: :obj:`None`)\n            exclude_keys: Will exclude each key in the list. (default: :obj:`None`)\n            return_pair: whether to return a pair of X,y (for molearn) of a databatch (default: :obj:`True`)\n\n        Returns:\n            Collated samples.\n        \"\"\"\n        collator = Collater(follow_batch=follow_batch, exclude_keys=exclude_keys)\n        return partial(self._collate_batch, collator=collator, return_pair=return_pair)\n\n    @staticmethod\n    def _collate_batch(batch, collator: Callable, return_pair: bool = False, **kwargs):\n\"\"\"\n        Collate a batch of samples.\n\n        Args:\n            batch: Batch of samples.\n            collator: collator function\n            return_pair: whether to return a pair of (X,y) a databatch\n        Returns:\n            Collated samples.\n        \"\"\"\n        if isinstance(batch[0], (list, tuple)) and len(batch[0]) &gt; 1:\n            graphs, labels = map(list, zip(*batch))\n            for graph, label in zip(graphs, labels):\n                graph.y = label\n            batch = graphs\n        batch = collator(batch)\n        if return_pair:\n            return (batch, batch.y)\n        return batch\n</code></pre>"},{"location":"api/molfeat.trans.graph.html#molfeat.trans.graph.adj.PYGGraphTransformer.get_collate_fn","title":"<code>get_collate_fn(follow_batch=None, exclude_keys=None, return_pair=True, **kwargs)</code>","text":"<p>Get collate function for pyg graphs</p> <p>Parameters:</p> Name Type Description Default <code>follow_batchL</code> <code>Creates assignment batch vectors for each key in the list. (default</code> <p>:obj:<code>None</code>)</p> required <code>exclude_keys</code> <code>Optional[List[str]]</code> <p>Will exclude each key in the list. (default: :obj:<code>None</code>)</p> <code>None</code> <code>return_pair</code> <code>Optional[bool]</code> <p>whether to return a pair of X,y (for molearn) of a databatch (default: :obj:<code>True</code>)</p> <code>True</code> <p>Returns:</p> Type Description <p>Collated samples.</p> Source code in <code>molfeat/trans/graph/adj.py</code> <pre><code>def get_collate_fn(\n    self,\n    follow_batch: Optional[List[str]] = None,\n    exclude_keys: Optional[List[str]] = None,\n    return_pair: Optional[bool] = True,\n    **kwargs,\n):\n\"\"\"\n    Get collate function for pyg graphs\n\n    Args:\n        follow_batchL Creates assignment batch vectors for each key in the list. (default: :obj:`None`)\n        exclude_keys: Will exclude each key in the list. (default: :obj:`None`)\n        return_pair: whether to return a pair of X,y (for molearn) of a databatch (default: :obj:`True`)\n\n    Returns:\n        Collated samples.\n    \"\"\"\n    collator = Collater(follow_batch=follow_batch, exclude_keys=exclude_keys)\n    return partial(self._collate_batch, collator=collator, return_pair=return_pair)\n</code></pre>"},{"location":"api/molfeat.trans.graph.html#molfeat.trans.graph.adj.PYGGraphTransformer.transform","title":"<code>transform(mols, **kwargs)</code>","text":"<p>Compute the graph featurization for a set of molecules.</p> <p>Parameters:</p> Name Type Description Default <code>mols</code> <code>List[Union[dm.Mol, str]]</code> <p>a list containing smiles or mol objects</p> required <code>kwargs</code> <p>arguments to pass to the <code>super().transform</code></p> <code>{}</code> <p>Returns:      features: a list of Data point for each molecule in the input set</p> Source code in <code>molfeat/trans/graph/adj.py</code> <pre><code>def transform(self, mols: List[Union[dm.Mol, str]], **kwargs):\nr\"\"\"\n    Compute the graph featurization for a set of molecules.\n\n    Args:\n        mols: a list containing smiles or mol objects\n        kwargs: arguments to pass to the `super().transform`\n\n     Returns:\n         features: a list of Data point for each molecule in the input set\n    \"\"\"\n    features = super().transform(mols, keep_dict=False, **kwargs)\n    return [self._convert_feat_to_data_point(*feat) for feat in features]\n</code></pre>"},{"location":"api/molfeat.trans.graph.html#molfeat.trans.graph.adj.TopoDistGraphTransformer","title":"<code>TopoDistGraphTransformer</code>","text":"<p>         Bases: <code>AdjGraphTransformer</code></p> <p>Graph featurizer using the topological distance between each pair of nodes instead of the adjacency matrix.</p> <p>The <code>self_loop</code> attribute is ignored here as the distance between an atom and itself is 0.</p> Source code in <code>molfeat/trans/graph/adj.py</code> <pre><code>class TopoDistGraphTransformer(AdjGraphTransformer):\n\"\"\"\n    Graph featurizer using the topological distance between each pair\n    of nodes instead of the adjacency matrix.\n\n    The `self_loop` attribute is ignored here as the distance between an atom and itself is 0.\n    \"\"\"\n\n    def _graph_featurizer(self, mol: dm.Mol):\n\"\"\"Graph topological distance featurizer\n\n        Args:\n            mol: molecule to transform into a graph\n\n        Returns:\n            mat : N,N matrix representing the graph\n        \"\"\"\n        return GetDistanceMatrix(mol)\n</code></pre>"},{"location":"api/molfeat.trans.graph.html#tree","title":"Tree","text":""},{"location":"api/molfeat.trans.graph.html#molfeat.trans.graph.tree.MolTreeDecompositionTransformer","title":"<code>MolTreeDecompositionTransformer</code>","text":"<p>         Bases: <code>MoleculeTransformer</code></p> <p>Transforms a molecule into a tree structure whose nodes correspond to different functional groups.</p> Source code in <code>molfeat/trans/graph/tree.py</code> <pre><code>class MolTreeDecompositionTransformer(MoleculeTransformer):\nr\"\"\"\n    Transforms a molecule into a tree structure whose nodes correspond to different functional groups.\n    \"\"\"\n\n    def __init__(\n        self,\n        vocab: Optional[Iterable] = None,\n        one_hot: bool = False,\n        dtype: Optional[Callable] = None,\n        cache: bool = True,\n        **params,\n    ):\n\"\"\"MolTree featurizer\n\n        Args:\n            vocab: List of the smiles of the functional groups or clusters.\n                If None, the transformer should be fiited before any usage.\n            one_hot (bool, optional): Whether or not for a tree a 1d array or a 2d array is returned as features\n                If 1d array, vocabulary elements are mapped into integers,\n                otherwise, vocabulary elements  ar mapped into one-hot vectors\n            cache: Whether to cache the tree decomposition to avoid recomputing for seen molecules\n            dtype: Output data type. Defaults to None\n\n        Attributes:\n            vocab: Mapping from clusters to integers\n            vocab_size: The number of clusters + 1\n            one_hot: Whether or not for a sequence a 1d array or a 2d array is returned as features\n        \"\"\"\n\n        self._save_input_args()\n\n        super().__init__(\n            dtype=dtype,\n            one_hot=one_hot,\n            cache=cache,\n            featurizer=TreeDecomposer(cache=cache),\n            **params,\n        )\n        if vocab is not None:\n            self.vocab = vocab\n            self._vocab_size = len(self.vocab) + 1\n            self._fitted = True\n        else:\n            self.vocab = None\n            self._vocab_size = None\n            self._fitted = False\n\n        if not requires.check(\"dgl\"):\n            raise ValueError(\"dgl is required for this featurizer, please install it first\")\n\n        if self.dtype is not None and not datatype.is_dtype_tensor(self.dtype):\n            raise ValueError(\"DGL featurizer only supports torch tensors currently\")\n\n    @property\n    def vocab_size(self):\n\"\"\"Compute vocab size of this featurizer\n\n        Returns:\n            size: vocab size\n        \"\"\"\n        return self._vocab_size\n\n    def fit(\n        self,\n        X: List[Union[rdchem.Mol, str]],\n        y: Optional[list] = None,\n        output_file: Optional[os.PathLike] = None,\n        **fit_params,\n    ):\n\"\"\"Fit the current transformer on given dataset.\n\n        The goal of fitting is for example to identify nan columns values\n        that needs to be removed from the dataset\n\n        Args:\n            X: input list of molecules\n            y (list, optional): Optional list of molecular properties. Defaults to None.\n            output_file: path to a file that will be used to store the generated set of fragments.\n            fit_params: key val of additional fit parameters\n\n\n        Returns:\n            self: MolTransformer instance after fitting\n        \"\"\"\n        if self.vocab is not None:\n            logger.warning(\"The previous vocabulary of fragments will be erased.\")\n        self.vocab = self.featurizer.get_vocab(X, output_file=output_file, log=self.verbose)\n        self._vocab_size = len(self.vocab) + 1\n        self._fitted = True\n\n        # save the vocab in the state\n        self._input_args[\"vocab\"] = self.vocab\n\n        return self\n\n    def _transform(self, mol: rdchem.Mol):\nr\"\"\"\n        Compute features for a single molecule.\n        This method would potentially need to be reimplemented by child classes\n\n        Args:\n            mol (rdchem.Mol): molecule to transform into features\n\n        Returns\n            feat: featurized input molecule\n\n        \"\"\"\n        if not self._fitted:\n            raise ValueError(\n                \"Need to call the fit function before any transformation. \\\n                Or provide the fragments vocabulary at the object construction\"\n            )\n\n        try:\n            _, edges, fragments = self.featurizer(mol)\n            n_nodes = len(fragments)\n            enc = [self.vocab.index(f) + 1 if f in self.vocab else 0 for f in fragments]\n            enc = datatype.cast(enc, (self.dtype or torch.long))\n            graph = dgl.graph(([], []))\n            graph.add_nodes(n_nodes)\n            for edge in edges:\n                graph.add_edges(*edge)\n                graph.add_edges(*edge[::-1])\n\n            if self.one_hot:\n                enc = [one_hot_encoding(f, self.vocab, encode_unknown=True) for f in fragments]\n                enc = np.asarray(enc)\n                enc = datatype.cast(enc, (self.dtype or torch.float))\n\n            graph.ndata[\"hv\"] = enc\n        except Exception as e:\n            raise e\n            if self.verbose:\n                logger.error(e)\n            graph = None\n        return graph\n</code></pre>"},{"location":"api/molfeat.trans.graph.html#molfeat.trans.graph.tree.MolTreeDecompositionTransformer.vocab","title":"<code>vocab = vocab</code>  <code>instance-attribute</code>","text":""},{"location":"api/molfeat.trans.graph.html#molfeat.trans.graph.tree.MolTreeDecompositionTransformer.vocab_size","title":"<code>vocab_size</code>  <code>property</code>","text":"<p>Compute vocab size of this featurizer</p> <p>Returns:</p> Name Type Description <code>size</code> <p>vocab size</p>"},{"location":"api/molfeat.trans.graph.html#molfeat.trans.graph.tree.MolTreeDecompositionTransformer.__init__","title":"<code>__init__(vocab=None, one_hot=False, dtype=None, cache=True, **params)</code>","text":"<p>MolTree featurizer</p> <p>Parameters:</p> Name Type Description Default <code>vocab</code> <code>Optional[Iterable]</code> <p>List of the smiles of the functional groups or clusters. If None, the transformer should be fiited before any usage.</p> <code>None</code> <code>one_hot</code> <code>bool</code> <p>Whether or not for a tree a 1d array or a 2d array is returned as features If 1d array, vocabulary elements are mapped into integers, otherwise, vocabulary elements  ar mapped into one-hot vectors</p> <code>False</code> <code>cache</code> <code>bool</code> <p>Whether to cache the tree decomposition to avoid recomputing for seen molecules</p> <code>True</code> <code>dtype</code> <code>Optional[Callable]</code> <p>Output data type. Defaults to None</p> <code>None</code> <p>Attributes:</p> Name Type Description <code>vocab</code> <p>Mapping from clusters to integers</p> <code>vocab_size</code> <p>The number of clusters + 1</p> <code>one_hot</code> <p>Whether or not for a sequence a 1d array or a 2d array is returned as features</p> Source code in <code>molfeat/trans/graph/tree.py</code> <pre><code>def __init__(\n    self,\n    vocab: Optional[Iterable] = None,\n    one_hot: bool = False,\n    dtype: Optional[Callable] = None,\n    cache: bool = True,\n    **params,\n):\n\"\"\"MolTree featurizer\n\n    Args:\n        vocab: List of the smiles of the functional groups or clusters.\n            If None, the transformer should be fiited before any usage.\n        one_hot (bool, optional): Whether or not for a tree a 1d array or a 2d array is returned as features\n            If 1d array, vocabulary elements are mapped into integers,\n            otherwise, vocabulary elements  ar mapped into one-hot vectors\n        cache: Whether to cache the tree decomposition to avoid recomputing for seen molecules\n        dtype: Output data type. Defaults to None\n\n    Attributes:\n        vocab: Mapping from clusters to integers\n        vocab_size: The number of clusters + 1\n        one_hot: Whether or not for a sequence a 1d array or a 2d array is returned as features\n    \"\"\"\n\n    self._save_input_args()\n\n    super().__init__(\n        dtype=dtype,\n        one_hot=one_hot,\n        cache=cache,\n        featurizer=TreeDecomposer(cache=cache),\n        **params,\n    )\n    if vocab is not None:\n        self.vocab = vocab\n        self._vocab_size = len(self.vocab) + 1\n        self._fitted = True\n    else:\n        self.vocab = None\n        self._vocab_size = None\n        self._fitted = False\n\n    if not requires.check(\"dgl\"):\n        raise ValueError(\"dgl is required for this featurizer, please install it first\")\n\n    if self.dtype is not None and not datatype.is_dtype_tensor(self.dtype):\n        raise ValueError(\"DGL featurizer only supports torch tensors currently\")\n</code></pre>"},{"location":"api/molfeat.trans.graph.html#molfeat.trans.graph.tree.MolTreeDecompositionTransformer.fit","title":"<code>fit(X, y=None, output_file=None, **fit_params)</code>","text":"<p>Fit the current transformer on given dataset.</p> <p>The goal of fitting is for example to identify nan columns values that needs to be removed from the dataset</p> <p>Parameters:</p> Name Type Description Default <code>X</code> <code>List[Union[rdchem.Mol, str]]</code> <p>input list of molecules</p> required <code>y</code> <code>list</code> <p>Optional list of molecular properties. Defaults to None.</p> <code>None</code> <code>output_file</code> <code>Optional[os.PathLike]</code> <p>path to a file that will be used to store the generated set of fragments.</p> <code>None</code> <code>fit_params</code> <p>key val of additional fit parameters</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>self</code> <p>MolTransformer instance after fitting</p> Source code in <code>molfeat/trans/graph/tree.py</code> <pre><code>def fit(\n    self,\n    X: List[Union[rdchem.Mol, str]],\n    y: Optional[list] = None,\n    output_file: Optional[os.PathLike] = None,\n    **fit_params,\n):\n\"\"\"Fit the current transformer on given dataset.\n\n    The goal of fitting is for example to identify nan columns values\n    that needs to be removed from the dataset\n\n    Args:\n        X: input list of molecules\n        y (list, optional): Optional list of molecular properties. Defaults to None.\n        output_file: path to a file that will be used to store the generated set of fragments.\n        fit_params: key val of additional fit parameters\n\n\n    Returns:\n        self: MolTransformer instance after fitting\n    \"\"\"\n    if self.vocab is not None:\n        logger.warning(\"The previous vocabulary of fragments will be erased.\")\n    self.vocab = self.featurizer.get_vocab(X, output_file=output_file, log=self.verbose)\n    self._vocab_size = len(self.vocab) + 1\n    self._fitted = True\n\n    # save the vocab in the state\n    self._input_args[\"vocab\"] = self.vocab\n\n    return self\n</code></pre>"},{"location":"api/molfeat.trans.pretrained.dgl_pretrained.html","title":"dgl","text":""},{"location":"api/molfeat.trans.pretrained.dgl_pretrained.html#dgllife-pretrained-models","title":"DGLLife pretrained models","text":""},{"location":"api/molfeat.trans.pretrained.dgl_pretrained.html#molfeat.trans.pretrained.dgl_pretrained.DGLModel","title":"<code>DGLModel</code>","text":"<p>         Bases: <code>PretrainedStoreModel</code></p> <p>Load one of the pretrained DGL models for molecular embedding:</p> Source code in <code>molfeat/trans/pretrained/dgl_pretrained.py</code> <pre><code>class DGLModel(PretrainedStoreModel):\nr\"\"\"\n    Load one of the pretrained DGL models for molecular embedding:\n    \"\"\"\n    AVAILABLE_MODELS = [\n        \"gin_supervised_contextpred\",\n        \"gin_supervised_infomax\",\n        \"gin_supervised_edgepred\",\n        \"gin_supervised_masking\",\n        \"JTVAE_ZINC_no_kl\",\n    ]\n\n    def __init__(\n        self,\n        name: str,\n        cache_path: Optional[os.PathLike] = None,\n        store: Optional[ModelStore] = None,\n    ):\n        if name not in self.AVAILABLE_MODELS:\n            raise ValueError(f\"{name} is not a supported pretrained gin model\")\n\n        super().__init__(name, cache_path=cache_path, store=store)\n        self._model = None\n\n    @classmethod\n    def available_models(cls, query: Optional[str] = None):\n\"\"\"List available models\n        Args:\n            query (str, optional): Query to filter the list of available models. Defaults to None.\n        \"\"\"\n        if query is None:\n            return cls.AVAILABLE_MODELS\n        else:\n            return [x for x in cls.AVAILABLE_MODELS if re.search(query, x, re.IGNORECASE)]\n\n    @classmethod\n    def from_pretrained(cls, model_name: str):\n\"\"\"Load pretrained model using the dgllife API and not the store\"\"\"\n        if not requires.check(\"dgllife\"):\n            raise ValueError(\"dgllife is not installed\")\n        import dgllife\n\n        base_model = dgllife.model.load_pretrained(model_name)\n        model = DGLModel(name=model_name)\n        model.eval()\n        model._model = base_model\n        return model\n\n    def load(self):\n\"\"\"Load GIN model\"\"\"\n        if self._model is not None:\n            return self._model\n        download_output_dir = self._artifact_load(\n            name=self.name, download_path=self.cache_path, store=self.store\n        )\n        model_path = dm.fs.join(download_output_dir, self.store.MODEL_PATH_NAME)\n        with fsspec.open(model_path, \"rb\") as f:\n            model = joblib.load(f)\n        model.eval()\n        return model\n</code></pre>"},{"location":"api/molfeat.trans.pretrained.dgl_pretrained.html#molfeat.trans.pretrained.dgl_pretrained.DGLModel.AVAILABLE_MODELS","title":"<code>AVAILABLE_MODELS = ['gin_supervised_contextpred', 'gin_supervised_infomax', 'gin_supervised_edgepred', 'gin_supervised_masking', 'JTVAE_ZINC_no_kl']</code>  <code>class-attribute</code>","text":""},{"location":"api/molfeat.trans.pretrained.dgl_pretrained.html#molfeat.trans.pretrained.dgl_pretrained.DGLModel.__init__","title":"<code>__init__(name, cache_path=None, store=None)</code>","text":"Source code in <code>molfeat/trans/pretrained/dgl_pretrained.py</code> <pre><code>def __init__(\n    self,\n    name: str,\n    cache_path: Optional[os.PathLike] = None,\n    store: Optional[ModelStore] = None,\n):\n    if name not in self.AVAILABLE_MODELS:\n        raise ValueError(f\"{name} is not a supported pretrained gin model\")\n\n    super().__init__(name, cache_path=cache_path, store=store)\n    self._model = None\n</code></pre>"},{"location":"api/molfeat.trans.pretrained.dgl_pretrained.html#molfeat.trans.pretrained.dgl_pretrained.DGLModel.available_models","title":"<code>available_models(query=None)</code>  <code>classmethod</code>","text":"<p>List available models</p> <p>Parameters:</p> Name Type Description Default <code>query</code> <code>str</code> <p>Query to filter the list of available models. Defaults to None.</p> <code>None</code> Source code in <code>molfeat/trans/pretrained/dgl_pretrained.py</code> <pre><code>@classmethod\ndef available_models(cls, query: Optional[str] = None):\n\"\"\"List available models\n    Args:\n        query (str, optional): Query to filter the list of available models. Defaults to None.\n    \"\"\"\n    if query is None:\n        return cls.AVAILABLE_MODELS\n    else:\n        return [x for x in cls.AVAILABLE_MODELS if re.search(query, x, re.IGNORECASE)]\n</code></pre>"},{"location":"api/molfeat.trans.pretrained.dgl_pretrained.html#molfeat.trans.pretrained.dgl_pretrained.DGLModel.from_pretrained","title":"<code>from_pretrained(model_name)</code>  <code>classmethod</code>","text":"<p>Load pretrained model using the dgllife API and not the store</p> Source code in <code>molfeat/trans/pretrained/dgl_pretrained.py</code> <pre><code>@classmethod\ndef from_pretrained(cls, model_name: str):\n\"\"\"Load pretrained model using the dgllife API and not the store\"\"\"\n    if not requires.check(\"dgllife\"):\n        raise ValueError(\"dgllife is not installed\")\n    import dgllife\n\n    base_model = dgllife.model.load_pretrained(model_name)\n    model = DGLModel(name=model_name)\n    model.eval()\n    model._model = base_model\n    return model\n</code></pre>"},{"location":"api/molfeat.trans.pretrained.dgl_pretrained.html#molfeat.trans.pretrained.dgl_pretrained.DGLModel.load","title":"<code>load()</code>","text":"<p>Load GIN model</p> Source code in <code>molfeat/trans/pretrained/dgl_pretrained.py</code> <pre><code>def load(self):\n\"\"\"Load GIN model\"\"\"\n    if self._model is not None:\n        return self._model\n    download_output_dir = self._artifact_load(\n        name=self.name, download_path=self.cache_path, store=self.store\n    )\n    model_path = dm.fs.join(download_output_dir, self.store.MODEL_PATH_NAME)\n    with fsspec.open(model_path, \"rb\") as f:\n        model = joblib.load(f)\n    model.eval()\n    return model\n</code></pre>"},{"location":"api/molfeat.trans.pretrained.dgl_pretrained.html#molfeat.trans.pretrained.dgl_pretrained.PretrainedDGLTransformer","title":"<code>PretrainedDGLTransformer</code>","text":"<p>         Bases: <code>PretrainedMolTransformer</code></p> <p>DGL Pretrained transformer</p> <p>Attributes:</p> Name Type Description <code>featurizer</code> <code>DGLModel</code> <p>DGL featurizer object</p> <code>dtype</code> <code>type</code> <p>Data type.</p> <code>pooling</code> <code>str</code> <p>Pooling method for GIN's embedding layer (Default: mean)</p> <code>batch_size</code> <code>int</code> <p>Batch size to consider for model</p> Source code in <code>molfeat/trans/pretrained/dgl_pretrained.py</code> <pre><code>class PretrainedDGLTransformer(PretrainedMolTransformer):\nr\"\"\"\n    DGL Pretrained transformer\n\n    Attributes:\n        featurizer (DGLModel): DGL featurizer object\n        dtype (type, optional): Data type.\n        pooling (str, optional): Pooling method for GIN's embedding layer (Default: mean)\n        batch_size (int, optional): Batch size to consider for model\n    \"\"\"\n\n    def __init__(\n        self,\n        kind: Union[str, DGLModel] = \"gin_supervised_contextpred\",\n        dtype: Callable = np.float32,\n        pooling: str = \"mean\",\n        batch_size: int = 32,\n        preload: bool = False,\n        **params,\n    ):\n\"\"\"DGL pretrained featurizer\n\n        Args:\n            kind (str, optional): name of the pretrained gin. Defaults to \"gin_supervised_contextpred\".\n            dtype: datatype. Defaults to np.float32.\n            pooling: global pooling to perform. Defaults to \"mean\".\n            batch_size: batch size for featurizing the molecules. Defaults to 32.\n            preload: whether to preload the internal pretrained featurizer or not\n\n        \"\"\"\n        if not requires.check(\"dgllife\"):\n            raise ValueError(\"Cannot find dgl|dgllife. It's required for this featurizer !\")\n        super().__init__(\n            dtype=dtype,\n            pooling=pooling,\n            batch_size=batch_size,\n            preload=preload,\n            kind=kind,\n            **params,\n        )\n        self.pooling = pooling\n        self.preload = preload\n        self._pooling_obj = self.get_pooling(pooling)\n        if isinstance(kind, DGLModel):\n            self.kind = kind.name\n            self.featurizer = kind\n        else:\n            self.kind = kind\n            self.featurizer = DGLModel(name=self.kind)\n        self.batch_size = int(batch_size)\n        if self.preload:\n            self.featurizer = self.featurizer.load()\n\n    def __repr__(self):\n        return \"{}(kind={}, pooling={}, dtype={})\".format(\n            self.__class__.__name__,\n            _parse_to_evaluable_str(self.kind),\n            _parse_to_evaluable_str(self.pooling),\n            _parse_to_evaluable_str(self.dtype),\n        )\n\n    def _update_params(self):\n        super()._update_params()\n        self._pooling_obj = self.get_pooling(self.pooling)\n        featurizer = DGLModel(name=self.kind)\n        self.featurizer = featurizer.load()\n\n    @staticmethod\n    def get_pooling(pooling: str):\n\"\"\"Get pooling method from name\n\n        Args:\n            pooling: name of the pooling method\n        \"\"\"\n        pooling = pooling.lower()\n        if pooling in [\"mean\", \"avg\", \"average\"]:\n            return AvgPooling()\n        elif pooling == \"sum\":\n            return SumPooling()\n        elif pooling == \"max\":\n            return MaxPooling()\n        else:\n            raise ValueError(f\"Pooling: {pooling} not supported !\")\n\n    def _embed_gin(self, dataset):\n\"\"\"Embed molecules using GIN\"\"\"\n        data_loader = DataLoader(\n            dataset,\n            batch_size=self.batch_size,\n            collate_fn=dgl.batch,\n            shuffle=False,\n            drop_last=False,\n        )\n\n        mol_emb = []\n        for batch_id, bg in enumerate(data_loader):\n            if self.verbose:\n                logger.debug(\"Processing batch {:d}/{:d}\".format(batch_id + 1, len(data_loader)))\n            nfeats = [\n                bg.ndata.pop(\"atomic_number\").to(torch.device(\"cpu\")),\n                bg.ndata.pop(\"chirality_type\").to(torch.device(\"cpu\")),\n            ]\n            efeats = [\n                bg.edata.pop(\"bond_type\").to(torch.device(\"cpu\")),\n                bg.edata.pop(\"bond_direction_type\").to(torch.device(\"cpu\")),\n            ]\n            with torch.no_grad():\n                node_repr = self.featurizer(bg, nfeats, efeats)\n            mol_emb.append(self._pooling_obj(bg, node_repr))\n        mol_emb = torch.cat(mol_emb, dim=0).detach().cpu().numpy()\n        return mol_emb\n\n    def _embed_jtvae(self, dataset):\n\"\"\"Embed molecules using JTVAE\"\"\"\n        dataloader = DataLoader(dataset, batch_size=1, collate_fn=JTVAECollator(training=False))\n\n        mol_emb = []\n        for tree, tree_graph, mol_graph in dataloader:\n            _, tree_vec, mol_vec = self.featurizer.encode(tree_graph, mol_graph)\n            enc = torch.cat([tree_vec, mol_vec], dim=1).detach()\n            mol_emb.append(enc)\n        mol_emb = torch.cat(mol_emb, dim=0).cpu().numpy()\n        return mol_emb\n\n    def _embed(self, smiles: List[str], **kwargs):\n\"\"\"Embed molecules into a latent space\"\"\"\n        self._preload()\n        dataset, successes = self.graph_featurizer(smiles, kind=self.kind)\n        if self.kind in DGLModel.available_models(query=\"^jtvae\"):\n            mol_emb = self._embed_jtvae(dataset)\n        else:\n            mol_emb = self._embed_gin(dataset)\n\n        mol_emb = list(mol_emb)\n        out = []\n        k = 0\n        for success in successes:\n            if success:\n                out.append(mol_emb[k])\n                k += 1\n            else:\n                out.append(None)\n        return out\n\n    @staticmethod\n    def graph_featurizer(smiles: List[str], kind: Optional[str] = None):\n\"\"\"\n        Construct graphs from SMILES and featurize them\n\n        Args:\n            smiles: SMILES of molecules for embedding computation\n\n        Returns:\n            dataset: List of graphs constructed and featurized\n            list of bool: Indicators for whether the SMILES string can be parsed by RDKit\n        \"\"\"\n        if kind in DGLModel.available_models(query=\"^jtvae\"):\n            vocab = JTVAEVocab()\n\n            tmp_file = tempfile.NamedTemporaryFile(delete=False)\n            with fsspec.open(tmp_file.name, \"w\") as f:\n                f.write(\"\\n\".join(smiles))\n            dataset = JTVAEDataset(tmp_file.name, vocab, training=False)\n            os.unlink(tmp_file.name)\n            # JTVAE does not support failure\n            success = [True] * len(smiles)\n            if len(dataset) != len(smiles):\n                raise ValueError(\"JTVAE failed to featurize some molecules !\")\n            return dataset, success\n\n        else:\n            graphs = []\n            success = []\n            for smi in smiles:\n                try:\n                    mol = dm.to_mol(smi)\n                    if mol is None:\n                        success.append(False)\n                        continue\n                    g = mol_to_bigraph(\n                        mol,\n                        add_self_loop=True,\n                        node_featurizer=PretrainAtomFeaturizer(),\n                        edge_featurizer=PretrainBondFeaturizer(),\n                        canonical_atom_order=False,\n                    )\n                    graphs.append(g)\n                    success.append(True)\n                except Exception as e:\n                    logger.error(e)\n                    success.append(False)\n            return graphs, success\n</code></pre>"},{"location":"api/molfeat.trans.pretrained.dgl_pretrained.html#molfeat.trans.pretrained.dgl_pretrained.PretrainedDGLTransformer.batch_size","title":"<code>batch_size = int(batch_size)</code>  <code>instance-attribute</code>","text":""},{"location":"api/molfeat.trans.pretrained.dgl_pretrained.html#molfeat.trans.pretrained.dgl_pretrained.PretrainedDGLTransformer.featurizer","title":"<code>featurizer = kind</code>  <code>instance-attribute</code>","text":""},{"location":"api/molfeat.trans.pretrained.dgl_pretrained.html#molfeat.trans.pretrained.dgl_pretrained.PretrainedDGLTransformer.kind","title":"<code>kind = kind.name</code>  <code>instance-attribute</code>","text":""},{"location":"api/molfeat.trans.pretrained.dgl_pretrained.html#molfeat.trans.pretrained.dgl_pretrained.PretrainedDGLTransformer.pooling","title":"<code>pooling = pooling</code>  <code>instance-attribute</code>","text":""},{"location":"api/molfeat.trans.pretrained.dgl_pretrained.html#molfeat.trans.pretrained.dgl_pretrained.PretrainedDGLTransformer.preload","title":"<code>preload = preload</code>  <code>instance-attribute</code>","text":""},{"location":"api/molfeat.trans.pretrained.dgl_pretrained.html#molfeat.trans.pretrained.dgl_pretrained.PretrainedDGLTransformer.__init__","title":"<code>__init__(kind='gin_supervised_contextpred', dtype=np.float32, pooling='mean', batch_size=32, preload=False, **params)</code>","text":"<p>DGL pretrained featurizer</p> <p>Parameters:</p> Name Type Description Default <code>kind</code> <code>str</code> <p>name of the pretrained gin. Defaults to \"gin_supervised_contextpred\".</p> <code>'gin_supervised_contextpred'</code> <code>dtype</code> <code>Callable</code> <p>datatype. Defaults to np.float32.</p> <code>np.float32</code> <code>pooling</code> <code>str</code> <p>global pooling to perform. Defaults to \"mean\".</p> <code>'mean'</code> <code>batch_size</code> <code>int</code> <p>batch size for featurizing the molecules. Defaults to 32.</p> <code>32</code> <code>preload</code> <code>bool</code> <p>whether to preload the internal pretrained featurizer or not</p> <code>False</code> Source code in <code>molfeat/trans/pretrained/dgl_pretrained.py</code> <pre><code>def __init__(\n    self,\n    kind: Union[str, DGLModel] = \"gin_supervised_contextpred\",\n    dtype: Callable = np.float32,\n    pooling: str = \"mean\",\n    batch_size: int = 32,\n    preload: bool = False,\n    **params,\n):\n\"\"\"DGL pretrained featurizer\n\n    Args:\n        kind (str, optional): name of the pretrained gin. Defaults to \"gin_supervised_contextpred\".\n        dtype: datatype. Defaults to np.float32.\n        pooling: global pooling to perform. Defaults to \"mean\".\n        batch_size: batch size for featurizing the molecules. Defaults to 32.\n        preload: whether to preload the internal pretrained featurizer or not\n\n    \"\"\"\n    if not requires.check(\"dgllife\"):\n        raise ValueError(\"Cannot find dgl|dgllife. It's required for this featurizer !\")\n    super().__init__(\n        dtype=dtype,\n        pooling=pooling,\n        batch_size=batch_size,\n        preload=preload,\n        kind=kind,\n        **params,\n    )\n    self.pooling = pooling\n    self.preload = preload\n    self._pooling_obj = self.get_pooling(pooling)\n    if isinstance(kind, DGLModel):\n        self.kind = kind.name\n        self.featurizer = kind\n    else:\n        self.kind = kind\n        self.featurizer = DGLModel(name=self.kind)\n    self.batch_size = int(batch_size)\n    if self.preload:\n        self.featurizer = self.featurizer.load()\n</code></pre>"},{"location":"api/molfeat.trans.pretrained.dgl_pretrained.html#molfeat.trans.pretrained.dgl_pretrained.PretrainedDGLTransformer.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>molfeat/trans/pretrained/dgl_pretrained.py</code> <pre><code>def __repr__(self):\n    return \"{}(kind={}, pooling={}, dtype={})\".format(\n        self.__class__.__name__,\n        _parse_to_evaluable_str(self.kind),\n        _parse_to_evaluable_str(self.pooling),\n        _parse_to_evaluable_str(self.dtype),\n    )\n</code></pre>"},{"location":"api/molfeat.trans.pretrained.dgl_pretrained.html#molfeat.trans.pretrained.dgl_pretrained.PretrainedDGLTransformer.get_pooling","title":"<code>get_pooling(pooling)</code>  <code>staticmethod</code>","text":"<p>Get pooling method from name</p> <p>Parameters:</p> Name Type Description Default <code>pooling</code> <code>str</code> <p>name of the pooling method</p> required Source code in <code>molfeat/trans/pretrained/dgl_pretrained.py</code> <pre><code>@staticmethod\ndef get_pooling(pooling: str):\n\"\"\"Get pooling method from name\n\n    Args:\n        pooling: name of the pooling method\n    \"\"\"\n    pooling = pooling.lower()\n    if pooling in [\"mean\", \"avg\", \"average\"]:\n        return AvgPooling()\n    elif pooling == \"sum\":\n        return SumPooling()\n    elif pooling == \"max\":\n        return MaxPooling()\n    else:\n        raise ValueError(f\"Pooling: {pooling} not supported !\")\n</code></pre>"},{"location":"api/molfeat.trans.pretrained.dgl_pretrained.html#molfeat.trans.pretrained.dgl_pretrained.PretrainedDGLTransformer.graph_featurizer","title":"<code>graph_featurizer(smiles, kind=None)</code>  <code>staticmethod</code>","text":"<p>Construct graphs from SMILES and featurize them</p> <p>Parameters:</p> Name Type Description Default <code>smiles</code> <code>List[str]</code> <p>SMILES of molecules for embedding computation</p> required <p>Returns:</p> Name Type Description <code>dataset</code> <p>List of graphs constructed and featurized</p> <p>list of bool: Indicators for whether the SMILES string can be parsed by RDKit</p> Source code in <code>molfeat/trans/pretrained/dgl_pretrained.py</code> <pre><code>@staticmethod\ndef graph_featurizer(smiles: List[str], kind: Optional[str] = None):\n\"\"\"\n    Construct graphs from SMILES and featurize them\n\n    Args:\n        smiles: SMILES of molecules for embedding computation\n\n    Returns:\n        dataset: List of graphs constructed and featurized\n        list of bool: Indicators for whether the SMILES string can be parsed by RDKit\n    \"\"\"\n    if kind in DGLModel.available_models(query=\"^jtvae\"):\n        vocab = JTVAEVocab()\n\n        tmp_file = tempfile.NamedTemporaryFile(delete=False)\n        with fsspec.open(tmp_file.name, \"w\") as f:\n            f.write(\"\\n\".join(smiles))\n        dataset = JTVAEDataset(tmp_file.name, vocab, training=False)\n        os.unlink(tmp_file.name)\n        # JTVAE does not support failure\n        success = [True] * len(smiles)\n        if len(dataset) != len(smiles):\n            raise ValueError(\"JTVAE failed to featurize some molecules !\")\n        return dataset, success\n\n    else:\n        graphs = []\n        success = []\n        for smi in smiles:\n            try:\n                mol = dm.to_mol(smi)\n                if mol is None:\n                    success.append(False)\n                    continue\n                g = mol_to_bigraph(\n                    mol,\n                    add_self_loop=True,\n                    node_featurizer=PretrainAtomFeaturizer(),\n                    edge_featurizer=PretrainBondFeaturizer(),\n                    canonical_atom_order=False,\n                )\n                graphs.append(g)\n                success.append(True)\n            except Exception as e:\n                logger.error(e)\n                success.append(False)\n        return graphs, success\n</code></pre>"},{"location":"api/molfeat.trans.pretrained.fcd.html","title":"fcd","text":""},{"location":"api/molfeat.trans.pretrained.fcd.html#fcd-model","title":"FCD model","text":""},{"location":"api/molfeat.trans.pretrained.fcd.html#molfeat.trans.pretrained.fcd.FCDTransformer","title":"<code>FCDTransformer</code>","text":"<p>         Bases: <code>PretrainedMolTransformer</code></p> <p>FCD transformer based on the ChemNet pretrained model</p> <p>Attributes:</p> Name Type Description <code>featurizer</code> <code>FCD</code> <p>FCD featurizer object</p> <code>dtype</code> <code>type</code> <p>Data type. Use call instead</p> Source code in <code>molfeat/trans/pretrained/fcd.py</code> <pre><code>class FCDTransformer(PretrainedMolTransformer):\nr\"\"\"\n    FCD transformer based on the ChemNet pretrained model\n\n    Attributes:\n        featurizer (FCD): FCD featurizer object\n        dtype (type, optional): Data type. Use call instead\n    \"\"\"\n\n    def __init__(self, n_jobs=1, dtype=np.float32, **params):\n        super().__init__(dtype=dtype, **params)\n        if not requires.check(\"fcd_torch\"):\n            raise ImportError(\n                \"`fcd_torch` is not available, please install it `conda install -c conda-forge fcd_torch'`\"\n            )\n\n        self.n_jobs = n_jobs\n        self.featurizer = FCD(n_jobs=n_jobs)\n\n    def _embed(self, smiles, **kwargs):\n\"\"\"Compute embedding\"\"\"\n        return self.featurizer.get_predictions(smiles)\n\n    def _update_params(self):\n        super()._update_params()\n        self.featurizer = FCD(n_jobs=self.n_jobs)\n</code></pre>"},{"location":"api/molfeat.trans.pretrained.fcd.html#molfeat.trans.pretrained.fcd.FCDTransformer.featurizer","title":"<code>featurizer = FCD(n_jobs=n_jobs)</code>  <code>instance-attribute</code>","text":""},{"location":"api/molfeat.trans.pretrained.fcd.html#molfeat.trans.pretrained.fcd.FCDTransformer.n_jobs","title":"<code>n_jobs = n_jobs</code>  <code>instance-attribute</code>","text":""},{"location":"api/molfeat.trans.pretrained.fcd.html#molfeat.trans.pretrained.fcd.FCDTransformer.__init__","title":"<code>__init__(n_jobs=1, dtype=np.float32, **params)</code>","text":"Source code in <code>molfeat/trans/pretrained/fcd.py</code> <pre><code>def __init__(self, n_jobs=1, dtype=np.float32, **params):\n    super().__init__(dtype=dtype, **params)\n    if not requires.check(\"fcd_torch\"):\n        raise ImportError(\n            \"`fcd_torch` is not available, please install it `conda install -c conda-forge fcd_torch'`\"\n        )\n\n    self.n_jobs = n_jobs\n    self.featurizer = FCD(n_jobs=n_jobs)\n</code></pre>"},{"location":"api/molfeat.trans.pretrained.graphormer.html","title":"graphormer","text":""},{"location":"api/molfeat.trans.pretrained.graphormer.html#graphormer-pretrained-models","title":"Graphormer pretrained models","text":""},{"location":"api/molfeat.trans.pretrained.graphormer.html#molfeat.trans.pretrained.graphormer.GraphormerTransformer","title":"<code>GraphormerTransformer</code>","text":"<p>         Bases: <code>PretrainedMolTransformer</code></p> <p>Graphormer transformer based on pretrained sequence embedder</p> <p>Attributes:</p> Name Type Description <code>featurizer</code> <p>Graphormer embedding object</p> <code>dtype</code> <p>Data type. Use call instead</p> <code>pooling</code> <p>Pooling method for Graphormer's embedding layer</p> Source code in <code>molfeat/trans/pretrained/graphormer.py</code> <pre><code>class GraphormerTransformer(PretrainedMolTransformer):\nr\"\"\"\n    Graphormer transformer based on pretrained sequence embedder\n\n    Attributes:\n        featurizer: Graphormer embedding object\n        dtype: Data type. Use call instead\n        pooling: Pooling method for Graphormer's embedding layer\n    \"\"\"\n\n    def __init__(\n        self,\n        kind: str = \"pcqm4mv2_graphormer_base\",\n        dtype: Callable = np.float32,\n        pooling: str = \"mean\",\n        max_length: Optional[int] = None,\n        version=None,\n        **params,\n    ):\n        super().__init__(dtype=dtype, pooling=pooling, **params)\n        if not requires.check(\"graphormer\"):\n            raise ValueError(\"`graphormer` is required to use this featurizer.\")\n\n        self.preload = True\n        self.name = kind\n        self._require_mols = False\n        self.max_length = max_length\n        self.pooling = pooling\n        if isinstance(pooling, str):\n            pooling = Pooling(dim=1, name=pooling)\n        self.pooling = pooling\n        self.featurizer = GraphormerEmbeddingsExtractor(\n            pretrained_name=self.name, max_nodes=self.max_length\n        )\n        self.featurizer.config.max_nodes = self.max_length\n        self.version = version\n\n    def __repr__(self):\n        return \"{}(name={}, pooling={}, dtype={})\".format(\n            self.__class__.__name__,\n            _parse_to_evaluable_str(self.name),\n            _parse_to_evaluable_str(self.pooling.name),\n            _parse_to_evaluable_str(self.dtype),\n        )\n\n    @staticmethod\n    def list_available_models():\n\"\"\"List available graphormer model to use\"\"\"\n        return [\n            \"pcqm4mv1_graphormer_base\",  # PCQM4Mv1\n            \"pcqm4mv2_graphormer_base\",  # PCQM4Mv2\n            \"pcqm4mv1_graphormer_base_for_molhiv\",  # ogbg-molhiv\n            \"oc20is2re_graphormer3d_base\",  # Open Catalyst Challenge\n        ]\n\n    def _embed(self, inputs: List[str], **kwargs):\n\"\"\"Internal molecular embedding\n\n        Args:\n            smiles: input smiless\n        \"\"\"\n        with torch.no_grad():\n            x = self.featurizer.model(inputs)\n            x = self.pooling(x)\n        return x.numpy()\n\n    def __getstate__(self):\n\"\"\"Getting state to allow pickling\"\"\"\n        d = copy.deepcopy(self.__dict__)\n        d[\"precompute_cache\"] = None\n        d.pop(\"featurizer\", None)\n        return d\n\n    def __setstate__(self, d):\n\"\"\"Setting state during reloading pickling\"\"\"\n        self.__dict__.update(d)\n        self._update_params()\n\n    def compute_max_length(self, inputs: list):\n\"\"\"Compute maximum node number for the input list of molecules\n\n        Args:\n            inputs: input list of molecules\n        \"\"\"\n        dataset = GraphormerInferenceDataset(\n            inputs,\n            multi_hop_max_dist=self.featurizer.config.multi_hop_max_dist,\n            spatial_pos_max=self.featurizer.config.spatial_pos_max,\n        )\n        xs = [item.x.size(0) for item in dataset]\n        return max(xs)\n\n    def set_max_length(self, max_length: int):\n\"\"\"Set the maximum length for this featurizer\"\"\"\n        self.max_length = max_length\n        self._update_params()\n        self._preload()\n\n    def _convert(self, inputs: list, **kwargs):\n\"\"\"Convert molecules to the right format\n\n        Args:\n            inputs: inputs to preprocess\n\n        Returns:\n            processed: pre-processed input list\n        \"\"\"\n        inputs = super()._convert(inputs, **kwargs)\n        batch = self.featurizer._convert(inputs)\n        return batch\n\n    def _update_params(self):\n        super()._update_params()\n        self.featurizer = GraphormerEmbeddingsExtractor(\n            pretrained_name=self.name, max_nodes=self.max_length\n        )\n        self.featurizer.config.max_nodes = self.max_length\n</code></pre>"},{"location":"api/molfeat.trans.pretrained.graphormer.html#molfeat.trans.pretrained.graphormer.GraphormerTransformer.featurizer","title":"<code>featurizer = GraphormerEmbeddingsExtractor(pretrained_name=self.name, max_nodes=self.max_length)</code>  <code>instance-attribute</code>","text":""},{"location":"api/molfeat.trans.pretrained.graphormer.html#molfeat.trans.pretrained.graphormer.GraphormerTransformer.max_length","title":"<code>max_length = max_length</code>  <code>instance-attribute</code>","text":""},{"location":"api/molfeat.trans.pretrained.graphormer.html#molfeat.trans.pretrained.graphormer.GraphormerTransformer.name","title":"<code>name = kind</code>  <code>instance-attribute</code>","text":""},{"location":"api/molfeat.trans.pretrained.graphormer.html#molfeat.trans.pretrained.graphormer.GraphormerTransformer.pooling","title":"<code>pooling = pooling</code>  <code>instance-attribute</code>","text":""},{"location":"api/molfeat.trans.pretrained.graphormer.html#molfeat.trans.pretrained.graphormer.GraphormerTransformer.preload","title":"<code>preload = True</code>  <code>instance-attribute</code>","text":""},{"location":"api/molfeat.trans.pretrained.graphormer.html#molfeat.trans.pretrained.graphormer.GraphormerTransformer.version","title":"<code>version = version</code>  <code>instance-attribute</code>","text":""},{"location":"api/molfeat.trans.pretrained.graphormer.html#molfeat.trans.pretrained.graphormer.GraphormerTransformer.__getstate__","title":"<code>__getstate__()</code>","text":"<p>Getting state to allow pickling</p> Source code in <code>molfeat/trans/pretrained/graphormer.py</code> <pre><code>def __getstate__(self):\n\"\"\"Getting state to allow pickling\"\"\"\n    d = copy.deepcopy(self.__dict__)\n    d[\"precompute_cache\"] = None\n    d.pop(\"featurizer\", None)\n    return d\n</code></pre>"},{"location":"api/molfeat.trans.pretrained.graphormer.html#molfeat.trans.pretrained.graphormer.GraphormerTransformer.__init__","title":"<code>__init__(kind='pcqm4mv2_graphormer_base', dtype=np.float32, pooling='mean', max_length=None, version=None, **params)</code>","text":"Source code in <code>molfeat/trans/pretrained/graphormer.py</code> <pre><code>def __init__(\n    self,\n    kind: str = \"pcqm4mv2_graphormer_base\",\n    dtype: Callable = np.float32,\n    pooling: str = \"mean\",\n    max_length: Optional[int] = None,\n    version=None,\n    **params,\n):\n    super().__init__(dtype=dtype, pooling=pooling, **params)\n    if not requires.check(\"graphormer\"):\n        raise ValueError(\"`graphormer` is required to use this featurizer.\")\n\n    self.preload = True\n    self.name = kind\n    self._require_mols = False\n    self.max_length = max_length\n    self.pooling = pooling\n    if isinstance(pooling, str):\n        pooling = Pooling(dim=1, name=pooling)\n    self.pooling = pooling\n    self.featurizer = GraphormerEmbeddingsExtractor(\n        pretrained_name=self.name, max_nodes=self.max_length\n    )\n    self.featurizer.config.max_nodes = self.max_length\n    self.version = version\n</code></pre>"},{"location":"api/molfeat.trans.pretrained.graphormer.html#molfeat.trans.pretrained.graphormer.GraphormerTransformer.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>molfeat/trans/pretrained/graphormer.py</code> <pre><code>def __repr__(self):\n    return \"{}(name={}, pooling={}, dtype={})\".format(\n        self.__class__.__name__,\n        _parse_to_evaluable_str(self.name),\n        _parse_to_evaluable_str(self.pooling.name),\n        _parse_to_evaluable_str(self.dtype),\n    )\n</code></pre>"},{"location":"api/molfeat.trans.pretrained.graphormer.html#molfeat.trans.pretrained.graphormer.GraphormerTransformer.__setstate__","title":"<code>__setstate__(d)</code>","text":"<p>Setting state during reloading pickling</p> Source code in <code>molfeat/trans/pretrained/graphormer.py</code> <pre><code>def __setstate__(self, d):\n\"\"\"Setting state during reloading pickling\"\"\"\n    self.__dict__.update(d)\n    self._update_params()\n</code></pre>"},{"location":"api/molfeat.trans.pretrained.graphormer.html#molfeat.trans.pretrained.graphormer.GraphormerTransformer.compute_max_length","title":"<code>compute_max_length(inputs)</code>","text":"<p>Compute maximum node number for the input list of molecules</p> <p>Parameters:</p> Name Type Description Default <code>inputs</code> <code>list</code> <p>input list of molecules</p> required Source code in <code>molfeat/trans/pretrained/graphormer.py</code> <pre><code>def compute_max_length(self, inputs: list):\n\"\"\"Compute maximum node number for the input list of molecules\n\n    Args:\n        inputs: input list of molecules\n    \"\"\"\n    dataset = GraphormerInferenceDataset(\n        inputs,\n        multi_hop_max_dist=self.featurizer.config.multi_hop_max_dist,\n        spatial_pos_max=self.featurizer.config.spatial_pos_max,\n    )\n    xs = [item.x.size(0) for item in dataset]\n    return max(xs)\n</code></pre>"},{"location":"api/molfeat.trans.pretrained.graphormer.html#molfeat.trans.pretrained.graphormer.GraphormerTransformer.list_available_models","title":"<code>list_available_models()</code>  <code>staticmethod</code>","text":"<p>List available graphormer model to use</p> Source code in <code>molfeat/trans/pretrained/graphormer.py</code> <pre><code>@staticmethod\ndef list_available_models():\n\"\"\"List available graphormer model to use\"\"\"\n    return [\n        \"pcqm4mv1_graphormer_base\",  # PCQM4Mv1\n        \"pcqm4mv2_graphormer_base\",  # PCQM4Mv2\n        \"pcqm4mv1_graphormer_base_for_molhiv\",  # ogbg-molhiv\n        \"oc20is2re_graphormer3d_base\",  # Open Catalyst Challenge\n    ]\n</code></pre>"},{"location":"api/molfeat.trans.pretrained.graphormer.html#molfeat.trans.pretrained.graphormer.GraphormerTransformer.set_max_length","title":"<code>set_max_length(max_length)</code>","text":"<p>Set the maximum length for this featurizer</p> Source code in <code>molfeat/trans/pretrained/graphormer.py</code> <pre><code>def set_max_length(self, max_length: int):\n\"\"\"Set the maximum length for this featurizer\"\"\"\n    self.max_length = max_length\n    self._update_params()\n    self._preload()\n</code></pre>"},{"location":"api/molfeat.trans.pretrained.hf_transformers.html","title":"hugginface","text":""},{"location":"api/molfeat.trans.pretrained.hf_transformers.html#transformer-pretrained-models","title":"Transformer pretrained models","text":""},{"location":"api/molfeat.trans.pretrained.hf_transformers.html#huggingface-transformers","title":"HuggingFace Transformers","text":""},{"location":"api/molfeat.trans.pretrained.hf_transformers.html#molfeat.trans.pretrained.hf_transformers.HFExperiment","title":"<code>HFExperiment</code>  <code>dataclass</code>","text":"Source code in <code>molfeat/trans/pretrained/hf_transformers.py</code> <pre><code>@dataclass\nclass HFExperiment:\n    model: PreTrainedModel\n    tokenizer: Union[PreTrainedTokenizer, PreTrainedTokenizerFast]\n    notation: str = \"smiles\"\n\n    @classmethod\n    def save(cls, model: HFExperiment, path: str, clean_up: bool = False):\n\"\"\"Save a hugging face model to a specific path\n\n        Args:\n            model: model to save\n            path: path to the folder root where to save the model\n            clean_up: whether to clean up the local path after saving\n        \"\"\"\n        local_path = tempfile.mkdtemp()\n        # we can save both the tokenizer and the model to the same path\n        model.model.save_pretrained(local_path)\n        model.tokenizer.save_pretrained(local_path)\n        dm.fs.copy_dir(local_path, path, force=True, progress=True, leave_progress=False)\n        logger.info(f\"Model saved to {path}\")\n        # clean up now\n        if clean_up:\n            mapper = dm.fs.get_mapper(local_path)\n            mapper.fs.delete(local_path, recursive=True)\n        return path\n\n    @classmethod\n    def load(cls, path: str, model_class=None):\n\"\"\"Load a model from the given path\n        Args:\n            path: Path to the model to load\n            model_class: optional model class to provide if the model should be loaded with a specific class\n        \"\"\"\n        if not dm.fs.is_local_path(path):\n            local_path = tempfile.mkdtemp()\n            dm.fs.copy_dir(path, local_path, force=True, progress=True, leave_progress=False)\n        else:\n            local_path = path\n\n        if model_class is None:\n            model_config = AutoConfig.from_pretrained(local_path)\n            architectures = getattr(model_config, \"architectures\", [])\n            if len(architectures) &gt; 0:\n                model_class = MODEL_MAPPING._load_attr_from_module(\n                    model_config.model_type, architectures[0]\n                )\n            else:\n                model_class = AutoModel\n        model = model_class.from_pretrained(local_path)\n        tokenizer = AutoTokenizer.from_pretrained(local_path)\n        return cls(model, tokenizer)\n</code></pre>"},{"location":"api/molfeat.trans.pretrained.hf_transformers.html#molfeat.trans.pretrained.hf_transformers.HFExperiment.model","title":"<code>model: PreTrainedModel</code>  <code>class-attribute</code>","text":""},{"location":"api/molfeat.trans.pretrained.hf_transformers.html#molfeat.trans.pretrained.hf_transformers.HFExperiment.notation","title":"<code>notation: str = 'smiles'</code>  <code>class-attribute</code>","text":""},{"location":"api/molfeat.trans.pretrained.hf_transformers.html#molfeat.trans.pretrained.hf_transformers.HFExperiment.tokenizer","title":"<code>tokenizer: Union[PreTrainedTokenizer, PreTrainedTokenizerFast]</code>  <code>class-attribute</code>","text":""},{"location":"api/molfeat.trans.pretrained.hf_transformers.html#molfeat.trans.pretrained.hf_transformers.HFExperiment.load","title":"<code>load(path, model_class=None)</code>  <code>classmethod</code>","text":"<p>Load a model from the given path</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>Path to the model to load</p> required <code>model_class</code> <p>optional model class to provide if the model should be loaded with a specific class</p> <code>None</code> Source code in <code>molfeat/trans/pretrained/hf_transformers.py</code> <pre><code>@classmethod\ndef load(cls, path: str, model_class=None):\n\"\"\"Load a model from the given path\n    Args:\n        path: Path to the model to load\n        model_class: optional model class to provide if the model should be loaded with a specific class\n    \"\"\"\n    if not dm.fs.is_local_path(path):\n        local_path = tempfile.mkdtemp()\n        dm.fs.copy_dir(path, local_path, force=True, progress=True, leave_progress=False)\n    else:\n        local_path = path\n\n    if model_class is None:\n        model_config = AutoConfig.from_pretrained(local_path)\n        architectures = getattr(model_config, \"architectures\", [])\n        if len(architectures) &gt; 0:\n            model_class = MODEL_MAPPING._load_attr_from_module(\n                model_config.model_type, architectures[0]\n            )\n        else:\n            model_class = AutoModel\n    model = model_class.from_pretrained(local_path)\n    tokenizer = AutoTokenizer.from_pretrained(local_path)\n    return cls(model, tokenizer)\n</code></pre>"},{"location":"api/molfeat.trans.pretrained.hf_transformers.html#molfeat.trans.pretrained.hf_transformers.HFExperiment.save","title":"<code>save(model, path, clean_up=False)</code>  <code>classmethod</code>","text":"<p>Save a hugging face model to a specific path</p> <p>Parameters:</p> Name Type Description Default <code>model</code> <code>HFExperiment</code> <p>model to save</p> required <code>path</code> <code>str</code> <p>path to the folder root where to save the model</p> required <code>clean_up</code> <code>bool</code> <p>whether to clean up the local path after saving</p> <code>False</code> Source code in <code>molfeat/trans/pretrained/hf_transformers.py</code> <pre><code>@classmethod\ndef save(cls, model: HFExperiment, path: str, clean_up: bool = False):\n\"\"\"Save a hugging face model to a specific path\n\n    Args:\n        model: model to save\n        path: path to the folder root where to save the model\n        clean_up: whether to clean up the local path after saving\n    \"\"\"\n    local_path = tempfile.mkdtemp()\n    # we can save both the tokenizer and the model to the same path\n    model.model.save_pretrained(local_path)\n    model.tokenizer.save_pretrained(local_path)\n    dm.fs.copy_dir(local_path, path, force=True, progress=True, leave_progress=False)\n    logger.info(f\"Model saved to {path}\")\n    # clean up now\n    if clean_up:\n        mapper = dm.fs.get_mapper(local_path)\n        mapper.fs.delete(local_path, recursive=True)\n    return path\n</code></pre>"},{"location":"api/molfeat.trans.pretrained.hf_transformers.html#molfeat.trans.pretrained.hf_transformers.HFModel","title":"<code>HFModel</code>","text":"<p>         Bases: <code>PretrainedStoreModel</code></p> <p>Transformer model loading model loading</p> Source code in <code>molfeat/trans/pretrained/hf_transformers.py</code> <pre><code>class HFModel(PretrainedStoreModel):\n\"\"\"Transformer model loading model loading\"\"\"\n\n    def __init__(\n        self,\n        name: str,\n        cache_path: Optional[os.PathLike] = None,\n        store: Optional[ModelStore] = None,\n    ):\n\"\"\"Model loader initializer\n\n        Args:\n            name (str, optional): Name of the model for ada.\n            cache_path (os.PathLike, optional): Local cache path for faster loading. This is the cache_path parameter for ADA loading !\n            device: Torch device on which to run the `predictor` model.\n            loading_fn: Optional loading function for model loading\n        \"\"\"\n\n        super().__init__(name, cache_path=cache_path, store=store)\n        self._model = None\n\n    @classmethod\n    def _ensure_local(cls, object_path: Union[str, os.PathLike]):\n\"\"\"Make sure the input path is a local path otherwise download it\n\n        Args:\n            object_path: Path to the object\n\n        \"\"\"\n        if dm.fs.is_local_path(object_path):\n            return object_path\n        local_path = tempfile.mkdtemp()\n        if dm.fs.is_file(object_path):\n            local_path = os.path.join(local_path, os.path.basename(object_path))\n            dm.fs.copy_file(object_path, local_path)\n        else:\n            dm.fs.copy_dir(object_path, local_path)\n        return local_path\n\n    @classmethod\n    def from_pretrained(\n        cls,\n        model: Union[str, PreTrainedModel],\n        tokenizer: Union[str, PreTrainedTokenizer, PreTrainedTokenizerFast],\n        model_class=None,\n        model_name: Optional[str] = None,\n    ):\n\"\"\"Load model using huggingface pretrained model loader hook\n\n        Args:\n            model: Model to load. Can also be the name on the hub or the path to the model\n            tokenizer: Tokenizer to load. Can also be the name on the hub or the path to the tokenizer\n            model_class: optional model class to provide if the model should be loaded with a specific class\n            model_name: optional model name to give to this model.\n        \"\"\"\n\n        # load the model\n        if isinstance(model, PreTrainedModel):\n            model_obj = model\n        else:\n            if dm.fs.exists(model):\n                model = cls._ensure_local(model)\n            if model_class is None:\n                model_config = AutoConfig.from_pretrained(model)\n                architectures = getattr(model_config, \"architectures\", [])\n                if len(architectures) &gt; 0:\n                    model_class = MODEL_MAPPING._load_attr_from_module(\n                        model_config.model_type, architectures[0]\n                    )\n                else:\n                    model_class = AutoModel\n            model_obj = model_class.from_pretrained(model)\n\n        if isinstance(tokenizer, (PreTrainedTokenizer, PreTrainedTokenizerFast)):\n            tokenizer_obj = tokenizer\n        else:\n            if dm.fs.exists(tokenizer):\n                tokenizer = cls._ensure_local(tokenizer)\n            tokenizer_obj = AutoTokenizer.from_pretrained(tokenizer)\n        name = model_name or f\"hf_model_{uuid.uuid4().hex[:8]}\"\n        model = HFModel(name=name, store=ModelStore())\n        model._model = HFExperiment(model=model_obj, tokenizer=tokenizer_obj)\n        return model\n\n    @classmethod\n    def register_pretrained(\n        cls,\n        model: Union[str, PreTrainedModel],\n        tokenizer: Union[str, PreTrainedTokenizer, PreTrainedTokenizerFast],\n        model_card: ModelInfo,\n        model_class=None,\n    ):\n\"\"\"Register a pretrained huggingface model to the model store\n        Args:\n            model: Model to load. Can also be the name on the hub or the path to the model\n            tokenizer: Tokenizer to load. Can also be the name on the hub or the path to the tokenizer\n            model_class: optional model class to provide if the model should be loaded with a specific class\n            model_card: optional model card to provide for registering this model\n        \"\"\"\n        model = cls.from_pretrained(model, tokenizer, model_class, model_name=model_card.name)\n        model.store.register(model_card, model._model, save_fn=HFExperiment.save)\n        return model\n\n    def get_notation(self, default_notation: Optional[str] = None):\n\"\"\"Get the notation of the model\"\"\"\n        notation = default_notation\n        try:\n            modelcard = self.store.search(name=self.name)[0]\n            notation = modelcard.inputs\n        except Exception:\n            pass\n        return notation\n\n    def load(self):\n\"\"\"Load Transformer Pretrained featurizer model\"\"\"\n        if self._model is not None:\n            return self._model\n        download_output_dir = self._artifact_load(\n            name=self.name, download_path=self.cache_path, store=self.store\n        )\n        model_path = dm.fs.join(download_output_dir, self.store.MODEL_PATH_NAME)\n        model = HFExperiment.load(model_path)\n        return model\n</code></pre>"},{"location":"api/molfeat.trans.pretrained.hf_transformers.html#molfeat.trans.pretrained.hf_transformers.HFModel.__init__","title":"<code>__init__(name, cache_path=None, store=None)</code>","text":"<p>Model loader initializer</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of the model for ada.</p> required <code>cache_path</code> <code>os.PathLike</code> <p>Local cache path for faster loading. This is the cache_path parameter for ADA loading !</p> <code>None</code> <code>device</code> <p>Torch device on which to run the <code>predictor</code> model.</p> required <code>loading_fn</code> <p>Optional loading function for model loading</p> required Source code in <code>molfeat/trans/pretrained/hf_transformers.py</code> <pre><code>def __init__(\n    self,\n    name: str,\n    cache_path: Optional[os.PathLike] = None,\n    store: Optional[ModelStore] = None,\n):\n\"\"\"Model loader initializer\n\n    Args:\n        name (str, optional): Name of the model for ada.\n        cache_path (os.PathLike, optional): Local cache path for faster loading. This is the cache_path parameter for ADA loading !\n        device: Torch device on which to run the `predictor` model.\n        loading_fn: Optional loading function for model loading\n    \"\"\"\n\n    super().__init__(name, cache_path=cache_path, store=store)\n    self._model = None\n</code></pre>"},{"location":"api/molfeat.trans.pretrained.hf_transformers.html#molfeat.trans.pretrained.hf_transformers.HFModel.from_pretrained","title":"<code>from_pretrained(model, tokenizer, model_class=None, model_name=None)</code>  <code>classmethod</code>","text":"<p>Load model using huggingface pretrained model loader hook</p> <p>Parameters:</p> Name Type Description Default <code>model</code> <code>Union[str, PreTrainedModel]</code> <p>Model to load. Can also be the name on the hub or the path to the model</p> required <code>tokenizer</code> <code>Union[str, PreTrainedTokenizer, PreTrainedTokenizerFast]</code> <p>Tokenizer to load. Can also be the name on the hub or the path to the tokenizer</p> required <code>model_class</code> <p>optional model class to provide if the model should be loaded with a specific class</p> <code>None</code> <code>model_name</code> <code>Optional[str]</code> <p>optional model name to give to this model.</p> <code>None</code> Source code in <code>molfeat/trans/pretrained/hf_transformers.py</code> <pre><code>@classmethod\ndef from_pretrained(\n    cls,\n    model: Union[str, PreTrainedModel],\n    tokenizer: Union[str, PreTrainedTokenizer, PreTrainedTokenizerFast],\n    model_class=None,\n    model_name: Optional[str] = None,\n):\n\"\"\"Load model using huggingface pretrained model loader hook\n\n    Args:\n        model: Model to load. Can also be the name on the hub or the path to the model\n        tokenizer: Tokenizer to load. Can also be the name on the hub or the path to the tokenizer\n        model_class: optional model class to provide if the model should be loaded with a specific class\n        model_name: optional model name to give to this model.\n    \"\"\"\n\n    # load the model\n    if isinstance(model, PreTrainedModel):\n        model_obj = model\n    else:\n        if dm.fs.exists(model):\n            model = cls._ensure_local(model)\n        if model_class is None:\n            model_config = AutoConfig.from_pretrained(model)\n            architectures = getattr(model_config, \"architectures\", [])\n            if len(architectures) &gt; 0:\n                model_class = MODEL_MAPPING._load_attr_from_module(\n                    model_config.model_type, architectures[0]\n                )\n            else:\n                model_class = AutoModel\n        model_obj = model_class.from_pretrained(model)\n\n    if isinstance(tokenizer, (PreTrainedTokenizer, PreTrainedTokenizerFast)):\n        tokenizer_obj = tokenizer\n    else:\n        if dm.fs.exists(tokenizer):\n            tokenizer = cls._ensure_local(tokenizer)\n        tokenizer_obj = AutoTokenizer.from_pretrained(tokenizer)\n    name = model_name or f\"hf_model_{uuid.uuid4().hex[:8]}\"\n    model = HFModel(name=name, store=ModelStore())\n    model._model = HFExperiment(model=model_obj, tokenizer=tokenizer_obj)\n    return model\n</code></pre>"},{"location":"api/molfeat.trans.pretrained.hf_transformers.html#molfeat.trans.pretrained.hf_transformers.HFModel.get_notation","title":"<code>get_notation(default_notation=None)</code>","text":"<p>Get the notation of the model</p> Source code in <code>molfeat/trans/pretrained/hf_transformers.py</code> <pre><code>def get_notation(self, default_notation: Optional[str] = None):\n\"\"\"Get the notation of the model\"\"\"\n    notation = default_notation\n    try:\n        modelcard = self.store.search(name=self.name)[0]\n        notation = modelcard.inputs\n    except Exception:\n        pass\n    return notation\n</code></pre>"},{"location":"api/molfeat.trans.pretrained.hf_transformers.html#molfeat.trans.pretrained.hf_transformers.HFModel.load","title":"<code>load()</code>","text":"<p>Load Transformer Pretrained featurizer model</p> Source code in <code>molfeat/trans/pretrained/hf_transformers.py</code> <pre><code>def load(self):\n\"\"\"Load Transformer Pretrained featurizer model\"\"\"\n    if self._model is not None:\n        return self._model\n    download_output_dir = self._artifact_load(\n        name=self.name, download_path=self.cache_path, store=self.store\n    )\n    model_path = dm.fs.join(download_output_dir, self.store.MODEL_PATH_NAME)\n    model = HFExperiment.load(model_path)\n    return model\n</code></pre>"},{"location":"api/molfeat.trans.pretrained.hf_transformers.html#molfeat.trans.pretrained.hf_transformers.HFModel.register_pretrained","title":"<code>register_pretrained(model, tokenizer, model_card, model_class=None)</code>  <code>classmethod</code>","text":"<p>Register a pretrained huggingface model to the model store</p> <p>Parameters:</p> Name Type Description Default <code>model</code> <code>Union[str, PreTrainedModel]</code> <p>Model to load. Can also be the name on the hub or the path to the model</p> required <code>tokenizer</code> <code>Union[str, PreTrainedTokenizer, PreTrainedTokenizerFast]</code> <p>Tokenizer to load. Can also be the name on the hub or the path to the tokenizer</p> required <code>model_class</code> <p>optional model class to provide if the model should be loaded with a specific class</p> <code>None</code> <code>model_card</code> <code>ModelInfo</code> <p>optional model card to provide for registering this model</p> required Source code in <code>molfeat/trans/pretrained/hf_transformers.py</code> <pre><code>@classmethod\ndef register_pretrained(\n    cls,\n    model: Union[str, PreTrainedModel],\n    tokenizer: Union[str, PreTrainedTokenizer, PreTrainedTokenizerFast],\n    model_card: ModelInfo,\n    model_class=None,\n):\n\"\"\"Register a pretrained huggingface model to the model store\n    Args:\n        model: Model to load. Can also be the name on the hub or the path to the model\n        tokenizer: Tokenizer to load. Can also be the name on the hub or the path to the tokenizer\n        model_class: optional model class to provide if the model should be loaded with a specific class\n        model_card: optional model card to provide for registering this model\n    \"\"\"\n    model = cls.from_pretrained(model, tokenizer, model_class, model_name=model_card.name)\n    model.store.register(model_card, model._model, save_fn=HFExperiment.save)\n    return model\n</code></pre>"},{"location":"api/molfeat.trans.pretrained.hf_transformers.html#molfeat.trans.pretrained.hf_transformers.PretrainedHFTransformer","title":"<code>PretrainedHFTransformer</code>","text":"<p>         Bases: <code>PretrainedMolTransformer</code></p> <p>HuggingFace Transformer for feature extraction.</p> <p>Note</p> <p>For convenience and consistency, this featurizer only accepts as inputs smiles and molecules, then perform the internal conversion, based on the notation provided.</p> Source code in <code>molfeat/trans/pretrained/hf_transformers.py</code> <pre><code>class PretrainedHFTransformer(PretrainedMolTransformer):\n\"\"\"\n    HuggingFace Transformer for feature extraction.\n\n    !!! note\n        For convenience and consistency, this featurizer only accepts as inputs\n        smiles and molecules, then perform the internal conversion, based on the notation provided.\n    \"\"\"\n\n    NEEDS_RANDOM_SEED = [\"bert\", \"roberta\"]\n\n    def __init__(\n        self,\n        kind: Union[str, HFModel] = \"ChemBERTa-77M-MLM\",\n        notation: Optional[str] = \"none\",\n        pooling: str = \"mean\",\n        concat_layers: Union[List[int], int] = -1,\n        dtype=np.float32,\n        device=\"cpu\",\n        max_length: int = 128,\n        ignore_padding: bool = True,\n        preload: bool = False,\n        n_jobs: int = 0,\n        random_seed: Optional[int] = None,\n        **params,\n    ):\n\"\"\"\n        HuggingFace Transformer for featurizer extraction\n        The default behaviour of this feature extractor is to return the last hidden state of the encoder\n        similar to what is performed by the pipeline 'feature-extraction' in hugging face.\n\n        !!! warning\n            For bert models, the default pooling layers is a neural network. Therefore, do not use the default\n            Or provide a random seed for reproducibility (in this case pooling will act as random projection to the same manifold)\n\n        Args:\n            kind: name of the featurizer as available in the model store\n            notation: optional line notation to use. Only use if it cannot be found from the model card.\n            pooling: type of pooling to use. One of ['default', 'mean', 'max', 'sum']. The value \"default\" corresponds to the default litterature pooling for each model type.\n                See `molfeat.utils.pooler.get_default_hf_pooler` for more details.\n            concat_layers: Layer to concat to get the representation. By default the last hidden layer is returned.\n            dtype: Data type to output\n            device: Torch device on which to run the featurizer.\n            max_length: Maximum length of the input sequence to consider. Please update this for large sequences\n            ignore_padding: Whether to ignore padding in the representation (default: True) to avoid effect of batching\n            preload: Whether to preload the model into memory or not\n            n_jobs: number of jobs to use\n            random_seed: random seed to use for reproducibility whenever a DNN pooler is used (e.g bert/roberta)\n        \"\"\"\n\n        super().__init__(\n            dtype=dtype,\n            device=device,\n            n_jobs=n_jobs,\n            **params,\n        )\n        if concat_layers is None:\n            concat_layers = -1\n        if not isinstance(concat_layers, list):\n            concat_layers = [concat_layers]\n        self.concat_layers = concat_layers\n        self.max_length = max_length\n        self.ignore_padding = ignore_padding\n        self._require_mols = False\n        self.random_seed = random_seed\n        self.preload = preload\n        self.pooling = pooling\n        self._pooling_obj = None\n        if isinstance(kind, HFModel):\n            self.kind = kind.name\n            self.featurizer = kind\n        else:\n            self.kind = kind\n            self.featurizer = HFModel(name=self.kind)\n        self.notation = self.featurizer.get_notation(notation) or \"none\"\n        self.converter = SmilesConverter(self.notation)\n        if self.preload:\n            self._preload()\n\n    def _update_params(self):\n\"\"\"Update the parameters of this model\"\"\"\n        # pylint: disable=no-member\n        super()._update_params()\n\n        hf_model = HFModel(\n            name=self.kind,\n        )\n        self.featurizer = hf_model.load()\n        config = self.featurizer.model.config.to_dict()\n        self._pooling_obj = self._pooling_obj = (\n            get_default_hgf_pooler(self.pooling, config, random_seed=self.random_seed)\n            if self._pooling_obj is None\n            else self._pooling_obj\n        )\n\n    def _preload(self):\n\"\"\"Perform preloading of the model\"\"\"\n        super()._preload()\n        # we can be confident that the model has been loaded here\n        self.featurizer.max_length = self.max_length\n        config = self.featurizer.model.config.to_dict()\n        cur_tokenizer = self.featurizer.tokenizer\n        for special_token_id_name in [\n            \"pad_token_id\",\n            \"bos_token_id\",\n            \"eos_token_id\",\n            \"unk_token_id\",\n            \"sep_token_id\",\n            \"mask_token_id\",\n        ]:\n            token_id = getattr(cur_tokenizer, special_token_id_name)\n            if token_id is not None:\n                config[special_token_id_name] = token_id\n\n        self._pooling_obj = (\n            get_default_hgf_pooler(self.pooling, config, random_seed=self.random_seed)\n            if self._pooling_obj is None\n            else self._pooling_obj\n        )\n        # pooling layer is still none, that means we could not fetch it properly\n        if self._pooling_obj is None:\n            logger.warning(\n                \"Cannot confidently find the pooling layer and therefore will not apply pooling\"\n            )\n\n    def _convert(self, inputs: list, **kwargs):\n\"\"\"Convert the list of molecules to the right format for embedding\n\n        Args:\n            inputs: inputs to preprocess\n\n        Returns:\n            processed: pre-processed input list\n        \"\"\"\n        self._preload()\n\n        if isinstance(inputs, (str, dm.Mol)):\n            inputs = [inputs]\n\n        def _to_smiles(x):\n            return dm.to_smiles(x) if not isinstance(x, str) else x\n\n        if len(inputs) &gt; 1:\n            smiles = dm.utils.parallelized(\n                _to_smiles,\n                inputs,\n                n_jobs=self.n_jobs,\n                progress=len(inputs) &gt; 1,\n            )\n            inputs = dm.utils.parallelized(\n                self.converter.encode,\n                smiles,\n                n_jobs=self.n_jobs,\n                progress=len(smiles) &gt; 1,\n            )\n        else:\n            inputs = self.converter.encode(_to_smiles(inputs[0]))\n        # this check is necessary for some tokenizers\n        if isinstance(inputs, str):\n            inputs = [inputs]\n        encoded = self.featurizer.tokenizer(\n            list(inputs),\n            truncation=True,\n            padding=True,\n            max_length=self.max_length,\n            return_tensors=\"pt\",\n        )\n        return encoded\n\n    def _embed(self, inputs, **kwargs):\n\"\"\"\n        Perform embedding of inputs using the pretrained model\n\n        Args:\n            inputs: smiles or seqs\n            kwargs: any additional parameters\n        \"\"\"\n        self._preload()\n\n        attention_mask = inputs.get(\"attention_mask\", None)\n        if attention_mask is not None and self.ignore_padding:\n            attention_mask = attention_mask.unsqueeze(-1)  # B, S, 1\n        else:\n            attention_mask = None\n        with torch.no_grad():\n            out_dict = self.featurizer.model(output_hidden_states=True, **inputs)\n            hidden_state = out_dict[\"hidden_states\"]\n            emb_layers = []\n            for layer in self.concat_layers:\n                emb = hidden_state[layer].detach().cpu()  # B, S, D\n                emb = self._pooling_obj(\n                    emb,\n                    inputs[\"input_ids\"],\n                    mask=attention_mask,\n                    ignore_padding=self.ignore_padding,\n                )\n                emb_layers.append(emb)\n            emb = torch.cat(emb_layers, dim=1)\n        return emb.numpy()\n\n    def set_max_length(self, max_length: int):\n\"\"\"Set the maximum length for this featurizer\"\"\"\n        self.max_length = max_length\n        self._preload()\n</code></pre>"},{"location":"api/molfeat.trans.pretrained.hf_transformers.html#molfeat.trans.pretrained.hf_transformers.PretrainedHFTransformer.NEEDS_RANDOM_SEED","title":"<code>NEEDS_RANDOM_SEED = ['bert', 'roberta']</code>  <code>class-attribute</code>","text":""},{"location":"api/molfeat.trans.pretrained.hf_transformers.html#molfeat.trans.pretrained.hf_transformers.PretrainedHFTransformer.concat_layers","title":"<code>concat_layers = concat_layers</code>  <code>instance-attribute</code>","text":""},{"location":"api/molfeat.trans.pretrained.hf_transformers.html#molfeat.trans.pretrained.hf_transformers.PretrainedHFTransformer.converter","title":"<code>converter = SmilesConverter(self.notation)</code>  <code>instance-attribute</code>","text":""},{"location":"api/molfeat.trans.pretrained.hf_transformers.html#molfeat.trans.pretrained.hf_transformers.PretrainedHFTransformer.featurizer","title":"<code>featurizer = kind</code>  <code>instance-attribute</code>","text":""},{"location":"api/molfeat.trans.pretrained.hf_transformers.html#molfeat.trans.pretrained.hf_transformers.PretrainedHFTransformer.ignore_padding","title":"<code>ignore_padding = ignore_padding</code>  <code>instance-attribute</code>","text":""},{"location":"api/molfeat.trans.pretrained.hf_transformers.html#molfeat.trans.pretrained.hf_transformers.PretrainedHFTransformer.kind","title":"<code>kind = kind.name</code>  <code>instance-attribute</code>","text":""},{"location":"api/molfeat.trans.pretrained.hf_transformers.html#molfeat.trans.pretrained.hf_transformers.PretrainedHFTransformer.max_length","title":"<code>max_length = max_length</code>  <code>instance-attribute</code>","text":""},{"location":"api/molfeat.trans.pretrained.hf_transformers.html#molfeat.trans.pretrained.hf_transformers.PretrainedHFTransformer.notation","title":"<code>notation = self.featurizer.get_notation(notation) or 'none'</code>  <code>instance-attribute</code>","text":""},{"location":"api/molfeat.trans.pretrained.hf_transformers.html#molfeat.trans.pretrained.hf_transformers.PretrainedHFTransformer.pooling","title":"<code>pooling = pooling</code>  <code>instance-attribute</code>","text":""},{"location":"api/molfeat.trans.pretrained.hf_transformers.html#molfeat.trans.pretrained.hf_transformers.PretrainedHFTransformer.preload","title":"<code>preload = preload</code>  <code>instance-attribute</code>","text":""},{"location":"api/molfeat.trans.pretrained.hf_transformers.html#molfeat.trans.pretrained.hf_transformers.PretrainedHFTransformer.random_seed","title":"<code>random_seed = random_seed</code>  <code>instance-attribute</code>","text":""},{"location":"api/molfeat.trans.pretrained.hf_transformers.html#molfeat.trans.pretrained.hf_transformers.PretrainedHFTransformer.__init__","title":"<code>__init__(kind='ChemBERTa-77M-MLM', notation='none', pooling='mean', concat_layers=-1, dtype=np.float32, device='cpu', max_length=128, ignore_padding=True, preload=False, n_jobs=0, random_seed=None, **params)</code>","text":"<p>HuggingFace Transformer for featurizer extraction The default behaviour of this feature extractor is to return the last hidden state of the encoder similar to what is performed by the pipeline 'feature-extraction' in hugging face.</p> <p>Warning</p> <p>For bert models, the default pooling layers is a neural network. Therefore, do not use the default Or provide a random seed for reproducibility (in this case pooling will act as random projection to the same manifold)</p> <p>Parameters:</p> Name Type Description Default <code>kind</code> <code>Union[str, HFModel]</code> <p>name of the featurizer as available in the model store</p> <code>'ChemBERTa-77M-MLM'</code> <code>notation</code> <code>Optional[str]</code> <p>optional line notation to use. Only use if it cannot be found from the model card.</p> <code>'none'</code> <code>pooling</code> <code>str</code> <p>type of pooling to use. One of ['default', 'mean', 'max', 'sum']. The value \"default\" corresponds to the default litterature pooling for each model type. See <code>molfeat.utils.pooler.get_default_hf_pooler</code> for more details.</p> <code>'mean'</code> <code>concat_layers</code> <code>Union[List[int], int]</code> <p>Layer to concat to get the representation. By default the last hidden layer is returned.</p> <code>-1</code> <code>dtype</code> <p>Data type to output</p> <code>np.float32</code> <code>device</code> <p>Torch device on which to run the featurizer.</p> <code>'cpu'</code> <code>max_length</code> <code>int</code> <p>Maximum length of the input sequence to consider. Please update this for large sequences</p> <code>128</code> <code>ignore_padding</code> <code>bool</code> <p>Whether to ignore padding in the representation (default: True) to avoid effect of batching</p> <code>True</code> <code>preload</code> <code>bool</code> <p>Whether to preload the model into memory or not</p> <code>False</code> <code>n_jobs</code> <code>int</code> <p>number of jobs to use</p> <code>0</code> <code>random_seed</code> <code>Optional[int]</code> <p>random seed to use for reproducibility whenever a DNN pooler is used (e.g bert/roberta)</p> <code>None</code> Source code in <code>molfeat/trans/pretrained/hf_transformers.py</code> <pre><code>def __init__(\n    self,\n    kind: Union[str, HFModel] = \"ChemBERTa-77M-MLM\",\n    notation: Optional[str] = \"none\",\n    pooling: str = \"mean\",\n    concat_layers: Union[List[int], int] = -1,\n    dtype=np.float32,\n    device=\"cpu\",\n    max_length: int = 128,\n    ignore_padding: bool = True,\n    preload: bool = False,\n    n_jobs: int = 0,\n    random_seed: Optional[int] = None,\n    **params,\n):\n\"\"\"\n    HuggingFace Transformer for featurizer extraction\n    The default behaviour of this feature extractor is to return the last hidden state of the encoder\n    similar to what is performed by the pipeline 'feature-extraction' in hugging face.\n\n    !!! warning\n        For bert models, the default pooling layers is a neural network. Therefore, do not use the default\n        Or provide a random seed for reproducibility (in this case pooling will act as random projection to the same manifold)\n\n    Args:\n        kind: name of the featurizer as available in the model store\n        notation: optional line notation to use. Only use if it cannot be found from the model card.\n        pooling: type of pooling to use. One of ['default', 'mean', 'max', 'sum']. The value \"default\" corresponds to the default litterature pooling for each model type.\n            See `molfeat.utils.pooler.get_default_hf_pooler` for more details.\n        concat_layers: Layer to concat to get the representation. By default the last hidden layer is returned.\n        dtype: Data type to output\n        device: Torch device on which to run the featurizer.\n        max_length: Maximum length of the input sequence to consider. Please update this for large sequences\n        ignore_padding: Whether to ignore padding in the representation (default: True) to avoid effect of batching\n        preload: Whether to preload the model into memory or not\n        n_jobs: number of jobs to use\n        random_seed: random seed to use for reproducibility whenever a DNN pooler is used (e.g bert/roberta)\n    \"\"\"\n\n    super().__init__(\n        dtype=dtype,\n        device=device,\n        n_jobs=n_jobs,\n        **params,\n    )\n    if concat_layers is None:\n        concat_layers = -1\n    if not isinstance(concat_layers, list):\n        concat_layers = [concat_layers]\n    self.concat_layers = concat_layers\n    self.max_length = max_length\n    self.ignore_padding = ignore_padding\n    self._require_mols = False\n    self.random_seed = random_seed\n    self.preload = preload\n    self.pooling = pooling\n    self._pooling_obj = None\n    if isinstance(kind, HFModel):\n        self.kind = kind.name\n        self.featurizer = kind\n    else:\n        self.kind = kind\n        self.featurizer = HFModel(name=self.kind)\n    self.notation = self.featurizer.get_notation(notation) or \"none\"\n    self.converter = SmilesConverter(self.notation)\n    if self.preload:\n        self._preload()\n</code></pre>"},{"location":"api/molfeat.trans.pretrained.hf_transformers.html#molfeat.trans.pretrained.hf_transformers.PretrainedHFTransformer.set_max_length","title":"<code>set_max_length(max_length)</code>","text":"<p>Set the maximum length for this featurizer</p> Source code in <code>molfeat/trans/pretrained/hf_transformers.py</code> <pre><code>def set_max_length(self, max_length: int):\n\"\"\"Set the maximum length for this featurizer\"\"\"\n    self.max_length = max_length\n    self._preload()\n</code></pre>"},{"location":"api/molfeat.trans.struct.html","title":"molfeat.trans.struct","text":""},{"location":"api/molfeat.trans.struct.html#esm","title":"ESM","text":""},{"location":"api/molfeat.trans.struct.html#molfeat.trans.struct.esm.ESMProteinFingerprint","title":"<code>ESMProteinFingerprint</code>","text":"<p>         Bases: <code>MoleculeTransformer</code></p> <p>ESM (Evolutionary Scale Modeling) protein representation embedding. ESM is a transformer protein language model introduced by Facebook FAIR in Rives et al., 2019: 'Biological structure and function emerge from scaling unsupervised learning to 250 million protein sequences'</p> Source code in <code>molfeat/trans/struct/esm.py</code> <pre><code>class ESMProteinFingerprint(MoleculeTransformer):\n\"\"\"\n    ESM (Evolutionary Scale Modeling) protein representation embedding.\n    ESM is a transformer protein language model introduced by Facebook FAIR in Rives et al., 2019:\n    'Biological structure and function emerge from scaling unsupervised learning to 250 million protein sequences'\n    \"\"\"\n\n    def __init__(\n        self,\n        featurizer: str = \"esm1b_t33_650M_UR50S\",\n        loader_repo_or_dir: str = \"facebookresearch/esm:main\",\n        device: Optional[str] = None,\n        layers: List[int] = None,\n        pooling: str = \"mean\",\n        dtype: Callable = None,\n        contact: bool = False,\n        **kwargs,\n    ):\n\"\"\"Constructor for ESM protein representation\n\n        Args:\n            featurizer: Name of the ESM model to use. Defaults to \"esm1b_t33_650M_UR50S\".\n            loader_repo_or_dir: Path to local dir containing the model or to a github repo. Default to \"facebookresearch/esm:main\n            device: Torch device to move the model to. Defaults to None.\n            layers: Layers to use to extract information. Defaults to None, which is the last layers.\n            pooling: Pooling method to use for sequence embedding. Defaults to \"mean\".\n                If you set pooling to None, token representation will be returned (excluding BOS)\n            dtype: Representation output datatype. Defaults to None.\n            contact: Whether to return the predictied attention contact instead of the representation. Defaults to False.\n        \"\"\"\n        self._model_name = featurizer\n        self.device = device\n        self.dtype = dtype\n        self.featurizer = None\n        self.alphabet = None\n        self.batch_converter = None\n        self._fitted = True\n        self.cols_to_keep = None\n        self.repr_layers = layers\n        self.repo_or_dir = loader_repo_or_dir\n        self.contact = contact\n        max_layer_pattern = re.compile(\".*_t([0-9]+)_.*\")\n        self._max_layers = int(max_layer_pattern.match(featurizer).group(1))\n        if layers is None:\n            self.repr_layers = [self._max_layers]\n        if any(l &gt; self._max_layers for l in self.repr_layers):\n            raise ValueError(\n                \"You are requesting more layers than available for this pretrained model\"\n            )\n        self._representation = \"seq\"\n        self.pooling = Pooling(dim=0, name=pooling)\n        if pooling is None:\n            self._representation = \"token\"\n        self._feat_length = None\n        self._load_model()\n\n    def _load_model(self):\n\"\"\"Load model internally\"\"\"\n        self.featurizer, self.alphabet = torch.hub.load(self.repo_or_dir, self._model_name)  # type: ignore\n        self.batch_converter = self.alphabet.get_batch_converter()\n        if self.device is not None:\n            self.featurizer = self.featurizer.to(self.device)\n        self.featurizer.eval()\n\n    def __len__(self):\n\"\"\"Get featurizer length\"\"\"\n        if self._feat_length is None and not self.contact:\n            embds = self._transform(\"MMMM\")\n            self._feat_length = embds.shape[-1]\n        return self._feat_length\n\n    @property\n    def n_layers(self):\n\"\"\"Number of layers used in the current embeddings\"\"\"\n        return len(self.repr_layers)\n\n    @torch.no_grad()\n    def _embed(self, prot_seqs: List[str], prot_names: Optional[List[str]] = None, **kwargs):\nr\"\"\"\n        Compute features for a single molecule.\n        This method would potentially need to be reimplemented by child classes\n\n        Args:\n           prot_seqs: protein sequences as a sequence of amino acids\n           prot_names: protein names\n\n        Returns\n            feat: list of N_SEQ representation, each of size (SEQ_LEN, FEAT_DIM * N_LAYERS) for token embeddings\n                and (FEAT_DIM * N_LAYERS) for sequence embeddings. Note that SEQ_LEN will include the stop token.\n\n        \"\"\"\n        if isinstance(prot_seqs, str):\n            prot_seqs = [prot_seqs]\n        if prot_names is None:\n            prot_names = [\"protein_{i}\" for i in range(len(prot_seqs))]\n        if isinstance(prot_names, str):\n            prot_names = [prot_names]\n        if len(prot_seqs) != len(prot_names):\n            raise ValueError(\"Must provide the same number of protein sequence and label\")\n        data = list(zip(prot_names, prot_seqs))\n        *_, batch_tokens = self.batch_converter(data)\n        if self.device is not None:\n            batch_tokens = batch_tokens.to(self.device)\n\n        results = self.featurizer(\n            batch_tokens, repr_layers=self.repr_layers, return_contacts=self.contact\n        )\n        embeddings = []\n        if self.contact:\n            for _, (seq, att_concats) in enumerate(zip(prot_seqs, results[\"contacts\"])):\n                embeddings.append(att_concats[: len(seq), : len(seq)])\n        else:\n            representation = torch.stack(\n                [results[\"representations\"][x] for x in self.repr_layers], dim=-1\n            )\n            if self._representation.startswith(\"seq\"):\n                for seq, token_rep in zip(prot_seqs, representation):\n                    embeddings.append(\n                        self.pooling(token_rep[1 : len(seq) + 1]).view(1, -1).squeeze(0)\n                    )\n            else:\n                embeddings = list(\n                    representation.view(representation.shape[0], representation.shape[1], -1)\n                )\n        return embeddings\n\n    def __repr__(self):\n        return \"{}(model={}, pooling={}, dtype={})\".format(\n            self.__class__.__name__,\n            _parse_to_evaluable_str(self._model_name),\n            _parse_to_evaluable_str(self.pooling.name),\n            _parse_to_evaluable_str(self.dtype),\n        )\n\n    def _transform(self, protein_seq: str, protein_name: str = None):\n\"\"\"\n        Transform a protein sequence into a feature vector.\n\n        Args:\n            protein: protein sequence as amino acid sequences\n            protein_name: protein name\n\n        Returns:\n            Embedding of size (SEQ_LEN, FEAT_DIM, N_LAYERS) for token embeddings\n                and (FEAT_DIM * N_LAYERS) for sequence embeddings\n        \"\"\"\n        return self._embed(protein_seq, protein_name)[0]\n\n    def transform(self, seqs: List[str], names: Optional[List[str]] = None, **kwargs):\n\"\"\"\n        Transform a list of protein sequence into a feature vector.\n\n        Args:\n            seqs: list of protein sequence as amino acids\n            names: protein names\n\n        Returns:\n            Embedding of size (N_SEQS, SEQ_LEN, FEAT_DIM * N_LAYERS) for token embeddings\n                and (N_SEQS, FEAT_DIM * N_LAYERS) for sequence embeddings. Use\n        \"\"\"\n        if (\n            names is None\n            and isinstance(seqs, list)\n            and isinstance(seqs[0], list)\n            and len(seqs[0]) == 2\n        ):\n            names, seqs = zip(*seqs)\n            seqs = list(seqs)\n            names = list(names)\n        return self._embed(seqs, names)\n\n    def __call__(\n        self,\n        seqs: List[str],\n        names: Optional[List[str]] = None,\n        ignore_errors: bool = False,\n        enforce_dtype: bool = True,\n        **kwargs,\n    ):\nr\"\"\"\n        Compute molecular representation of a protein sequence.\n        If ignore_error is True, a list of features and valid ids are returned.\n\n        Args:\n            seqs: list of protein sequence as amino acids\n            names: protein names\n            enforce_dtype: whether to enforce the instance dtype in the generated fingerprint\n            ignore_errors: Whether to ignore errors during featurization or raise an error.\n            kwargs: Named parameters for the transform method\n\n        Returns:\n            feats: list of valid embeddings\n            ids: all valid positions that did not failed during featurization.\n                Only returned when ignore_errors is True.\n\n        \"\"\"\n        features = self.transform(seqs, names, ignore_errors=ignore_errors, **kwargs)\n        ids = np.arange(len(features))\n        if ignore_errors:\n            features, ids = self._filter_none(features)\n        if self.dtype is not None and enforce_dtype:\n            if self.contact or not self._representation.startswith(\"seq\"):\n                features = [\n                    datatype.cast(feat, dtype=self.dtype, columns=self.columns) for feat in features\n                ]\n            else:\n                features = datatype.cast(features, dtype=self.dtype, columns=self.columns)\n        if not ignore_errors:\n            return features\n        return features, ids\n</code></pre>"},{"location":"api/molfeat.trans.struct.html#molfeat.trans.struct.esm.ESMProteinFingerprint.alphabet","title":"<code>alphabet = None</code>  <code>instance-attribute</code>","text":""},{"location":"api/molfeat.trans.struct.html#molfeat.trans.struct.esm.ESMProteinFingerprint.batch_converter","title":"<code>batch_converter = None</code>  <code>instance-attribute</code>","text":""},{"location":"api/molfeat.trans.struct.html#molfeat.trans.struct.esm.ESMProteinFingerprint.cols_to_keep","title":"<code>cols_to_keep = None</code>  <code>instance-attribute</code>","text":""},{"location":"api/molfeat.trans.struct.html#molfeat.trans.struct.esm.ESMProteinFingerprint.contact","title":"<code>contact = contact</code>  <code>instance-attribute</code>","text":""},{"location":"api/molfeat.trans.struct.html#molfeat.trans.struct.esm.ESMProteinFingerprint.device","title":"<code>device = device</code>  <code>instance-attribute</code>","text":""},{"location":"api/molfeat.trans.struct.html#molfeat.trans.struct.esm.ESMProteinFingerprint.dtype","title":"<code>dtype = dtype</code>  <code>instance-attribute</code>","text":""},{"location":"api/molfeat.trans.struct.html#molfeat.trans.struct.esm.ESMProteinFingerprint.featurizer","title":"<code>featurizer = None</code>  <code>instance-attribute</code>","text":""},{"location":"api/molfeat.trans.struct.html#molfeat.trans.struct.esm.ESMProteinFingerprint.n_layers","title":"<code>n_layers</code>  <code>property</code>","text":"<p>Number of layers used in the current embeddings</p>"},{"location":"api/molfeat.trans.struct.html#molfeat.trans.struct.esm.ESMProteinFingerprint.pooling","title":"<code>pooling = Pooling(dim=0, name=pooling)</code>  <code>instance-attribute</code>","text":""},{"location":"api/molfeat.trans.struct.html#molfeat.trans.struct.esm.ESMProteinFingerprint.repo_or_dir","title":"<code>repo_or_dir = loader_repo_or_dir</code>  <code>instance-attribute</code>","text":""},{"location":"api/molfeat.trans.struct.html#molfeat.trans.struct.esm.ESMProteinFingerprint.repr_layers","title":"<code>repr_layers = layers</code>  <code>instance-attribute</code>","text":""},{"location":"api/molfeat.trans.struct.html#molfeat.trans.struct.esm.ESMProteinFingerprint.__call__","title":"<code>__call__(seqs, names=None, ignore_errors=False, enforce_dtype=True, **kwargs)</code>","text":"<p>Compute molecular representation of a protein sequence. If ignore_error is True, a list of features and valid ids are returned.</p> <p>Parameters:</p> Name Type Description Default <code>seqs</code> <code>List[str]</code> <p>list of protein sequence as amino acids</p> required <code>names</code> <code>Optional[List[str]]</code> <p>protein names</p> <code>None</code> <code>enforce_dtype</code> <code>bool</code> <p>whether to enforce the instance dtype in the generated fingerprint</p> <code>True</code> <code>ignore_errors</code> <code>bool</code> <p>Whether to ignore errors during featurization or raise an error.</p> <code>False</code> <code>kwargs</code> <p>Named parameters for the transform method</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>feats</code> <p>list of valid embeddings</p> <code>ids</code> <p>all valid positions that did not failed during featurization. Only returned when ignore_errors is True.</p> Source code in <code>molfeat/trans/struct/esm.py</code> <pre><code>def __call__(\n    self,\n    seqs: List[str],\n    names: Optional[List[str]] = None,\n    ignore_errors: bool = False,\n    enforce_dtype: bool = True,\n    **kwargs,\n):\nr\"\"\"\n    Compute molecular representation of a protein sequence.\n    If ignore_error is True, a list of features and valid ids are returned.\n\n    Args:\n        seqs: list of protein sequence as amino acids\n        names: protein names\n        enforce_dtype: whether to enforce the instance dtype in the generated fingerprint\n        ignore_errors: Whether to ignore errors during featurization or raise an error.\n        kwargs: Named parameters for the transform method\n\n    Returns:\n        feats: list of valid embeddings\n        ids: all valid positions that did not failed during featurization.\n            Only returned when ignore_errors is True.\n\n    \"\"\"\n    features = self.transform(seqs, names, ignore_errors=ignore_errors, **kwargs)\n    ids = np.arange(len(features))\n    if ignore_errors:\n        features, ids = self._filter_none(features)\n    if self.dtype is not None and enforce_dtype:\n        if self.contact or not self._representation.startswith(\"seq\"):\n            features = [\n                datatype.cast(feat, dtype=self.dtype, columns=self.columns) for feat in features\n            ]\n        else:\n            features = datatype.cast(features, dtype=self.dtype, columns=self.columns)\n    if not ignore_errors:\n        return features\n    return features, ids\n</code></pre>"},{"location":"api/molfeat.trans.struct.html#molfeat.trans.struct.esm.ESMProteinFingerprint.__init__","title":"<code>__init__(featurizer='esm1b_t33_650M_UR50S', loader_repo_or_dir='facebookresearch/esm:main', device=None, layers=None, pooling='mean', dtype=None, contact=False, **kwargs)</code>","text":"<p>Constructor for ESM protein representation</p> <p>Parameters:</p> Name Type Description Default <code>featurizer</code> <code>str</code> <p>Name of the ESM model to use. Defaults to \"esm1b_t33_650M_UR50S\".</p> <code>'esm1b_t33_650M_UR50S'</code> <code>loader_repo_or_dir</code> <code>str</code> <p>Path to local dir containing the model or to a github repo. Default to \"facebookresearch/esm:main</p> <code>'facebookresearch/esm:main'</code> <code>device</code> <code>Optional[str]</code> <p>Torch device to move the model to. Defaults to None.</p> <code>None</code> <code>layers</code> <code>List[int]</code> <p>Layers to use to extract information. Defaults to None, which is the last layers.</p> <code>None</code> <code>pooling</code> <code>str</code> <p>Pooling method to use for sequence embedding. Defaults to \"mean\". If you set pooling to None, token representation will be returned (excluding BOS)</p> <code>'mean'</code> <code>dtype</code> <code>Callable</code> <p>Representation output datatype. Defaults to None.</p> <code>None</code> <code>contact</code> <code>bool</code> <p>Whether to return the predictied attention contact instead of the representation. Defaults to False.</p> <code>False</code> Source code in <code>molfeat/trans/struct/esm.py</code> <pre><code>def __init__(\n    self,\n    featurizer: str = \"esm1b_t33_650M_UR50S\",\n    loader_repo_or_dir: str = \"facebookresearch/esm:main\",\n    device: Optional[str] = None,\n    layers: List[int] = None,\n    pooling: str = \"mean\",\n    dtype: Callable = None,\n    contact: bool = False,\n    **kwargs,\n):\n\"\"\"Constructor for ESM protein representation\n\n    Args:\n        featurizer: Name of the ESM model to use. Defaults to \"esm1b_t33_650M_UR50S\".\n        loader_repo_or_dir: Path to local dir containing the model or to a github repo. Default to \"facebookresearch/esm:main\n        device: Torch device to move the model to. Defaults to None.\n        layers: Layers to use to extract information. Defaults to None, which is the last layers.\n        pooling: Pooling method to use for sequence embedding. Defaults to \"mean\".\n            If you set pooling to None, token representation will be returned (excluding BOS)\n        dtype: Representation output datatype. Defaults to None.\n        contact: Whether to return the predictied attention contact instead of the representation. Defaults to False.\n    \"\"\"\n    self._model_name = featurizer\n    self.device = device\n    self.dtype = dtype\n    self.featurizer = None\n    self.alphabet = None\n    self.batch_converter = None\n    self._fitted = True\n    self.cols_to_keep = None\n    self.repr_layers = layers\n    self.repo_or_dir = loader_repo_or_dir\n    self.contact = contact\n    max_layer_pattern = re.compile(\".*_t([0-9]+)_.*\")\n    self._max_layers = int(max_layer_pattern.match(featurizer).group(1))\n    if layers is None:\n        self.repr_layers = [self._max_layers]\n    if any(l &gt; self._max_layers for l in self.repr_layers):\n        raise ValueError(\n            \"You are requesting more layers than available for this pretrained model\"\n        )\n    self._representation = \"seq\"\n    self.pooling = Pooling(dim=0, name=pooling)\n    if pooling is None:\n        self._representation = \"token\"\n    self._feat_length = None\n    self._load_model()\n</code></pre>"},{"location":"api/molfeat.trans.struct.html#molfeat.trans.struct.esm.ESMProteinFingerprint.__len__","title":"<code>__len__()</code>","text":"<p>Get featurizer length</p> Source code in <code>molfeat/trans/struct/esm.py</code> <pre><code>def __len__(self):\n\"\"\"Get featurizer length\"\"\"\n    if self._feat_length is None and not self.contact:\n        embds = self._transform(\"MMMM\")\n        self._feat_length = embds.shape[-1]\n    return self._feat_length\n</code></pre>"},{"location":"api/molfeat.trans.struct.html#molfeat.trans.struct.esm.ESMProteinFingerprint.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>molfeat/trans/struct/esm.py</code> <pre><code>def __repr__(self):\n    return \"{}(model={}, pooling={}, dtype={})\".format(\n        self.__class__.__name__,\n        _parse_to_evaluable_str(self._model_name),\n        _parse_to_evaluable_str(self.pooling.name),\n        _parse_to_evaluable_str(self.dtype),\n    )\n</code></pre>"},{"location":"api/molfeat.trans.struct.html#molfeat.trans.struct.esm.ESMProteinFingerprint.transform","title":"<code>transform(seqs, names=None, **kwargs)</code>","text":"<p>Transform a list of protein sequence into a feature vector.</p> <p>Parameters:</p> Name Type Description Default <code>seqs</code> <code>List[str]</code> <p>list of protein sequence as amino acids</p> required <code>names</code> <code>Optional[List[str]]</code> <p>protein names</p> <code>None</code> <p>Returns:</p> Type Description <p>Embedding of size (N_SEQS, SEQ_LEN, FEAT_DIM * N_LAYERS) for token embeddings and (N_SEQS, FEAT_DIM * N_LAYERS) for sequence embeddings. Use</p> Source code in <code>molfeat/trans/struct/esm.py</code> <pre><code>def transform(self, seqs: List[str], names: Optional[List[str]] = None, **kwargs):\n\"\"\"\n    Transform a list of protein sequence into a feature vector.\n\n    Args:\n        seqs: list of protein sequence as amino acids\n        names: protein names\n\n    Returns:\n        Embedding of size (N_SEQS, SEQ_LEN, FEAT_DIM * N_LAYERS) for token embeddings\n            and (N_SEQS, FEAT_DIM * N_LAYERS) for sequence embeddings. Use\n    \"\"\"\n    if (\n        names is None\n        and isinstance(seqs, list)\n        and isinstance(seqs[0], list)\n        and len(seqs[0]) == 2\n    ):\n        names, seqs = zip(*seqs)\n        seqs = list(seqs)\n        names = list(names)\n    return self._embed(seqs, names)\n</code></pre>"},{"location":"api/molfeat.trans.struct.html#bio-embeddings","title":"Bio Embeddings","text":""},{"location":"api/molfeat.trans.struct.html#molfeat.trans.struct.prot1D.ProtBioFingerprint","title":"<code>ProtBioFingerprint</code>","text":"<p>         Bases: <code>MoleculeTransformer</code></p> <p>Wrapper for general purpose biological sequence representations, as provided by <code>bio_embeddings</code></p> <p>For a list of available embeddings, see: https://docs.bioembeddings.com/v0.2.2/api/bio_embeddings.embed.html</p> <p>!!! note:     The embeddings proposed here are the general purpose embeddings, meaning that task-specific     embeddings offered by <code>bio_embeddings</code> (e.g PBTucker, DeepBlast) are not included.</p> <pre><code>According to the bio_embeddings documentation, `prottrans_bert_bfd` and `seqvec` are the best embeddings.\n</code></pre> Source code in <code>molfeat/trans/struct/prot1D.py</code> <pre><code>class ProtBioFingerprint(MoleculeTransformer):\n\"\"\"\n    Wrapper for general purpose biological sequence representations, as provided by [`bio_embeddings`](https://github.com/sacdallago/bio_embeddings)\n\n    For a list of available embeddings, see: https://docs.bioembeddings.com/v0.2.2/api/bio_embeddings.embed.html\n\n    !!! note:\n        The embeddings proposed here are the general purpose embeddings, meaning that task-specific\n        embeddings offered by `bio_embeddings` (e.g PBTucker, DeepBlast) are not included.\n\n        According to the bio_embeddings documentation, `prottrans_bert_bfd` and `seqvec` are the best embeddings.\n    \"\"\"\n\n    SUPPORTED_EMBEDDINGS = [\n        \"bepler\",\n        \"cpcprot\",\n        \"esm\",\n        \"esm1b\",\n        \"esm1v\",\n        \"fasttext\",\n        \"glove\",\n        \"one_hot_encoding\",\n        \"plus_rnn\",\n        \"prottrans_albert_bfd\",\n        \"prottrans_bert_bfd\",\n        \"prottrans_t5_bfd\",\n        \"prottrans_t5_uniref50\",\n        \"prottrans_t5_xl_u50\",\n        \"prottrans_xlnet_uniref100\",\n        \"seqvec\",\n        \"unirep\",\n        \"word2vec\",\n    ]\n\n    def __init__(\n        self,\n        featurizer: Union[str, Callable] = \"seqvec\",\n        pooling: str = \"mean\",\n        dtype: Callable = np.float32,\n        device: Optional[Union[torch.device, str]] = None,\n        layer_pooling: str = \"sum\",\n        **kwargs,\n    ):\n\"\"\"Constructor for Deep Learning based Protein representation.\n        SeqVec featurizer will e\n\n        Args:\n            featurizer: Name of callable of the embedding model\n            pooling: Pooling method to use for sequence embedding. Defaults to \"mean\".\n                If you set pooling to None, token representation will be returned\n            dtype: Representation output datatype. Defaults to None.\n            device: Torch device to move the model to. Defaults to None.\n            layer_pooling: Layer-wise pooling method to use when &gt; 1 layer exists. Default to 'sum'.\n                If None, last layers is taken. This is relevant for `seqvec` mostly\n        \"\"\"\n        if not requires.check(\"bio_embeddings\"):\n            raise ValueError(\n                \"Cannot use this featurizer without bio_embeddings (pip install 'bio_embeddings[all]').\"\n            )\n\n        if isinstance(featurizer, bio_embedder.EmbedderInterface):\n            featurizer = featurizer\n            self._model_name = self.featurizer.name\n        else:\n            if (\n                not isinstance(featurizer, str)\n                or featurizer.lower() not in self.SUPPORTED_EMBEDDINGS\n            ):\n                raise ValueError(\"Unknown featurizer: {}\".format(featurizer))\n            self._model_name = featurizer.lower()\n            featurizer = bio_embedder.name_to_embedder[self._model_name](device=device, **kwargs)\n\n        super().__init__(featurizer=featurizer, dtype=dtype, **kwargs)\n        self._fitted = True\n        self._representation = \"seq\"\n        self.pooling = Pooling(dim=0, name=pooling)\n        self.layer_pooling = Pooling(dim=0, name=layer_pooling)\n        if pooling is None:\n            self._representation = \"token\"\n        self._feat_length = None\n\n    def __len__(self):\n\"\"\"Get featurizer length\"\"\"\n        return self.featurizer.embedding_dimension\n\n    @property\n    def n_layers(self):\n\"\"\"Get the number of layers used in this embedding\"\"\"\n        return self.featurizer.number_of_layers\n\n    def __repr__(self):\n        return \"{}(model={}, pooling={}, dtype={})\".format(\n            self.__class__.__name__,\n            _parse_to_evaluable_str(self._model_name),\n            _parse_to_evaluable_str(self.pooling.name),\n            _parse_to_evaluable_str(self.dtype),\n        )\n\n    def _pool(self, embedding: list):\n\"\"\"Perform embedding pooling\n        Args:\n            embedding: input embedding\n        \"\"\"\n        if self.n_layers &gt; 1 and self.layer_pooling.name is not None:\n            embedding = self.layer_pooling(embedding)\n        if len(embedding.shape) &gt; 2:\n            # we forcefully take the last layers\n            embedding = embedding[-1]\n        return self.pooling(embedding)\n\n    def _transform(\n        self,\n        protein_seq: str,\n        **kwargs,\n    ):\n\"\"\"\n        Transform a protein/nucleotide sequence into a feature vector.\n\n        Args:\n            protein: protein sequence as amino acid sequences\n\n        Returns:\n            Embedding of size (FEAT_DIM, N_LAYERS) for token embeddings\n                and (FEAT_DIM, N_LAYERS) for sequence embeddings\n        \"\"\"\n\n        rep = self.featurizer.embed(protein_seq)\n        return self._pool(rep)\n\n    def transform(self, seqs: List[str], names: Optional[List[str]] = None, **kwargs):\n\"\"\"\n        Transform a list of protein/nucleotide sequence into a feature vector.\n\n        Args:\n            seqs: list of protein/nucleotide sequence as amino acids\n            names: names of the macromolecules.  Will be ignored\n            kwargs: additional arguments for the featurizer\n\n        Returns:\n            Embedding of size (N_SEQS, FEAT_DIM) for token embeddings\n                and (FEAT_DIM, N_LAYERS) for sequence embeddings\n        \"\"\"\n        if not isinstance(seqs, list):\n            seqs = [seqs]\n        if isinstance(seqs[0], (list, tuple)) and len(seqs[0]) == 2:\n            _, seqs = zip(*seqs)\n            seqs = list(seqs)\n        res = list(self.featurizer.embed_many(seqs, **kwargs))\n        res = [self._pool(x) for x in res]\n        return res\n\n    def __call__(\n        self,\n        seqs: List[str],\n        ignore_errors: bool = False,\n        enforce_dtype: bool = True,\n        **kwargs,\n    ):\nr\"\"\"\n        Compute molecular representation of a protein sequence.\n        If ignore_error is True, a list of features and valid ids are returned.\n\n        Args:\n            seqs: list of protein or nucleotide sequence as amino acids\n            enforce_dtype: whether to enforce the instance dtype in the generated fingerprint\n            ignore_errors: Whether to ignore errors during featurization or raise an error.\n            kwargs: Named parameters for the transform method\n\n        Returns:\n            feats: list of valid embeddings\n            ids: all valid positions that did not failed during featurization.\n                Only returned when ignore_errors is True.\n\n        \"\"\"\n        features = self.transform(seqs, **kwargs)\n        ids = np.arange(len(features))\n        if ignore_errors:\n            features, ids = self._filter_none(features)\n        if self.dtype is not None and enforce_dtype:\n            if self._representation.startswith(\"token\"):\n                features = [\n                    datatype.cast(feat, dtype=self.dtype, columns=self.columns) for feat in features\n                ]\n            else:\n                features = datatype.cast(features, dtype=self.dtype, columns=self.columns)\n        if not ignore_errors:\n            return features\n        return features, ids\n</code></pre>"},{"location":"api/molfeat.trans.struct.html#molfeat.trans.struct.prot1D.ProtBioFingerprint.SUPPORTED_EMBEDDINGS","title":"<code>SUPPORTED_EMBEDDINGS = ['bepler', 'cpcprot', 'esm', 'esm1b', 'esm1v', 'fasttext', 'glove', 'one_hot_encoding', 'plus_rnn', 'prottrans_albert_bfd', 'prottrans_bert_bfd', 'prottrans_t5_bfd', 'prottrans_t5_uniref50', 'prottrans_t5_xl_u50', 'prottrans_xlnet_uniref100', 'seqvec', 'unirep', 'word2vec']</code>  <code>class-attribute</code>","text":""},{"location":"api/molfeat.trans.struct.html#molfeat.trans.struct.prot1D.ProtBioFingerprint.layer_pooling","title":"<code>layer_pooling = Pooling(dim=0, name=layer_pooling)</code>  <code>instance-attribute</code>","text":""},{"location":"api/molfeat.trans.struct.html#molfeat.trans.struct.prot1D.ProtBioFingerprint.n_layers","title":"<code>n_layers</code>  <code>property</code>","text":"<p>Get the number of layers used in this embedding</p>"},{"location":"api/molfeat.trans.struct.html#molfeat.trans.struct.prot1D.ProtBioFingerprint.pooling","title":"<code>pooling = Pooling(dim=0, name=pooling)</code>  <code>instance-attribute</code>","text":""},{"location":"api/molfeat.trans.struct.html#molfeat.trans.struct.prot1D.ProtBioFingerprint.__call__","title":"<code>__call__(seqs, ignore_errors=False, enforce_dtype=True, **kwargs)</code>","text":"<p>Compute molecular representation of a protein sequence. If ignore_error is True, a list of features and valid ids are returned.</p> <p>Parameters:</p> Name Type Description Default <code>seqs</code> <code>List[str]</code> <p>list of protein or nucleotide sequence as amino acids</p> required <code>enforce_dtype</code> <code>bool</code> <p>whether to enforce the instance dtype in the generated fingerprint</p> <code>True</code> <code>ignore_errors</code> <code>bool</code> <p>Whether to ignore errors during featurization or raise an error.</p> <code>False</code> <code>kwargs</code> <p>Named parameters for the transform method</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>feats</code> <p>list of valid embeddings</p> <code>ids</code> <p>all valid positions that did not failed during featurization. Only returned when ignore_errors is True.</p> Source code in <code>molfeat/trans/struct/prot1D.py</code> <pre><code>def __call__(\n    self,\n    seqs: List[str],\n    ignore_errors: bool = False,\n    enforce_dtype: bool = True,\n    **kwargs,\n):\nr\"\"\"\n    Compute molecular representation of a protein sequence.\n    If ignore_error is True, a list of features and valid ids are returned.\n\n    Args:\n        seqs: list of protein or nucleotide sequence as amino acids\n        enforce_dtype: whether to enforce the instance dtype in the generated fingerprint\n        ignore_errors: Whether to ignore errors during featurization or raise an error.\n        kwargs: Named parameters for the transform method\n\n    Returns:\n        feats: list of valid embeddings\n        ids: all valid positions that did not failed during featurization.\n            Only returned when ignore_errors is True.\n\n    \"\"\"\n    features = self.transform(seqs, **kwargs)\n    ids = np.arange(len(features))\n    if ignore_errors:\n        features, ids = self._filter_none(features)\n    if self.dtype is not None and enforce_dtype:\n        if self._representation.startswith(\"token\"):\n            features = [\n                datatype.cast(feat, dtype=self.dtype, columns=self.columns) for feat in features\n            ]\n        else:\n            features = datatype.cast(features, dtype=self.dtype, columns=self.columns)\n    if not ignore_errors:\n        return features\n    return features, ids\n</code></pre>"},{"location":"api/molfeat.trans.struct.html#molfeat.trans.struct.prot1D.ProtBioFingerprint.__init__","title":"<code>__init__(featurizer='seqvec', pooling='mean', dtype=np.float32, device=None, layer_pooling='sum', **kwargs)</code>","text":"<p>Constructor for Deep Learning based Protein representation. SeqVec featurizer will e</p> <p>Parameters:</p> Name Type Description Default <code>featurizer</code> <code>Union[str, Callable]</code> <p>Name of callable of the embedding model</p> <code>'seqvec'</code> <code>pooling</code> <code>str</code> <p>Pooling method to use for sequence embedding. Defaults to \"mean\". If you set pooling to None, token representation will be returned</p> <code>'mean'</code> <code>dtype</code> <code>Callable</code> <p>Representation output datatype. Defaults to None.</p> <code>np.float32</code> <code>device</code> <code>Optional[Union[torch.device, str]]</code> <p>Torch device to move the model to. Defaults to None.</p> <code>None</code> <code>layer_pooling</code> <code>str</code> <p>Layer-wise pooling method to use when &gt; 1 layer exists. Default to 'sum'. If None, last layers is taken. This is relevant for <code>seqvec</code> mostly</p> <code>'sum'</code> Source code in <code>molfeat/trans/struct/prot1D.py</code> <pre><code>def __init__(\n    self,\n    featurizer: Union[str, Callable] = \"seqvec\",\n    pooling: str = \"mean\",\n    dtype: Callable = np.float32,\n    device: Optional[Union[torch.device, str]] = None,\n    layer_pooling: str = \"sum\",\n    **kwargs,\n):\n\"\"\"Constructor for Deep Learning based Protein representation.\n    SeqVec featurizer will e\n\n    Args:\n        featurizer: Name of callable of the embedding model\n        pooling: Pooling method to use for sequence embedding. Defaults to \"mean\".\n            If you set pooling to None, token representation will be returned\n        dtype: Representation output datatype. Defaults to None.\n        device: Torch device to move the model to. Defaults to None.\n        layer_pooling: Layer-wise pooling method to use when &gt; 1 layer exists. Default to 'sum'.\n            If None, last layers is taken. This is relevant for `seqvec` mostly\n    \"\"\"\n    if not requires.check(\"bio_embeddings\"):\n        raise ValueError(\n            \"Cannot use this featurizer without bio_embeddings (pip install 'bio_embeddings[all]').\"\n        )\n\n    if isinstance(featurizer, bio_embedder.EmbedderInterface):\n        featurizer = featurizer\n        self._model_name = self.featurizer.name\n    else:\n        if (\n            not isinstance(featurizer, str)\n            or featurizer.lower() not in self.SUPPORTED_EMBEDDINGS\n        ):\n            raise ValueError(\"Unknown featurizer: {}\".format(featurizer))\n        self._model_name = featurizer.lower()\n        featurizer = bio_embedder.name_to_embedder[self._model_name](device=device, **kwargs)\n\n    super().__init__(featurizer=featurizer, dtype=dtype, **kwargs)\n    self._fitted = True\n    self._representation = \"seq\"\n    self.pooling = Pooling(dim=0, name=pooling)\n    self.layer_pooling = Pooling(dim=0, name=layer_pooling)\n    if pooling is None:\n        self._representation = \"token\"\n    self._feat_length = None\n</code></pre>"},{"location":"api/molfeat.trans.struct.html#molfeat.trans.struct.prot1D.ProtBioFingerprint.__len__","title":"<code>__len__()</code>","text":"<p>Get featurizer length</p> Source code in <code>molfeat/trans/struct/prot1D.py</code> <pre><code>def __len__(self):\n\"\"\"Get featurizer length\"\"\"\n    return self.featurizer.embedding_dimension\n</code></pre>"},{"location":"api/molfeat.trans.struct.html#molfeat.trans.struct.prot1D.ProtBioFingerprint.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>molfeat/trans/struct/prot1D.py</code> <pre><code>def __repr__(self):\n    return \"{}(model={}, pooling={}, dtype={})\".format(\n        self.__class__.__name__,\n        _parse_to_evaluable_str(self._model_name),\n        _parse_to_evaluable_str(self.pooling.name),\n        _parse_to_evaluable_str(self.dtype),\n    )\n</code></pre>"},{"location":"api/molfeat.trans.struct.html#molfeat.trans.struct.prot1D.ProtBioFingerprint.transform","title":"<code>transform(seqs, names=None, **kwargs)</code>","text":"<p>Transform a list of protein/nucleotide sequence into a feature vector.</p> <p>Parameters:</p> Name Type Description Default <code>seqs</code> <code>List[str]</code> <p>list of protein/nucleotide sequence as amino acids</p> required <code>names</code> <code>Optional[List[str]]</code> <p>names of the macromolecules.  Will be ignored</p> <code>None</code> <code>kwargs</code> <p>additional arguments for the featurizer</p> <code>{}</code> <p>Returns:</p> Type Description <p>Embedding of size (N_SEQS, FEAT_DIM) for token embeddings and (FEAT_DIM, N_LAYERS) for sequence embeddings</p> Source code in <code>molfeat/trans/struct/prot1D.py</code> <pre><code>def transform(self, seqs: List[str], names: Optional[List[str]] = None, **kwargs):\n\"\"\"\n    Transform a list of protein/nucleotide sequence into a feature vector.\n\n    Args:\n        seqs: list of protein/nucleotide sequence as amino acids\n        names: names of the macromolecules.  Will be ignored\n        kwargs: additional arguments for the featurizer\n\n    Returns:\n        Embedding of size (N_SEQS, FEAT_DIM) for token embeddings\n            and (FEAT_DIM, N_LAYERS) for sequence embeddings\n    \"\"\"\n    if not isinstance(seqs, list):\n        seqs = [seqs]\n    if isinstance(seqs[0], (list, tuple)) and len(seqs[0]) == 2:\n        _, seqs = zip(*seqs)\n        seqs = list(seqs)\n    res = list(self.featurizer.embed_many(seqs, **kwargs))\n    res = [self._pool(x) for x in res]\n    return res\n</code></pre>"},{"location":"api/molfeat.utils.html","title":"molfeat.utils","text":""},{"location":"api/molfeat.utils.html#cache","title":"Cache","text":""},{"location":"api/molfeat.utils.html#molfeat.utils.cache.CacheList","title":"<code>CacheList</code>","text":"<p>Proxy for supporting search using a list of cache</p> Source code in <code>molfeat/utils/cache.py</code> <pre><code>class CacheList:\n\"\"\"Proxy for supporting search using a list of cache\"\"\"\n\n    def __init__(self, *caches):\n        self.caches = caches\n\n    def __getitem__(self, key):\n        for cache in self.caches:\n            val = cache.get(key)\n            if val is not None:\n                return val\n        raise KeyError(f\"{key} not found in any cache\")\n\n    def __contains__(self, key: Any):\n\"\"\"Check whether a key is in the cache\n        Args:\n            key: key to check in the cache\n        \"\"\"\n        return any(key in cache for cache in self.caches)\n\n    def __len__(self):\n\"\"\"Return the length of the cache\"\"\"\n        return sum(len(c) for c in self.caches)\n\n    def __iter__(self):\n\"\"\"Iterate over all the caches\"\"\"\n        return itertools.chain(*iter(self.cache))\n\n    def __setitem__(self, key: Any, item: Any):\n\"\"\"Add an item to the cache\n\n        Args:\n            key: input key to set\n            item: value of the key to set\n        \"\"\"\n        # select a random cache and add the item to the cache\n        cache = random.choice(self.caches)\n        cache.update({key: item})\n\n    def __call__(self, *args, **kwargs):\n\"\"\"\n        Compute the features for a list of molecules and save them to the cache\n        \"\"\"\n\n        raise NotImplementedError(\n            \"Dynamic updating of a cache list using a featurizer is not supported!\"\n        )\n\n    def clear(self, *args, **kwargs):\n\"\"\"Clear all the caches and make them inaccesible\"\"\"\n        for cache in self.caches:\n            cache.clear(*args, **kwargs)\n\n    def update(self, new_cache: Mapping[Any, Any]):\n        cache = random.choice(self.caches)\n        cache.update(new_cache)\n\n    def get(self, key, default: Optional[Any] = None):\n\"\"\"Get the cached value for a specific key\n        Args:\n            key: key to get\n            default: default value to return when the key is not found\n        \"\"\"\n        for cache in self.caches:\n            val = cache.get(key)\n            if val is not None:\n                return val\n        return default\n\n    def keys(self):\n\"\"\"Get list of keys in the cache\"\"\"\n        return list(itertools.chain(*(c.keys() for c in self.caches)))\n\n    def values(self):\n\"\"\"Get list of values in the cache\"\"\"\n        return list(itertools.chain(*(c.values() for c in self.caches)))\n\n    def items(self):\n\"\"\"Return iterator of key, values in the cache\"\"\"\n        return list(itertools.chain(*(c.items() for c in self.caches)))\n\n    def to_dict(self):\n\"\"\"Convert current cache to a dictionary\"\"\"\n        return dict(self.items())\n\n    def fetch(\n        self,\n        mols: List[Union[rdchem.Mol, str]],\n    ):\n\"\"\"Get the representation for a single\n\n        Args:\n            mols: list of molecules\n        \"\"\"\n        if isinstance(mols, str) or not isinstance(mols, Iterable):\n            mols = [mols]\n        return [self.get(mol) for mol in mols]\n</code></pre>"},{"location":"api/molfeat.utils.html#molfeat.utils.cache.CacheList.caches","title":"<code>caches = caches</code>  <code>instance-attribute</code>","text":""},{"location":"api/molfeat.utils.html#molfeat.utils.cache.CacheList.__call__","title":"<code>__call__(*args, **kwargs)</code>","text":"<p>Compute the features for a list of molecules and save them to the cache</p> Source code in <code>molfeat/utils/cache.py</code> <pre><code>def __call__(self, *args, **kwargs):\n\"\"\"\n    Compute the features for a list of molecules and save them to the cache\n    \"\"\"\n\n    raise NotImplementedError(\n        \"Dynamic updating of a cache list using a featurizer is not supported!\"\n    )\n</code></pre>"},{"location":"api/molfeat.utils.html#molfeat.utils.cache.CacheList.__contains__","title":"<code>__contains__(key)</code>","text":"<p>Check whether a key is in the cache</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>Any</code> <p>key to check in the cache</p> required Source code in <code>molfeat/utils/cache.py</code> <pre><code>def __contains__(self, key: Any):\n\"\"\"Check whether a key is in the cache\n    Args:\n        key: key to check in the cache\n    \"\"\"\n    return any(key in cache for cache in self.caches)\n</code></pre>"},{"location":"api/molfeat.utils.html#molfeat.utils.cache.CacheList.__getitem__","title":"<code>__getitem__(key)</code>","text":"Source code in <code>molfeat/utils/cache.py</code> <pre><code>def __getitem__(self, key):\n    for cache in self.caches:\n        val = cache.get(key)\n        if val is not None:\n            return val\n    raise KeyError(f\"{key} not found in any cache\")\n</code></pre>"},{"location":"api/molfeat.utils.html#molfeat.utils.cache.CacheList.__init__","title":"<code>__init__(*caches)</code>","text":"Source code in <code>molfeat/utils/cache.py</code> <pre><code>def __init__(self, *caches):\n    self.caches = caches\n</code></pre>"},{"location":"api/molfeat.utils.html#molfeat.utils.cache.CacheList.__iter__","title":"<code>__iter__()</code>","text":"<p>Iterate over all the caches</p> Source code in <code>molfeat/utils/cache.py</code> <pre><code>def __iter__(self):\n\"\"\"Iterate over all the caches\"\"\"\n    return itertools.chain(*iter(self.cache))\n</code></pre>"},{"location":"api/molfeat.utils.html#molfeat.utils.cache.CacheList.__len__","title":"<code>__len__()</code>","text":"<p>Return the length of the cache</p> Source code in <code>molfeat/utils/cache.py</code> <pre><code>def __len__(self):\n\"\"\"Return the length of the cache\"\"\"\n    return sum(len(c) for c in self.caches)\n</code></pre>"},{"location":"api/molfeat.utils.html#molfeat.utils.cache.CacheList.__setitem__","title":"<code>__setitem__(key, item)</code>","text":"<p>Add an item to the cache</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>Any</code> <p>input key to set</p> required <code>item</code> <code>Any</code> <p>value of the key to set</p> required Source code in <code>molfeat/utils/cache.py</code> <pre><code>def __setitem__(self, key: Any, item: Any):\n\"\"\"Add an item to the cache\n\n    Args:\n        key: input key to set\n        item: value of the key to set\n    \"\"\"\n    # select a random cache and add the item to the cache\n    cache = random.choice(self.caches)\n    cache.update({key: item})\n</code></pre>"},{"location":"api/molfeat.utils.html#molfeat.utils.cache.CacheList.clear","title":"<code>clear(*args, **kwargs)</code>","text":"<p>Clear all the caches and make them inaccesible</p> Source code in <code>molfeat/utils/cache.py</code> <pre><code>def clear(self, *args, **kwargs):\n\"\"\"Clear all the caches and make them inaccesible\"\"\"\n    for cache in self.caches:\n        cache.clear(*args, **kwargs)\n</code></pre>"},{"location":"api/molfeat.utils.html#molfeat.utils.cache.CacheList.fetch","title":"<code>fetch(mols)</code>","text":"<p>Get the representation for a single</p> <p>Parameters:</p> Name Type Description Default <code>mols</code> <code>List[Union[rdchem.Mol, str]]</code> <p>list of molecules</p> required Source code in <code>molfeat/utils/cache.py</code> <pre><code>def fetch(\n    self,\n    mols: List[Union[rdchem.Mol, str]],\n):\n\"\"\"Get the representation for a single\n\n    Args:\n        mols: list of molecules\n    \"\"\"\n    if isinstance(mols, str) or not isinstance(mols, Iterable):\n        mols = [mols]\n    return [self.get(mol) for mol in mols]\n</code></pre>"},{"location":"api/molfeat.utils.html#molfeat.utils.cache.CacheList.get","title":"<code>get(key, default=None)</code>","text":"<p>Get the cached value for a specific key</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <p>key to get</p> required <code>default</code> <code>Optional[Any]</code> <p>default value to return when the key is not found</p> <code>None</code> Source code in <code>molfeat/utils/cache.py</code> <pre><code>def get(self, key, default: Optional[Any] = None):\n\"\"\"Get the cached value for a specific key\n    Args:\n        key: key to get\n        default: default value to return when the key is not found\n    \"\"\"\n    for cache in self.caches:\n        val = cache.get(key)\n        if val is not None:\n            return val\n    return default\n</code></pre>"},{"location":"api/molfeat.utils.html#molfeat.utils.cache.CacheList.items","title":"<code>items()</code>","text":"<p>Return iterator of key, values in the cache</p> Source code in <code>molfeat/utils/cache.py</code> <pre><code>def items(self):\n\"\"\"Return iterator of key, values in the cache\"\"\"\n    return list(itertools.chain(*(c.items() for c in self.caches)))\n</code></pre>"},{"location":"api/molfeat.utils.html#molfeat.utils.cache.CacheList.keys","title":"<code>keys()</code>","text":"<p>Get list of keys in the cache</p> Source code in <code>molfeat/utils/cache.py</code> <pre><code>def keys(self):\n\"\"\"Get list of keys in the cache\"\"\"\n    return list(itertools.chain(*(c.keys() for c in self.caches)))\n</code></pre>"},{"location":"api/molfeat.utils.html#molfeat.utils.cache.CacheList.to_dict","title":"<code>to_dict()</code>","text":"<p>Convert current cache to a dictionary</p> Source code in <code>molfeat/utils/cache.py</code> <pre><code>def to_dict(self):\n\"\"\"Convert current cache to a dictionary\"\"\"\n    return dict(self.items())\n</code></pre>"},{"location":"api/molfeat.utils.html#molfeat.utils.cache.CacheList.update","title":"<code>update(new_cache)</code>","text":"Source code in <code>molfeat/utils/cache.py</code> <pre><code>def update(self, new_cache: Mapping[Any, Any]):\n    cache = random.choice(self.caches)\n    cache.update(new_cache)\n</code></pre>"},{"location":"api/molfeat.utils.html#molfeat.utils.cache.CacheList.values","title":"<code>values()</code>","text":"<p>Get list of values in the cache</p> Source code in <code>molfeat/utils/cache.py</code> <pre><code>def values(self):\n\"\"\"Get list of values in the cache\"\"\"\n    return list(itertools.chain(*(c.values() for c in self.caches)))\n</code></pre>"},{"location":"api/molfeat.utils.html#molfeat.utils.cache.DataCache","title":"<code>DataCache</code>","text":"<p>         Bases: <code>_Cache</code></p> <p>Molecular features caching system that cache computed values in memory for reuse later</p> Source code in <code>molfeat/utils/cache.py</code> <pre><code>class DataCache(_Cache):\n\"\"\"\n    Molecular features caching system that cache computed values in memory for reuse later\n    \"\"\"\n\n    def __init__(\n        self,\n        name: str,\n        n_jobs: int = -1,\n        mol_hasher: Optional[Union[Callable, str, MolToKey]] = None,\n        verbose: Union[bool, int] = False,\n        cache_file: Optional[Union[os.PathLike, bool]] = None,\n        delete_on_exit: bool = False,\n        clear_on_exit: bool = True,\n    ):\n\"\"\"Precomputed fingerprint caching callback\n\n        Args:\n            name: name of the cache\n            n_jobs: number of parallel jobs to use when performing any computation\n            mol_hasher: function to use to hash molecules. If not provided, `dm.unique_id`` is used by default\n            verbose: whether to print progress. Default to False\n            cache_file: Cache location. Defaults to None, which will use in-memory caching.\n            delete_on_exit: Whether to delete the cache file on exit. Defaults to False.\n            clear_on_exit: Whether to clear the cache on exit of the interpreter. Default to True\n        \"\"\"\n        super().__init__(name=name, mol_hasher=mol_hasher, n_jobs=n_jobs, verbose=verbose)\n\n        if cache_file is True:\n            cache_file = pathlib.Path(\n                platformdirs.user_cache_dir(appname=\"molfeat\")\n            ) / \"precomputed/{}_{}.db\".format(self.name, str(uuid.uuid4())[:8])\n\n            cache_file = str(cache_file)\n        self.cache_file = cache_file\n        self.cache = {}\n        self._initialize_cache()\n        self.delete_on_exit = delete_on_exit\n        self.clear_on_exit = clear_on_exit\n        if self.clear_on_exit:\n            atexit.register(partial(self.clear, delete=delete_on_exit))\n\n    def _initialize_cache(self):\n        if self.cache_file not in [None, False]:\n            # force creation of cache directory\n            cache_parent = pathlib.Path(self.cache_file).parent\n            cache_parent.mkdir(parents=True, exist_ok=True)\n            self.cache = shelve.open(self.cache_file)\n        else:\n            self.cache = {}\n\n    def clear(self, delete: bool = False):\n\"\"\"Clear cache memory if needed.\n        Note that a cleared cache cannot be used anymore\n\n        Args:\n            delete: whether to delete the cache file if on disk\n        \"\"\"\n        self.cache.clear()\n        if isinstance(self.cache, shelve.Shelf):\n            self.cache.close()\n            # EN: temporary set it to a dict before reopening\n            # this needs to be done to prevent operating on close files\n            self.cache = {}\n        if delete:\n            if self.cache_file is not None:\n                for path in glob.glob(str(self.cache_file) + \"*\"):\n                    try:\n                        os.unlink(path)\n                    except:\n                        pass\n        else:\n            self._initialize_cache()\n\n    def update(self, new_cache: Mapping[Any, Any]):\n\"\"\"Update the cache with new values\n\n        Args:\n            new_cache: new cache with items to use to update current cache\n        \"\"\"\n        for k, v in new_cache.items():\n            k = self.mol_hasher(k)\n            self.cache[k] = v\n        return self\n\n    def _sync_cache(self):\n\"\"\"Perform a cache sync to ensure values are up to date\"\"\"\n        if isinstance(self.cache, shelve.Shelf):\n            self.cache.sync()\n\n    @classmethod\n    def load_from_file(cls, filepath: Union[os.PathLike, str]):\n\"\"\"Load a datache from a file (including remote file)\n\n        Args:\n            filepath: path to the file to load\n            kwargs: keyword arguments to pass to the constructor\n        \"\"\"\n        cached_data = None\n        with fsspec.open(filepath, \"rb\") as f:\n            cached_data = joblib.load(f)\n        data = cached_data.pop(\"data\", {})\n        new_cache = cls(**cached_data)\n        new_cache.update(data)\n        return new_cache\n\n    def save_to_file(self, filepath: Union[os.PathLike, str]):\n\"\"\"Save the cache to a file\n\n        Args:\n            filepath: path to the file to save\n        \"\"\"\n        information = dict(\n            name=self.name,\n            n_jobs=self.n_jobs,\n            mol_hasher=self.mol_hasher,\n            verbose=self.verbose,\n            cache_file=(self.cache_file is not None),\n            delete_on_exit=self.delete_on_exit,\n        )\n        information[\"data\"] = self.to_dict()\n        with fsspec.open(filepath, \"wb\") as f:\n            joblib.dump(information, f)\n</code></pre>"},{"location":"api/molfeat.utils.html#molfeat.utils.cache.DataCache.cache","title":"<code>cache = {}</code>  <code>instance-attribute</code>","text":""},{"location":"api/molfeat.utils.html#molfeat.utils.cache.DataCache.cache_file","title":"<code>cache_file = cache_file</code>  <code>instance-attribute</code>","text":""},{"location":"api/molfeat.utils.html#molfeat.utils.cache.DataCache.clear_on_exit","title":"<code>clear_on_exit = clear_on_exit</code>  <code>instance-attribute</code>","text":""},{"location":"api/molfeat.utils.html#molfeat.utils.cache.DataCache.delete_on_exit","title":"<code>delete_on_exit = delete_on_exit</code>  <code>instance-attribute</code>","text":""},{"location":"api/molfeat.utils.html#molfeat.utils.cache.DataCache.__init__","title":"<code>__init__(name, n_jobs=-1, mol_hasher=None, verbose=False, cache_file=None, delete_on_exit=False, clear_on_exit=True)</code>","text":"<p>Precomputed fingerprint caching callback</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>name of the cache</p> required <code>n_jobs</code> <code>int</code> <p>number of parallel jobs to use when performing any computation</p> <code>-1</code> <code>mol_hasher</code> <code>Optional[Union[Callable, str, MolToKey]]</code> <p>function to use to hash molecules. If not provided, `dm.unique_id`` is used by default</p> <code>None</code> <code>verbose</code> <code>Union[bool, int]</code> <p>whether to print progress. Default to False</p> <code>False</code> <code>cache_file</code> <code>Optional[Union[os.PathLike, bool]]</code> <p>Cache location. Defaults to None, which will use in-memory caching.</p> <code>None</code> <code>delete_on_exit</code> <code>bool</code> <p>Whether to delete the cache file on exit. Defaults to False.</p> <code>False</code> <code>clear_on_exit</code> <code>bool</code> <p>Whether to clear the cache on exit of the interpreter. Default to True</p> <code>True</code> Source code in <code>molfeat/utils/cache.py</code> <pre><code>def __init__(\n    self,\n    name: str,\n    n_jobs: int = -1,\n    mol_hasher: Optional[Union[Callable, str, MolToKey]] = None,\n    verbose: Union[bool, int] = False,\n    cache_file: Optional[Union[os.PathLike, bool]] = None,\n    delete_on_exit: bool = False,\n    clear_on_exit: bool = True,\n):\n\"\"\"Precomputed fingerprint caching callback\n\n    Args:\n        name: name of the cache\n        n_jobs: number of parallel jobs to use when performing any computation\n        mol_hasher: function to use to hash molecules. If not provided, `dm.unique_id`` is used by default\n        verbose: whether to print progress. Default to False\n        cache_file: Cache location. Defaults to None, which will use in-memory caching.\n        delete_on_exit: Whether to delete the cache file on exit. Defaults to False.\n        clear_on_exit: Whether to clear the cache on exit of the interpreter. Default to True\n    \"\"\"\n    super().__init__(name=name, mol_hasher=mol_hasher, n_jobs=n_jobs, verbose=verbose)\n\n    if cache_file is True:\n        cache_file = pathlib.Path(\n            platformdirs.user_cache_dir(appname=\"molfeat\")\n        ) / \"precomputed/{}_{}.db\".format(self.name, str(uuid.uuid4())[:8])\n\n        cache_file = str(cache_file)\n    self.cache_file = cache_file\n    self.cache = {}\n    self._initialize_cache()\n    self.delete_on_exit = delete_on_exit\n    self.clear_on_exit = clear_on_exit\n    if self.clear_on_exit:\n        atexit.register(partial(self.clear, delete=delete_on_exit))\n</code></pre>"},{"location":"api/molfeat.utils.html#molfeat.utils.cache.DataCache.clear","title":"<code>clear(delete=False)</code>","text":"<p>Clear cache memory if needed. Note that a cleared cache cannot be used anymore</p> <p>Parameters:</p> Name Type Description Default <code>delete</code> <code>bool</code> <p>whether to delete the cache file if on disk</p> <code>False</code> Source code in <code>molfeat/utils/cache.py</code> <pre><code>def clear(self, delete: bool = False):\n\"\"\"Clear cache memory if needed.\n    Note that a cleared cache cannot be used anymore\n\n    Args:\n        delete: whether to delete the cache file if on disk\n    \"\"\"\n    self.cache.clear()\n    if isinstance(self.cache, shelve.Shelf):\n        self.cache.close()\n        # EN: temporary set it to a dict before reopening\n        # this needs to be done to prevent operating on close files\n        self.cache = {}\n    if delete:\n        if self.cache_file is not None:\n            for path in glob.glob(str(self.cache_file) + \"*\"):\n                try:\n                    os.unlink(path)\n                except:\n                    pass\n    else:\n        self._initialize_cache()\n</code></pre>"},{"location":"api/molfeat.utils.html#molfeat.utils.cache.DataCache.load_from_file","title":"<code>load_from_file(filepath)</code>  <code>classmethod</code>","text":"<p>Load a datache from a file (including remote file)</p> <p>Parameters:</p> Name Type Description Default <code>filepath</code> <code>Union[os.PathLike, str]</code> <p>path to the file to load</p> required <code>kwargs</code> <p>keyword arguments to pass to the constructor</p> required Source code in <code>molfeat/utils/cache.py</code> <pre><code>@classmethod\ndef load_from_file(cls, filepath: Union[os.PathLike, str]):\n\"\"\"Load a datache from a file (including remote file)\n\n    Args:\n        filepath: path to the file to load\n        kwargs: keyword arguments to pass to the constructor\n    \"\"\"\n    cached_data = None\n    with fsspec.open(filepath, \"rb\") as f:\n        cached_data = joblib.load(f)\n    data = cached_data.pop(\"data\", {})\n    new_cache = cls(**cached_data)\n    new_cache.update(data)\n    return new_cache\n</code></pre>"},{"location":"api/molfeat.utils.html#molfeat.utils.cache.DataCache.save_to_file","title":"<code>save_to_file(filepath)</code>","text":"<p>Save the cache to a file</p> <p>Parameters:</p> Name Type Description Default <code>filepath</code> <code>Union[os.PathLike, str]</code> <p>path to the file to save</p> required Source code in <code>molfeat/utils/cache.py</code> <pre><code>def save_to_file(self, filepath: Union[os.PathLike, str]):\n\"\"\"Save the cache to a file\n\n    Args:\n        filepath: path to the file to save\n    \"\"\"\n    information = dict(\n        name=self.name,\n        n_jobs=self.n_jobs,\n        mol_hasher=self.mol_hasher,\n        verbose=self.verbose,\n        cache_file=(self.cache_file is not None),\n        delete_on_exit=self.delete_on_exit,\n    )\n    information[\"data\"] = self.to_dict()\n    with fsspec.open(filepath, \"wb\") as f:\n        joblib.dump(information, f)\n</code></pre>"},{"location":"api/molfeat.utils.html#molfeat.utils.cache.DataCache.update","title":"<code>update(new_cache)</code>","text":"<p>Update the cache with new values</p> <p>Parameters:</p> Name Type Description Default <code>new_cache</code> <code>Mapping[Any, Any]</code> <p>new cache with items to use to update current cache</p> required Source code in <code>molfeat/utils/cache.py</code> <pre><code>def update(self, new_cache: Mapping[Any, Any]):\n\"\"\"Update the cache with new values\n\n    Args:\n        new_cache: new cache with items to use to update current cache\n    \"\"\"\n    for k, v in new_cache.items():\n        k = self.mol_hasher(k)\n        self.cache[k] = v\n    return self\n</code></pre>"},{"location":"api/molfeat.utils.html#molfeat.utils.cache.FileCache","title":"<code>FileCache</code>","text":"<p>         Bases: <code>_Cache</code></p> <p>Read only cache that holds in precomputed data in a pickle, csv or h5py file.</p> <p>The convention used requires the 'keys' and  'values' columns when the input file needs to be loaded as a dataframe.</p> Source code in <code>molfeat/utils/cache.py</code> <pre><code>class FileCache(_Cache):\n\"\"\"\n    Read only cache that holds in precomputed data in a pickle, csv or h5py file.\n\n    The convention used requires the 'keys' and  'values' columns when\n    the input file needs to be loaded as a dataframe.\n    \"\"\"\n\n    _PICKLE_PROTOCOL = 4\n    SUPPORTED_TYPES = [\"pickle\", \"pkl\", \"csv\", \"parquet\", \"pq\", \"hdf5\", \"h5\"]\n\n    def __init__(\n        self,\n        cache_file: Union[os.PathLike, str],\n        name: Optional[str] = None,\n        mol_hasher: Optional[Union[Callable, str, MolToKey]] = None,\n        n_jobs: Optional[int] = None,\n        verbose: Union[bool, int] = False,\n        file_type: str = \"parquet\",\n        clear_on_exit: bool = True,\n        parquet_kwargs: Optional[Dict[Any, Any]] = None,\n    ):\n\"\"\"Precomputed fingerprint caching callback\n\n        !!! note\n            Do not pickle this object, instead use the provided saving methods.\n\n        Args:\n            cache_file: Cache location. Can be a local file or a remote file\n            name: optional name to give the cache\n            mol_hasher: function to use to hash molecules. If not provided, `dm.unique_id` is used by default\n            n_jobs: number of parallel jobs to use when performing any computation\n            verbose: whether to print information about the cache\n            clear_on_exit: whether to clear the cache on exit of the interpreter\n            file_type: File type that was provided. One of \"csv\", \"pickle\", \"hdf5\" and \"parquet\"\n                For \"csv\" and \"parquet\", we expect columns \"keys\" and \"values\"\n                For a pickle, we expect either a mapping or a dataframe with \"keys\" and \"values\" columns\n            parquet_kwargs: Argument to pass to the parquet reader.\n        \"\"\"\n        super().__init__(name=name, mol_hasher=mol_hasher, n_jobs=n_jobs, verbose=verbose)\n\n        self.cache_file = cache_file\n        self.file_type = file_type\n        self.parquet_kwargs = parquet_kwargs or {}\n        self.clear_on_exit = clear_on_exit\n\n        if self.file_type not in FileCache.SUPPORTED_TYPES:\n            raise ValueError(\n                f\"Unsupported file type, expected one of {FileCache.SUPPORTED_TYPES}, got '{self.file_type}'\"\n            )\n\n        if self.cache_file is not None and dm.fs.exists(self.cache_file):\n            self._load_cache()\n        else:\n            self.cache = {}\n\n        if self.clear_on_exit:\n            atexit.register(self.clear)\n\n    def clear(self):\n\"\"\"Clear cache memory at exit and close any open file\n        Note that a cleared cache cannot be used anymore !\n        \"\"\"\n        if self.file_type in [\"hdf5\", \"h5\"]:\n            self.cache.close()\n        else:\n            del self.cache\n        # reset cache to empty\n        self.cache = {}\n\n    def items(self):\n\"\"\"Return iterator of key, values in the cache\"\"\"\n        if self.file_type in [\"hdf5\", \"h5\"]:\n            return ((k, np.asarray(v)) for k, v in self.cache.items())\n        return super().items()\n\n    def _load_cache(self):\n\"\"\"Load cache internally if needed\"\"\"\n\n        file_exists = dm.utils.fs.exists(self.cache_file)\n\n        if self.file_type in [\"hdf5\", \"h5\"]:\n            f = fsspec.open(\"simplecache::\" + self.cache_file, \"rb+\").open()\n            self.cache = h5py.File(f, \"r+\")\n\n        elif not file_exists:\n            self.cache = {}\n\n        elif self.file_type in [\"pickle\", \"pkl\"]:\n            with fsspec.open(self.cache_file, \"rb\") as IN:\n                self.cache = joblib.load(IN)\n\n        elif self.file_type == \"csv\":\n            with fsspec.open(self.cache_file, \"rb\") as IN:\n                # Allow the CSV file to exist but with an empty content\n                try:\n                    self.cache = pd.read_csv(\n                        IN,\n                        converters={\"values\": lambda x: commons.unpack_bits(ast.literal_eval(x))},\n                    )\n                except pandas.errors.EmptyDataError:\n                    self.cache = {}\n\n        elif self.file_type in [\"parquet\", \"pq\"]:\n            self.cache = pd.read_parquet(\n                self.cache_file,\n                columns=[\"keys\", \"values\"],\n                **self.parquet_kwargs,\n            )\n        # convert dataframe to dict if needed\n        if isinstance(self.cache, pd.DataFrame):\n            self.cache = self.cache.set_index(\"keys\").to_dict()[\"values\"]\n\n    def update(self, new_cache: Mapping[Any, Any]):\n\"\"\"Update the cache with new values\n\n        Args:\n            new_cache: new cache with items to use to update current cache\n        \"\"\"\n        for k, v in new_cache.items():\n            key = self.mol_hasher(k)\n            if self.file_type in [\"hdf5\", \"h5\"]:\n                self.cache.create_dataset(key, data=v)\n            else:\n                self.cache[key] = v\n        return self\n\n    @classmethod\n    def load_from_file(cls, filepath: Union[os.PathLike, str], **kwargs):\n\"\"\"Load a FileCache from a file\n\n        Args:\n            filepath: path to the file to load\n            kwargs: keyword arguments to pass to the constructor\n        \"\"\"\n        new_cache = cls(cache_file=filepath, **kwargs)\n        return new_cache\n\n    def to_dataframe(self, pack_bits: bool = False):\n\"\"\"Convert the cache to a dataframe. The converted dataframe would have `keys` and `values` columns\n\n        Args:\n            pack_bits: whether to pack the values columns into bits.\n                By using molfeat.utils.commons.unpack_bits, the values column can be reloaded as an array\n        \"\"\"\n        if pack_bits:\n            loaded_items = [\n                (k, commons.pack_bits(x, protocol=self._PICKLE_PROTOCOL)) for k, x in self.items()\n            ]\n        else:\n            loaded_items = self.items()\n        df = pd.DataFrame(loaded_items, columns=[\"keys\", \"values\"])\n        return df\n\n    def save_to_file(\n        self,\n        filepath: Optional[Union[os.PathLike, str]] = None,\n        file_type: Optional[str] = None,\n        **kwargs,\n    ):\n\"\"\"Save the cache to a file\n\n        Args:\n            filepath: path to the file to save. If None, the cache is saved to the original file.\n            file_type: format used to save the cache to file one of \"pickle\", \"csv\", \"hdf5\", \"parquet\".\n                If None, the original file type is used.\n            kwargs: keyword arguments to pass to the serializer to disk (e.g to pass to pd.to_csv or pd.to_parquet)\n        \"\"\"\n\n        if filepath is None:\n            filepath = self.cache_file\n\n        if file_type is None:\n            file_type = self.file_type\n\n        if file_type in [\"pkl\", \"pickle\"]:\n            with fsspec.open(filepath, \"wb\") as f:\n                joblib.dump(self.to_dict(), f)\n\n        elif file_type in [\"csv\", \"parquet\", \"pq\"]:\n            df = self.to_dataframe(pack_bits=(file_type == \"csv\"))\n\n            if file_type == \"csv\":\n                with fsspec.open(filepath, \"w\") as f:\n                    df.to_csv(f, index=False, **kwargs)\n            else:\n                df.to_parquet(filepath, index=False, **kwargs)\n\n        elif file_type in [\"hdf5\", \"h5\"]:\n            with fsspec.open(filepath, \"wb\") as IN:\n                with h5py.File(IN, \"w\") as f:\n                    for k, v in self.items():\n                        f.create_dataset(k, data=v)\n        else:\n            raise ValueError(\"Unsupported output protocol: {}\".format(file_type))\n\n    def to_state_dict(self, save_to_file: bool = True) -&gt; dict:\n\"\"\"Serialize the cache to a state dict.\n\n        Args:\n            save_to_file: whether to save the cache to file.\n        \"\"\"\n\n        if save_to_file is True:\n            self.save_to_file()\n\n        state = {}\n        state[\"_cache_name\"] = \"FileCache\"\n        state[\"cache_file\"] = self.cache_file\n        state[\"name\"] = self.name\n        state[\"n_jobs\"] = self.n_jobs\n        state[\"verbose\"] = self.verbose\n        state[\"file_type\"] = self.file_type\n        state[\"clear_on_exit\"] = self.clear_on_exit\n        state[\"parquet_kwargs\"] = self.parquet_kwargs\n        state[\"mol_hasher\"] = self.mol_hasher.to_state_dict()\n\n        return state\n\n    @staticmethod\n    def from_state_dict(state: dict, override_args: Optional[dict] = None) -&gt; \"FileCache\":\n        # Don't alter the original state dict\n        state = copy.deepcopy(state)\n\n        cache_name = state.pop(\"_cache_name\")\n\n        if cache_name != \"FileCache\":\n            raise ValueError(f\"The cache object name is invalid: {cache_name}\")\n\n        # Load the MolToKey object\n        state[\"mol_hasher\"] = MolToKey.from_state_dict(state[\"mol_hasher\"])\n\n        if override_args is not None:\n            state.update(override_args)\n\n        return FileCache(**state)\n</code></pre>"},{"location":"api/molfeat.utils.html#molfeat.utils.cache.FileCache.SUPPORTED_TYPES","title":"<code>SUPPORTED_TYPES = ['pickle', 'pkl', 'csv', 'parquet', 'pq', 'hdf5', 'h5']</code>  <code>class-attribute</code>","text":""},{"location":"api/molfeat.utils.html#molfeat.utils.cache.FileCache.cache","title":"<code>cache = {}</code>  <code>instance-attribute</code>","text":""},{"location":"api/molfeat.utils.html#molfeat.utils.cache.FileCache.cache_file","title":"<code>cache_file = cache_file</code>  <code>instance-attribute</code>","text":""},{"location":"api/molfeat.utils.html#molfeat.utils.cache.FileCache.clear_on_exit","title":"<code>clear_on_exit = clear_on_exit</code>  <code>instance-attribute</code>","text":""},{"location":"api/molfeat.utils.html#molfeat.utils.cache.FileCache.file_type","title":"<code>file_type = file_type</code>  <code>instance-attribute</code>","text":""},{"location":"api/molfeat.utils.html#molfeat.utils.cache.FileCache.parquet_kwargs","title":"<code>parquet_kwargs = parquet_kwargs or {}</code>  <code>instance-attribute</code>","text":""},{"location":"api/molfeat.utils.html#molfeat.utils.cache.FileCache.__init__","title":"<code>__init__(cache_file, name=None, mol_hasher=None, n_jobs=None, verbose=False, file_type='parquet', clear_on_exit=True, parquet_kwargs=None)</code>","text":"<p>Precomputed fingerprint caching callback</p> <p>Note</p> <p>Do not pickle this object, instead use the provided saving methods.</p> <p>Parameters:</p> Name Type Description Default <code>cache_file</code> <code>Union[os.PathLike, str]</code> <p>Cache location. Can be a local file or a remote file</p> required <code>name</code> <code>Optional[str]</code> <p>optional name to give the cache</p> <code>None</code> <code>mol_hasher</code> <code>Optional[Union[Callable, str, MolToKey]]</code> <p>function to use to hash molecules. If not provided, <code>dm.unique_id</code> is used by default</p> <code>None</code> <code>n_jobs</code> <code>Optional[int]</code> <p>number of parallel jobs to use when performing any computation</p> <code>None</code> <code>verbose</code> <code>Union[bool, int]</code> <p>whether to print information about the cache</p> <code>False</code> <code>clear_on_exit</code> <code>bool</code> <p>whether to clear the cache on exit of the interpreter</p> <code>True</code> <code>file_type</code> <code>str</code> <p>File type that was provided. One of \"csv\", \"pickle\", \"hdf5\" and \"parquet\" For \"csv\" and \"parquet\", we expect columns \"keys\" and \"values\" For a pickle, we expect either a mapping or a dataframe with \"keys\" and \"values\" columns</p> <code>'parquet'</code> <code>parquet_kwargs</code> <code>Optional[Dict[Any, Any]]</code> <p>Argument to pass to the parquet reader.</p> <code>None</code> Source code in <code>molfeat/utils/cache.py</code> <pre><code>def __init__(\n    self,\n    cache_file: Union[os.PathLike, str],\n    name: Optional[str] = None,\n    mol_hasher: Optional[Union[Callable, str, MolToKey]] = None,\n    n_jobs: Optional[int] = None,\n    verbose: Union[bool, int] = False,\n    file_type: str = \"parquet\",\n    clear_on_exit: bool = True,\n    parquet_kwargs: Optional[Dict[Any, Any]] = None,\n):\n\"\"\"Precomputed fingerprint caching callback\n\n    !!! note\n        Do not pickle this object, instead use the provided saving methods.\n\n    Args:\n        cache_file: Cache location. Can be a local file or a remote file\n        name: optional name to give the cache\n        mol_hasher: function to use to hash molecules. If not provided, `dm.unique_id` is used by default\n        n_jobs: number of parallel jobs to use when performing any computation\n        verbose: whether to print information about the cache\n        clear_on_exit: whether to clear the cache on exit of the interpreter\n        file_type: File type that was provided. One of \"csv\", \"pickle\", \"hdf5\" and \"parquet\"\n            For \"csv\" and \"parquet\", we expect columns \"keys\" and \"values\"\n            For a pickle, we expect either a mapping or a dataframe with \"keys\" and \"values\" columns\n        parquet_kwargs: Argument to pass to the parquet reader.\n    \"\"\"\n    super().__init__(name=name, mol_hasher=mol_hasher, n_jobs=n_jobs, verbose=verbose)\n\n    self.cache_file = cache_file\n    self.file_type = file_type\n    self.parquet_kwargs = parquet_kwargs or {}\n    self.clear_on_exit = clear_on_exit\n\n    if self.file_type not in FileCache.SUPPORTED_TYPES:\n        raise ValueError(\n            f\"Unsupported file type, expected one of {FileCache.SUPPORTED_TYPES}, got '{self.file_type}'\"\n        )\n\n    if self.cache_file is not None and dm.fs.exists(self.cache_file):\n        self._load_cache()\n    else:\n        self.cache = {}\n\n    if self.clear_on_exit:\n        atexit.register(self.clear)\n</code></pre>"},{"location":"api/molfeat.utils.html#molfeat.utils.cache.FileCache.clear","title":"<code>clear()</code>","text":"<p>Clear cache memory at exit and close any open file Note that a cleared cache cannot be used anymore !</p> Source code in <code>molfeat/utils/cache.py</code> <pre><code>def clear(self):\n\"\"\"Clear cache memory at exit and close any open file\n    Note that a cleared cache cannot be used anymore !\n    \"\"\"\n    if self.file_type in [\"hdf5\", \"h5\"]:\n        self.cache.close()\n    else:\n        del self.cache\n    # reset cache to empty\n    self.cache = {}\n</code></pre>"},{"location":"api/molfeat.utils.html#molfeat.utils.cache.FileCache.from_state_dict","title":"<code>from_state_dict(state, override_args=None)</code>  <code>staticmethod</code>","text":"Source code in <code>molfeat/utils/cache.py</code> <pre><code>@staticmethod\ndef from_state_dict(state: dict, override_args: Optional[dict] = None) -&gt; \"FileCache\":\n    # Don't alter the original state dict\n    state = copy.deepcopy(state)\n\n    cache_name = state.pop(\"_cache_name\")\n\n    if cache_name != \"FileCache\":\n        raise ValueError(f\"The cache object name is invalid: {cache_name}\")\n\n    # Load the MolToKey object\n    state[\"mol_hasher\"] = MolToKey.from_state_dict(state[\"mol_hasher\"])\n\n    if override_args is not None:\n        state.update(override_args)\n\n    return FileCache(**state)\n</code></pre>"},{"location":"api/molfeat.utils.html#molfeat.utils.cache.FileCache.items","title":"<code>items()</code>","text":"<p>Return iterator of key, values in the cache</p> Source code in <code>molfeat/utils/cache.py</code> <pre><code>def items(self):\n\"\"\"Return iterator of key, values in the cache\"\"\"\n    if self.file_type in [\"hdf5\", \"h5\"]:\n        return ((k, np.asarray(v)) for k, v in self.cache.items())\n    return super().items()\n</code></pre>"},{"location":"api/molfeat.utils.html#molfeat.utils.cache.FileCache.load_from_file","title":"<code>load_from_file(filepath, **kwargs)</code>  <code>classmethod</code>","text":"<p>Load a FileCache from a file</p> <p>Parameters:</p> Name Type Description Default <code>filepath</code> <code>Union[os.PathLike, str]</code> <p>path to the file to load</p> required <code>kwargs</code> <p>keyword arguments to pass to the constructor</p> <code>{}</code> Source code in <code>molfeat/utils/cache.py</code> <pre><code>@classmethod\ndef load_from_file(cls, filepath: Union[os.PathLike, str], **kwargs):\n\"\"\"Load a FileCache from a file\n\n    Args:\n        filepath: path to the file to load\n        kwargs: keyword arguments to pass to the constructor\n    \"\"\"\n    new_cache = cls(cache_file=filepath, **kwargs)\n    return new_cache\n</code></pre>"},{"location":"api/molfeat.utils.html#molfeat.utils.cache.FileCache.save_to_file","title":"<code>save_to_file(filepath=None, file_type=None, **kwargs)</code>","text":"<p>Save the cache to a file</p> <p>Parameters:</p> Name Type Description Default <code>filepath</code> <code>Optional[Union[os.PathLike, str]]</code> <p>path to the file to save. If None, the cache is saved to the original file.</p> <code>None</code> <code>file_type</code> <code>Optional[str]</code> <p>format used to save the cache to file one of \"pickle\", \"csv\", \"hdf5\", \"parquet\". If None, the original file type is used.</p> <code>None</code> <code>kwargs</code> <p>keyword arguments to pass to the serializer to disk (e.g to pass to pd.to_csv or pd.to_parquet)</p> <code>{}</code> Source code in <code>molfeat/utils/cache.py</code> <pre><code>def save_to_file(\n    self,\n    filepath: Optional[Union[os.PathLike, str]] = None,\n    file_type: Optional[str] = None,\n    **kwargs,\n):\n\"\"\"Save the cache to a file\n\n    Args:\n        filepath: path to the file to save. If None, the cache is saved to the original file.\n        file_type: format used to save the cache to file one of \"pickle\", \"csv\", \"hdf5\", \"parquet\".\n            If None, the original file type is used.\n        kwargs: keyword arguments to pass to the serializer to disk (e.g to pass to pd.to_csv or pd.to_parquet)\n    \"\"\"\n\n    if filepath is None:\n        filepath = self.cache_file\n\n    if file_type is None:\n        file_type = self.file_type\n\n    if file_type in [\"pkl\", \"pickle\"]:\n        with fsspec.open(filepath, \"wb\") as f:\n            joblib.dump(self.to_dict(), f)\n\n    elif file_type in [\"csv\", \"parquet\", \"pq\"]:\n        df = self.to_dataframe(pack_bits=(file_type == \"csv\"))\n\n        if file_type == \"csv\":\n            with fsspec.open(filepath, \"w\") as f:\n                df.to_csv(f, index=False, **kwargs)\n        else:\n            df.to_parquet(filepath, index=False, **kwargs)\n\n    elif file_type in [\"hdf5\", \"h5\"]:\n        with fsspec.open(filepath, \"wb\") as IN:\n            with h5py.File(IN, \"w\") as f:\n                for k, v in self.items():\n                    f.create_dataset(k, data=v)\n    else:\n        raise ValueError(\"Unsupported output protocol: {}\".format(file_type))\n</code></pre>"},{"location":"api/molfeat.utils.html#molfeat.utils.cache.FileCache.to_dataframe","title":"<code>to_dataframe(pack_bits=False)</code>","text":"<p>Convert the cache to a dataframe. The converted dataframe would have <code>keys</code> and <code>values</code> columns</p> <p>Parameters:</p> Name Type Description Default <code>pack_bits</code> <code>bool</code> <p>whether to pack the values columns into bits. By using molfeat.utils.commons.unpack_bits, the values column can be reloaded as an array</p> <code>False</code> Source code in <code>molfeat/utils/cache.py</code> <pre><code>def to_dataframe(self, pack_bits: bool = False):\n\"\"\"Convert the cache to a dataframe. The converted dataframe would have `keys` and `values` columns\n\n    Args:\n        pack_bits: whether to pack the values columns into bits.\n            By using molfeat.utils.commons.unpack_bits, the values column can be reloaded as an array\n    \"\"\"\n    if pack_bits:\n        loaded_items = [\n            (k, commons.pack_bits(x, protocol=self._PICKLE_PROTOCOL)) for k, x in self.items()\n        ]\n    else:\n        loaded_items = self.items()\n    df = pd.DataFrame(loaded_items, columns=[\"keys\", \"values\"])\n    return df\n</code></pre>"},{"location":"api/molfeat.utils.html#molfeat.utils.cache.FileCache.to_state_dict","title":"<code>to_state_dict(save_to_file=True)</code>","text":"<p>Serialize the cache to a state dict.</p> <p>Parameters:</p> Name Type Description Default <code>save_to_file</code> <code>bool</code> <p>whether to save the cache to file.</p> <code>True</code> Source code in <code>molfeat/utils/cache.py</code> <pre><code>def to_state_dict(self, save_to_file: bool = True) -&gt; dict:\n\"\"\"Serialize the cache to a state dict.\n\n    Args:\n        save_to_file: whether to save the cache to file.\n    \"\"\"\n\n    if save_to_file is True:\n        self.save_to_file()\n\n    state = {}\n    state[\"_cache_name\"] = \"FileCache\"\n    state[\"cache_file\"] = self.cache_file\n    state[\"name\"] = self.name\n    state[\"n_jobs\"] = self.n_jobs\n    state[\"verbose\"] = self.verbose\n    state[\"file_type\"] = self.file_type\n    state[\"clear_on_exit\"] = self.clear_on_exit\n    state[\"parquet_kwargs\"] = self.parquet_kwargs\n    state[\"mol_hasher\"] = self.mol_hasher.to_state_dict()\n\n    return state\n</code></pre>"},{"location":"api/molfeat.utils.html#molfeat.utils.cache.FileCache.update","title":"<code>update(new_cache)</code>","text":"<p>Update the cache with new values</p> <p>Parameters:</p> Name Type Description Default <code>new_cache</code> <code>Mapping[Any, Any]</code> <p>new cache with items to use to update current cache</p> required Source code in <code>molfeat/utils/cache.py</code> <pre><code>def update(self, new_cache: Mapping[Any, Any]):\n\"\"\"Update the cache with new values\n\n    Args:\n        new_cache: new cache with items to use to update current cache\n    \"\"\"\n    for k, v in new_cache.items():\n        key = self.mol_hasher(k)\n        if self.file_type in [\"hdf5\", \"h5\"]:\n            self.cache.create_dataset(key, data=v)\n        else:\n            self.cache[key] = v\n    return self\n</code></pre>"},{"location":"api/molfeat.utils.html#molfeat.utils.cache.MPDataCache","title":"<code>MPDataCache</code>","text":"<p>         Bases: <code>DataCache</code></p> <p>A datacache that supports multiprocessing natively</p> Source code in <code>molfeat/utils/cache.py</code> <pre><code>class MPDataCache(DataCache):\n\"\"\"A datacache that supports multiprocessing natively\"\"\"\n\n    def __init__(\n        self,\n        name: Optional[str] = None,\n        n_jobs: int = -1,\n        mol_hasher: Optional[Union[Callable, str, MolToKey]] = None,\n        verbose: Union[bool, int] = False,\n        clear_on_exit: bool = False,\n    ):\n\"\"\"Multiprocessing datacache that save cache into a shared memory\n\n        Args:\n            name: name of the cache\n            n_jobs: number of parallel jobs to use when performing any computation\n            mol_hasher: function to use to hash molecules. If not provided, `dm.unique_id`` is used by default\n            verbose: whether to print progress. Default to False\n            clear_on_exit: Whether to clear the cache on exit. Default is False to allow sharing the cache content\n        \"\"\"\n        super().__init__(\n            name=name,\n            n_jobs=n_jobs,\n            mol_hasher=mol_hasher,\n            cache_file=None,\n            verbose=verbose,\n            delete_on_exit=False,\n            clear_on_exit=clear_on_exit,\n        )\n\n    def _initialize_cache(self):\n\"\"\"Initialize empty cache using a shared dict\"\"\"\n        manager = mp.Manager()  # this might not be a great idea to initialize everytime...\n        self.cache = manager.dict()\n</code></pre>"},{"location":"api/molfeat.utils.html#molfeat.utils.cache.MPDataCache.__init__","title":"<code>__init__(name=None, n_jobs=-1, mol_hasher=None, verbose=False, clear_on_exit=False)</code>","text":"<p>Multiprocessing datacache that save cache into a shared memory</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>Optional[str]</code> <p>name of the cache</p> <code>None</code> <code>n_jobs</code> <code>int</code> <p>number of parallel jobs to use when performing any computation</p> <code>-1</code> <code>mol_hasher</code> <code>Optional[Union[Callable, str, MolToKey]]</code> <p>function to use to hash molecules. If not provided, `dm.unique_id`` is used by default</p> <code>None</code> <code>verbose</code> <code>Union[bool, int]</code> <p>whether to print progress. Default to False</p> <code>False</code> <code>clear_on_exit</code> <code>bool</code> <p>Whether to clear the cache on exit. Default is False to allow sharing the cache content</p> <code>False</code> Source code in <code>molfeat/utils/cache.py</code> <pre><code>def __init__(\n    self,\n    name: Optional[str] = None,\n    n_jobs: int = -1,\n    mol_hasher: Optional[Union[Callable, str, MolToKey]] = None,\n    verbose: Union[bool, int] = False,\n    clear_on_exit: bool = False,\n):\n\"\"\"Multiprocessing datacache that save cache into a shared memory\n\n    Args:\n        name: name of the cache\n        n_jobs: number of parallel jobs to use when performing any computation\n        mol_hasher: function to use to hash molecules. If not provided, `dm.unique_id`` is used by default\n        verbose: whether to print progress. Default to False\n        clear_on_exit: Whether to clear the cache on exit. Default is False to allow sharing the cache content\n    \"\"\"\n    super().__init__(\n        name=name,\n        n_jobs=n_jobs,\n        mol_hasher=mol_hasher,\n        cache_file=None,\n        verbose=verbose,\n        delete_on_exit=False,\n        clear_on_exit=clear_on_exit,\n    )\n</code></pre>"},{"location":"api/molfeat.utils.html#molfeat.utils.cache.MolToKey","title":"<code>MolToKey</code>","text":"<p>Convert a molecule to a key</p> Source code in <code>molfeat/utils/cache.py</code> <pre><code>class MolToKey:\n\"\"\"Convert a molecule to a key\"\"\"\n\n    SUPPORTED_HASH_FN = {\n        \"dm.unique_id\": dm.unique_id,\n        \"dm.to_inchikey\": dm.to_inchikey,\n    }\n\n    def __init__(self, hash_fn: Optional[Union[Callable, str]] = \"dm.unique_id\"):\n\"\"\"Init function for molecular key generator.\n\n        Args:\n            hash_fn: hash function to use for the molecular key\n        \"\"\"\n\n        if isinstance(hash_fn, str):\n            if hash_fn not in self.SUPPORTED_HASH_FN:\n                raise ValueError(\n                    f\"Hash function {hash_fn} is not supported. \"\n                    f\"Supported hash functions are: {self.SUPPORTED_HASH_FN.keys()}\"\n                )\n\n            self.hash_name = hash_fn\n            self.hash_fn = self.SUPPORTED_HASH_FN[hash_fn]\n\n        else:\n            self.hash_fn = hash_fn\n            self.hash_name = None\n\n            if self.hash_fn is None:\n                self.hash_fn = dm.unique_id\n                self.hash_name = \"dm.unique_id\"\n\n    def __call__(self, mol: rdchem.Mol):\n\"\"\"Convert a molecule object to a key that can be used for the cache system\n\n        Args:\n            mol: input molecule object\n        \"\"\"\n        is_mol = dm.to_mol(mol) is not None\n\n        if is_mol and self.hash_fn is not None:\n            return self.hash_fn(mol)\n\n        return mol\n\n    def to_state_dict(self):\n\"\"\"Serialize MolToKey to a state dict.\"\"\"\n\n        if self.hash_name is None:\n            raise ValueError(\n                \"The hash function has been provided as a function and not a string. \"\n                \"So it's impossible to save the state. You must specifiy the hash function as a string instead.\"\n            )\n\n        state = {}\n        state[\"hash_name\"] = self.hash_name\n        return state\n\n    @staticmethod\n    def from_state_dict(state: dict) -&gt; \"MolToKey\":\n\"\"\"Load a MolToKey object from a state dict.\"\"\"\n        return MolToKey(hash_fn=state[\"hash_name\"])\n</code></pre>"},{"location":"api/molfeat.utils.html#molfeat.utils.cache.MolToKey.SUPPORTED_HASH_FN","title":"<code>SUPPORTED_HASH_FN = {'dm.unique_id': dm.unique_id, 'dm.to_inchikey': dm.to_inchikey}</code>  <code>class-attribute</code>","text":""},{"location":"api/molfeat.utils.html#molfeat.utils.cache.MolToKey.hash_fn","title":"<code>hash_fn = self.SUPPORTED_HASH_FN[hash_fn]</code>  <code>instance-attribute</code>","text":""},{"location":"api/molfeat.utils.html#molfeat.utils.cache.MolToKey.hash_name","title":"<code>hash_name = hash_fn</code>  <code>instance-attribute</code>","text":""},{"location":"api/molfeat.utils.html#molfeat.utils.cache.MolToKey.__call__","title":"<code>__call__(mol)</code>","text":"<p>Convert a molecule object to a key that can be used for the cache system</p> <p>Parameters:</p> Name Type Description Default <code>mol</code> <code>rdchem.Mol</code> <p>input molecule object</p> required Source code in <code>molfeat/utils/cache.py</code> <pre><code>def __call__(self, mol: rdchem.Mol):\n\"\"\"Convert a molecule object to a key that can be used for the cache system\n\n    Args:\n        mol: input molecule object\n    \"\"\"\n    is_mol = dm.to_mol(mol) is not None\n\n    if is_mol and self.hash_fn is not None:\n        return self.hash_fn(mol)\n\n    return mol\n</code></pre>"},{"location":"api/molfeat.utils.html#molfeat.utils.cache.MolToKey.__init__","title":"<code>__init__(hash_fn='dm.unique_id')</code>","text":"<p>Init function for molecular key generator.</p> <p>Parameters:</p> Name Type Description Default <code>hash_fn</code> <code>Optional[Union[Callable, str]]</code> <p>hash function to use for the molecular key</p> <code>'dm.unique_id'</code> Source code in <code>molfeat/utils/cache.py</code> <pre><code>def __init__(self, hash_fn: Optional[Union[Callable, str]] = \"dm.unique_id\"):\n\"\"\"Init function for molecular key generator.\n\n    Args:\n        hash_fn: hash function to use for the molecular key\n    \"\"\"\n\n    if isinstance(hash_fn, str):\n        if hash_fn not in self.SUPPORTED_HASH_FN:\n            raise ValueError(\n                f\"Hash function {hash_fn} is not supported. \"\n                f\"Supported hash functions are: {self.SUPPORTED_HASH_FN.keys()}\"\n            )\n\n        self.hash_name = hash_fn\n        self.hash_fn = self.SUPPORTED_HASH_FN[hash_fn]\n\n    else:\n        self.hash_fn = hash_fn\n        self.hash_name = None\n\n        if self.hash_fn is None:\n            self.hash_fn = dm.unique_id\n            self.hash_name = \"dm.unique_id\"\n</code></pre>"},{"location":"api/molfeat.utils.html#molfeat.utils.cache.MolToKey.from_state_dict","title":"<code>from_state_dict(state)</code>  <code>staticmethod</code>","text":"<p>Load a MolToKey object from a state dict.</p> Source code in <code>molfeat/utils/cache.py</code> <pre><code>@staticmethod\ndef from_state_dict(state: dict) -&gt; \"MolToKey\":\n\"\"\"Load a MolToKey object from a state dict.\"\"\"\n    return MolToKey(hash_fn=state[\"hash_name\"])\n</code></pre>"},{"location":"api/molfeat.utils.html#molfeat.utils.cache.MolToKey.to_state_dict","title":"<code>to_state_dict()</code>","text":"<p>Serialize MolToKey to a state dict.</p> Source code in <code>molfeat/utils/cache.py</code> <pre><code>def to_state_dict(self):\n\"\"\"Serialize MolToKey to a state dict.\"\"\"\n\n    if self.hash_name is None:\n        raise ValueError(\n            \"The hash function has been provided as a function and not a string. \"\n            \"So it's impossible to save the state. You must specifiy the hash function as a string instead.\"\n        )\n\n    state = {}\n    state[\"hash_name\"] = self.hash_name\n    return state\n</code></pre>"},{"location":"api/molfeat.utils.html#common-utils","title":"Common utils","text":"<p>Common utility functions</p>"},{"location":"api/molfeat.utils.html#molfeat.utils.commons.align_conformers","title":"<code>align_conformers(mols, ref_id=0, copy=True, conformer_id=-1)</code>","text":"<p>Align a list of molecules to a reference molecule.</p> <p>Note: consider adding me to <code>datamol</code>.</p> <p>Parameters:</p> Name Type Description Default <code>mols</code> <code>List[dm.Mol]</code> <p>List of molecules to align. All the molecules must have a conformer.</p> required <code>ref_id</code> <code>int</code> <p>Index of the reference molecule. By default, the first molecule in the list will be used as reference.</p> <code>0</code> <code>copy</code> <code>bool</code> <p>Whether to copy the molecules before performing the alignement.</p> <code>True</code> <code>conformer_id</code> <code>int</code> <p>Conformer id to use.</p> <code>-1</code> <p>Returns:</p> Name Type Description <code>mols</code> <p>The aligned molecules.</p> <code>scores</code> <p>The score of the alignement.</p> Source code in <code>molfeat/utils/commons.py</code> <pre><code>def align_conformers(\n    mols: List[dm.Mol],\n    ref_id: int = 0,\n    copy: bool = True,\n    conformer_id: int = -1,\n):\n\"\"\"Align a list of molecules to a reference molecule.\n\n    Note: consider adding me to `datamol`.\n\n    Args:\n        mols: List of molecules to align. All the molecules must have a conformer.\n        ref_id: Index of the reference molecule. By default, the first molecule in the list\n            will be used as reference.\n        copy: Whether to copy the molecules before performing the alignement.\n        conformer_id: Conformer id to use.\n\n    Returns:\n        mols: The aligned molecules.\n        scores: The score of the alignement.\n    \"\"\"\n\n    # Check all input molecules has a conformer\n    if not all([mol.GetNumConformers() &gt;= 1 for mol in mols]):\n        raise ValueError(\"One or more input molecules is missing a conformer.\")\n\n    # Make a copy of the molecules since they are going to be modified\n    if copy:\n        mols = [dm.copy_mol(mol) for mol in mols]\n\n    # Compute Crippen contributions for every atoms and molecules\n    crippen_contribs = [rdMolDescriptors._CalcCrippenContribs(mol) for mol in mols]\n\n    # Split reference and probe molecules\n    crippen_contrib_ref = crippen_contribs[ref_id]\n    crippen_contrib_probes = crippen_contribs\n    mol_ref = mols[ref_id]\n    mol_probes = mols\n\n    # Loop and align\n    scores = []\n    for i, mol in enumerate(mol_probes):\n        crippenO3A = rdMolAlign.GetCrippenO3A(\n            prbMol=mol,\n            refMol=mol_ref,\n            prbCrippenContribs=crippen_contrib_probes[i],\n            refCrippenContribs=crippen_contrib_ref,\n            prbCid=conformer_id,\n            refCid=conformer_id,\n            maxIters=50,\n        )\n        crippenO3A.Align()\n\n        scores.append(crippenO3A.Score())\n\n    scores = np.array(scores)\n\n    return mols, scores\n</code></pre>"},{"location":"api/molfeat.utils.html#molfeat.utils.commons.concat_dict","title":"<code>concat_dict(prop_dict, new_name, order=None)</code>","text":"<p>Concat properties in dict into a single key dict</p> <p>Parameters:</p> Name Type Description Default <code>prop_dict</code> <code>dict</code> <p>Input dict of property names and their computed values</p> required <code>new_name</code> <code>str</code> <p>new name under which the concatenated property dict will be returned</p> required <code>order</code> <code>Optional[Iterable[str]]</code> <p>Optional list of key that specifies the order in which concatenation should be done. Sorting list by default</p> <code>None</code> <p>Returns:</p> Name Type Description <code>dict</code> <p>dictionary of concatenated output values with a single key corresponding to new_name</p> Source code in <code>molfeat/utils/commons.py</code> <pre><code>def concat_dict(prop_dict: dict, new_name: str, order: Optional[Iterable[str]] = None):\n\"\"\"Concat properties in dict into a single key dict\n\n    Args:\n        prop_dict (dict): Input dict of property names and their computed values\n        new_name (str): new name under which the concatenated property dict will be returned\n        order: Optional list of key that specifies the order in which concatenation should be done. Sorting list by default\n\n    Returns:\n        dict: dictionary of concatenated output values with a single key corresponding to new_name\n    \"\"\"\n    if not order:\n        order = list(sorted(prop_dict.keys()))\n\n    if len(order) &gt; 0:\n        concatenated_val = np.concatenate([prop_dict[x] for x in order], axis=1)\n        output_dict = {new_name: concatenated_val}\n    return output_dict\n</code></pre>"},{"location":"api/molfeat.utils.html#molfeat.utils.commons.ensure_picklable","title":"<code>ensure_picklable(fn)</code>","text":"<p>Ensure a function is picklable</p> <p>Parameters:</p> Name Type Description Default <code>fn</code> <code>Callable</code> <p>function to be pickled</p> required Source code in <code>molfeat/utils/commons.py</code> <pre><code>def ensure_picklable(fn: Callable):\n\"\"\"Ensure a function is picklable\n\n    Args:\n        fn: function to be pickled\n    \"\"\"\n    if inspect.isfunction(fn) and fn.__name__ == \"&lt;lambda&gt;\":\n        return wrap_non_picklable_objects(fn)\n    return fn\n</code></pre>"},{"location":"api/molfeat.utils.html#molfeat.utils.commons.filter_arguments","title":"<code>filter_arguments(fn, params)</code>","text":"<p>Filter the argument of a function to only retain the valid ones</p> <p>Parameters:</p> Name Type Description Default <code>fn</code> <code>Callable</code> <p>Function for which arguments will be checked</p> required <code>params</code> <code>dict</code> <p>key-val dictionary of arguments to pass to the input function</p> required <p>Returns:</p> Name Type Description <code>params_filtered</code> <code>dict</code> <p>dict of filtered arguments for the function</p> Source code in <code>molfeat/utils/commons.py</code> <pre><code>def filter_arguments(fn: Callable, params: dict):\n\"\"\"Filter the argument of a function to only retain the valid ones\n\n    Args:\n        fn: Function for which arguments will be checked\n        params: key-val dictionary of arguments to pass to the input function\n\n    Returns:\n        params_filtered (dict): dict of filtered arguments for the function\n    \"\"\"\n    accepted_dict = inspect.signature(fn).parameters\n    accepted_list = []\n    for key in accepted_dict.keys():\n        param = str(accepted_dict[key])\n        if param[0] != \"*\":\n            accepted_list.append(param)\n    params_filtered = {key: params[key] for key in list(set(accepted_list) &amp; set(params.keys()))}\n    return params_filtered\n</code></pre>"},{"location":"api/molfeat.utils.html#molfeat.utils.commons.fn_to_hex","title":"<code>fn_to_hex(fn)</code>","text":"<p>Pickle an object and return its hex representation</p> <p>Parameters:</p> Name Type Description Default <code>fn</code> <p>object to pickle</p> required <p>Returns:</p> Name Type Description <code>str</code> <p>hex representation of object</p> Source code in <code>molfeat/utils/commons.py</code> <pre><code>def fn_to_hex(fn):\n\"\"\"Pickle an object and return its hex representation\n\n    Args:\n        fn: object to pickle\n\n    Returns:\n        str: hex representation of object\n    \"\"\"\n    bytes_str = pickle.dumps(ensure_picklable(fn))\n    return bytes_str.hex()\n</code></pre>"},{"location":"api/molfeat.utils.html#molfeat.utils.commons.fold_count_fp","title":"<code>fold_count_fp(fp, dim=2 ** 10, binary=False)</code>","text":"<p>Fast folding of a count fingerprint to the specified dimension</p> <p>Parameters:</p> Name Type Description Default <code>fp</code> <code>Iterable</code> <p>iterable fingerprint</p> required <code>dim</code> <code>int</code> <p>dimension of the folded array if not provided. Defaults to 2**10.</p> <code>2 ** 10</code> <code>binary</code> <code>bool</code> <p>whether to fold into a binary array or take use a count vector</p> <code>False</code> <p>Returns:</p> Name Type Description <code>folded</code> <p>returns folded array to the provided dimension</p> Source code in <code>molfeat/utils/commons.py</code> <pre><code>def fold_count_fp(fp: Iterable, dim: int = 2**10, binary: bool = False):\n\"\"\"Fast folding of a count fingerprint to the specified dimension\n\n    Args:\n        fp: iterable fingerprint\n        dim: dimension of the folded array if not provided. Defaults to 2**10.\n        binary: whether to fold into a binary array or take use a count vector\n\n    Returns:\n        folded: returns folded array to the provided dimension\n    \"\"\"\n    if hasattr(fp, \"GetNonzeroElements\"):\n        tmp = fp.GetNonzeroElements()\n    elif hasattr(fp, \"GetOnBits\"):\n        # try to get the dict of onbit\n        on_bits = fp.GetOnBits()\n        tmp = dict(zip(on_bits, np.ones(len(on_bits))))\n    else:\n        raise ValueError(f\"Format {type(fp)} is not supported\")\n    out = (\n        coo_matrix(\n            (\n                list(tmp.values()),\n                (np.repeat(0, len(tmp)), [i % dim for i in tmp.keys()]),\n            ),\n            shape=(1, dim),\n        )\n        .toarray()\n        .flatten()\n    )\n    if binary:\n        out = np.clip(out, a_min=0, a_max=1)\n    return out\n</code></pre>"},{"location":"api/molfeat.utils.html#molfeat.utils.commons.get_class_name","title":"<code>get_class_name(cls)</code>","text":"<p>Get class full name</p> <p>Parameters:</p> Name Type Description Default <code>cls</code> <code>Type</code> <p>name of the class</p> required Source code in <code>molfeat/utils/commons.py</code> <pre><code>def get_class_name(cls: Type):\n\"\"\"Get class full name\n\n    Args:\n        cls: name of the class\n    \"\"\"\n    module = cls.__module__\n    name = cls.__qualname__\n    if module is not None and module != \"__builtin__\":\n        name = module + \".\" + name\n    return name\n</code></pre>"},{"location":"api/molfeat.utils.html#molfeat.utils.commons.hex_to_fn","title":"<code>hex_to_fn(hex)</code>","text":"<p>Load a hex string as a callable. Raise error on fail</p> <p>Parameters:</p> Name Type Description Default <code>hex</code> <code>str</code> <p>hex string to load as a callable</p> required <p>Returns:</p> Name Type Description <code>callable</code> <p>callable loaded from the hex string</p> Source code in <code>molfeat/utils/commons.py</code> <pre><code>def hex_to_fn(hex: str):\n\"\"\"Load a hex string as a callable. Raise error on fail\n\n    Args:\n        hex: hex string to load as a callable\n\n    Returns:\n        callable: callable loaded from the hex string\n    \"\"\"\n    # EN: pickling with pickle is probably faster\n    fn = pickle.loads(bytes.fromhex(hex))\n    return fn\n</code></pre>"},{"location":"api/molfeat.utils.html#molfeat.utils.commons.one_hot_encoding","title":"<code>one_hot_encoding(val, allowable_set, encode_unknown=False, dtype=int)</code>","text":"<p>Converts a single value to a one-hot vector.</p> <p>Parameters:</p> Name Type Description Default <code>val</code> <code>int</code> <p>class to be converted into a one hot vector</p> required <code>allowable_set</code> <code>Iterable</code> <p>a list or 1D array of allowed choices for val to take</p> required <code>dtype</code> <code>Callable</code> <p>data type of the the return. Default = int.</p> <code>int</code> <code>encode_unknown</code> <code>bool</code> <p>whether to map inputs not in allowable set to an additional last element.</p> <code>False</code> <p>Returns:</p> Type Description <p>A numpy 1D array of length len(allowable_set) + 1</p> Source code in <code>molfeat/utils/commons.py</code> <pre><code>def one_hot_encoding(\n    val: int,\n    allowable_set: Iterable,\n    encode_unknown: bool = False,\n    dtype: Callable = int,\n):\nr\"\"\"Converts a single value to a one-hot vector.\n\n    Args:\n        val: class to be converted into a one hot vector\n        allowable_set: a list or 1D array of allowed choices for val to take\n        dtype: data type of the the return. Default = int.\n        encode_unknown: whether to map inputs not in allowable set to an additional last element.\n\n    Returns:\n        A numpy 1D array of length len(allowable_set) + 1\n    \"\"\"\n\n    encoding = np.zeros(len(allowable_set) + int(encode_unknown), dtype=dtype)\n    # not using index of, in case, someone fuck up\n    # and there are duplicates in the allowed choices\n    for i, v in enumerate(allowable_set):\n        if v == val:\n            encoding[i] = 1\n    if np.sum(encoding) == 0 and encode_unknown:  # aka not found\n        encoding[-1] = 1\n    return encoding\n</code></pre>"},{"location":"api/molfeat.utils.html#molfeat.utils.commons.pack_bits","title":"<code>pack_bits(obj, protocol=4)</code>","text":"<p>Pack an object into a bits representation</p> <p>Parameters:</p> Name Type Description Default <code>obj</code> <p>object to pack</p> required <p>Returns:</p> Name Type Description <code>bytes</code> <p>byte-packed version of object</p> Source code in <code>molfeat/utils/commons.py</code> <pre><code>def pack_bits(obj, protocol=4):\n\"\"\"Pack an object into a bits representation\n\n    Args:\n        obj: object to pack\n\n    Returns:\n        bytes: byte-packed version of object\n    \"\"\"\n    return pickle.dumps(obj, protocol=protocol)\n</code></pre>"},{"location":"api/molfeat.utils.html#molfeat.utils.commons.pack_graph","title":"<code>pack_graph(batch_G, batch_x)</code>","text":"<p>Pack a batch of graph and atom features into a single graph</p> <p>Parameters:</p> Name Type Description Default <code>batch_G</code> <code>List[torch.FloatTensor]</code> <p>List of adjacency graph, each of size (n_i, n_i).</p> required <code>batch_x</code> <code>List[torch.FloatTensor]</code> <p>List of atom feature matrices, each of size (n_i, F), F being the number of features</p> required <p>Returns:</p> Type Description <p>new_batch_G, new_batch_x: torch.LongTensor 2D, torch.Tensor 2D This tuple represents a new arbitrary graph that contains the whole batch, and the corresponding atom feature matrix. new_batch_G has a size (N, N), with :math:<code>N = \\sum_i n_i</code>, while new_batch_x has size (N,D)</p> Source code in <code>molfeat/utils/commons.py</code> <pre><code>def pack_graph(\n    batch_G: List[torch.FloatTensor],\n    batch_x: List[torch.FloatTensor],\n):\nr\"\"\"\n    Pack a batch of graph and atom features into a single graph\n\n    Args:\n        batch_G: List of adjacency graph, each of size (n_i, n_i).\n        batch_x: List of atom feature matrices, each of size (n_i, F), F being the number of features\n\n    Returns:\n        new_batch_G, new_batch_x: torch.LongTensor 2D, torch.Tensor 2D\n            This tuple represents a new arbitrary graph that contains the whole batch,\n            and the corresponding atom feature matrix. new_batch_G has a size (N, N), with :math:`N = \\sum_i n_i`,\n            while new_batch_x has size (N,D)\n    \"\"\"\n\n    new_batch_x = torch.cat(tuple(batch_x), dim=0)\n    n_neigb = new_batch_x.shape[0]\n    # should be on the same device\n    new_batch_G = batch_G[0].new_zeros((n_neigb, n_neigb))\n    cur_ind = 0\n    for g in batch_G:\n        g_size = g.shape[0] + cur_ind\n        new_batch_G[cur_ind:g_size, cur_ind:g_size] = g\n        cur_ind = g_size\n    return new_batch_G, new_batch_x\n</code></pre>"},{"location":"api/molfeat.utils.html#molfeat.utils.commons.requires_conformer","title":"<code>requires_conformer(calculator)</code>","text":"<p>Decorator for any descriptor calculator that requires conformers</p> Source code in <code>molfeat/utils/commons.py</code> <pre><code>def requires_conformer(calculator: Callable):\n\"\"\"Decorator for any descriptor calculator that requires conformers\"\"\"\n\n    # this is a method or __call__\n    if inspect.getfullargspec(calculator).args[0] == \"self\":\n\n        @functools.wraps(calculator)\n        def calculator_wrapper(ref, mol, *args, **kwargs):\n            mol = dm.to_mol(mol)\n            if mol.GetNumConformers() &lt; 1:\n                raise ValueError(\"Expected a molecule with conformers information.\")\n            return calculator(ref, mol, *args, **kwargs)\n\n    else:\n\n        @functools.wraps(calculator)\n        def calculator_wrapper(mol, *args, **kwargs):\n            mol = dm.to_mol(mol)\n            if mol.GetNumConformers() &lt; 1:\n                raise ValueError(\"Expected a molecule with conformers information.\")\n            return calculator(mol, *args, **kwargs)\n\n    return calculator_wrapper\n</code></pre>"},{"location":"api/molfeat.utils.html#molfeat.utils.commons.requires_standardization","title":"<code>requires_standardization(calculator=None, *, disconnect_metals=True, remove_salt=True, **standardize_kwargs)</code>","text":"<p>Decorator for any descriptor calculator that required standardization of the molecules</p> <p>Parameters:</p> Name Type Description Default <code>calculator</code> <code>Callable</code> <p>calculator to wrap</p> <code>None</code> <code>disconnect_metals</code> <code>bool</code> <p>whether to force metal disconnection</p> <code>True</code> <code>remove_salt</code> <code>bool</code> <p>whether to remove salt from the molecule</p> <code>True</code> Source code in <code>molfeat/utils/commons.py</code> <pre><code>def requires_standardization(\n    calculator: Callable = None,\n    *,\n    disconnect_metals: bool = True,\n    remove_salt: bool = True,\n    **standardize_kwargs,\n):\n\"\"\"Decorator for any descriptor calculator that required standardization of the molecules\n    Args:\n        calculator: calculator to wrap\n        disconnect_metals: whether to force metal disconnection\n        remove_salt: whether to remove salt from the molecule\n    \"\"\"\n\n    def _standardize_mol(calculator):\n        @functools.wraps(calculator)\n        def wrapped_function(mol, *args, **kwargs):\n            mol = _clean_mol_for_descriptors(\n                mol,\n                disconnect_metals=disconnect_metals,\n                remove_salt=remove_salt,\n                **standardize_kwargs,\n            )\n            return calculator(mol, *args, **kwargs)\n\n        @functools.wraps(calculator)\n        def class_wrapped_function(ref, mol, *args, **kwargs):\n            if not getattr(ref, \"do_not_standardize\", False):\n                mol = _clean_mol_for_descriptors(\n                    mol,\n                    disconnect_metals=disconnect_metals,\n                    remove_salt=remove_salt,\n                    **standardize_kwargs,\n                )\n            return calculator(ref, mol, *args, **kwargs)\n\n        if inspect.getfullargspec(calculator).args[0] == \"self\":\n            return class_wrapped_function\n        return wrapped_function\n\n    if calculator is not None:\n        return _standardize_mol(calculator)\n    return _standardize_mol\n</code></pre>"},{"location":"api/molfeat.utils.html#molfeat.utils.commons.sha256sum","title":"<code>sha256sum(filepath)</code>","text":"<p>Return the sha256 sum hash of a file or a directory</p> <p>Parameters:</p> Name Type Description Default <code>filepath</code> <code>Union[str, os.PathLike]</code> <p>The path to the file to compute the MD5 hash on.</p> required Source code in <code>molfeat/utils/commons.py</code> <pre><code>def sha256sum(filepath: Union[str, os.PathLike]):\n\"\"\"Return the sha256 sum hash of a file or a directory\n\n    Args:\n        filepath: The path to the file to compute the MD5 hash on.\n    \"\"\"\n    if dm.fs.is_dir(filepath):\n        files = list(dm.fs.glob(os.path.join(filepath, \"**\", \"*\")))\n    else:\n        files = [filepath]\n    file_hash = hashlib.sha256()\n    for filepath in files:\n        with fsspec.open(filepath) as f:\n            file_hash.update(f.read())  # type: ignore\n    file_hash = file_hash.hexdigest()\n    return file_hash\n</code></pre>"},{"location":"api/molfeat.utils.html#molfeat.utils.commons.unpack_bits","title":"<code>unpack_bits(bvalues)</code>","text":"<p>Pack an object into a bits representation</p> <p>Parameters:</p> Name Type Description Default <code>bvalues</code> <p>bytes to be unpacked</p> required <p>Returns:</p> Name Type Description <code>obj</code> <p>object that was packed</p> Source code in <code>molfeat/utils/commons.py</code> <pre><code>def unpack_bits(bvalues):\n\"\"\"Pack an object into a bits representation\n\n    Args:\n        bvalues: bytes to be unpacked\n\n    Returns:\n        obj: object that was packed\n    \"\"\"\n    return pickle.loads(bvalues)\n</code></pre>"},{"location":"api/molfeat.utils.html#require-module","title":"Require module","text":""},{"location":"api/molfeat.utils.html#molfeat.utils.requires.check","title":"<code>check(module, min_version=None, max_version=None)</code>  <code>cached</code>","text":"<p>Check if module is available for import</p> <p>Parameters:</p> Name Type Description Default <code>module</code> <code>str</code> <p>name of the module to check</p> required <code>min_version</code> <code>Optional[str]</code> <p>optional minimum version string to check</p> <code>None</code> <code>max_version</code> <code>Optional[str]</code> <p>optional maximum version string to check</p> <code>None</code> Source code in <code>molfeat/utils/requires.py</code> <pre><code>@functools.lru_cache()\ndef check(module: str, min_version: Optional[str] = None, max_version: Optional[str] = None):\n\"\"\"Check if module is available for import\n\n    Args:\n        module: name of the module to check\n        min_version: optional minimum version string to check\n        max_version: optional maximum version string to check\n    \"\"\"\n    imported_module = None\n    version = None\n    min_version = pkg_version.parse(min_version) if min_version is not None else None\n    max_version = pkg_version.parse(max_version) if max_version is not None else None\n    try:\n        imported_module = importlib.import_module(module)\n        version = getattr(imported_module, \"__version__\", None)\n    except ImportError as _:\n        return False\n    if version is not None:\n        try:\n            version = pkg_version.parse(version)\n        except pkg_version.InvalidVersion as _:\n            # EN: packaging v22 removed LegacyVersion which has consequences\n            version = None\n    return version is None or (\n        (min_version is None or version &gt;= min_version)\n        and (max_version is None or version &lt;= max_version)\n    )\n</code></pre>"},{"location":"api/molfeat.utils.html#molfeat.utils.requires.mock","title":"<code>mock(name)</code>","text":"<p>Mock a function to raise an error</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>name of the module or function to mock</p> required Source code in <code>molfeat/utils/requires.py</code> <pre><code>def mock(name: str):\n\"\"\"Mock a function to raise an error\n\n    Args:\n        name: name of the module or function to mock\n\n    \"\"\"\n    return lambda: (_ for _ in ()).throw(Exception(f\"{name} is not available\"))\n</code></pre>"},{"location":"api/molfeat.utils.html#datatype-conversion","title":"Datatype Conversion","text":""},{"location":"api/molfeat.utils.html#molfeat.utils.datatype.cast","title":"<code>cast(fp, dtype=None, columns=None)</code>","text":"<p>Change the datatype of a list of input array</p> <p>Parameters:</p> Name Type Description Default <code>fp</code> <code>array</code> <p>Input array to cast (2D)</p> required <code>dtype</code> <code>Optional[Callable]</code> <p>datatype to cast to</p> <code>None</code> <code>columns</code> <code>Optional[Iterable]</code> <p>column names for pandas dataframe</p> <code>None</code> Source code in <code>molfeat/utils/datatype.py</code> <pre><code>def cast(fp, dtype: Optional[Callable] = None, columns: Optional[Iterable] = None):\n\"\"\"Change the datatype of a list of input array\n\n    Args:\n        fp (array): Input array to cast (2D)\n        dtype: datatype to cast to\n        columns: column names for pandas dataframe\n    \"\"\"\n    if fp is None or dtype is None:\n        return fp\n    if isinstance(fp, dict):\n        fp = {k: cast(v, dtype=dtype, columns=columns) for k, v in fp.items()}\n    elif dtype in [tuple, list]:\n        fp = list(fp)\n    elif is_dtype_numpy(dtype):\n        if isinstance(fp, (list, tuple)) and not np.isscalar(fp[0]):\n            fp = [to_numpy(fp_i, dtype=dtype) for fp_i in fp]\n            fp = to_numpy(fp, dtype=dtype)\n        else:\n            fp = to_numpy(fp, dtype=dtype)\n    elif is_dtype_tensor(dtype):\n        if isinstance(fp, (list, tuple)) and not np.isscalar(fp[0]):\n            tmp_fp = to_numpy(fp[0])\n            if len(tmp_fp.shape) &gt; 1:\n                fp = torch.cat([to_tensor(fp_i, dtype=dtype) for fp_i in fp])\n            else:\n                fp = torch.stack([to_tensor(fp_i, dtype=dtype) for fp_i in fp])\n        else:\n            fp = to_tensor(fp, dtype=dtype)\n    elif dtype in [pd.DataFrame, \"dataframe\", \"pandas\", \"df\"]:\n        fp = [feat if feat is not None else [] for feat in fp]\n        fp = pd.DataFrame(fp)\n        if columns is not None:\n            fp.columns = columns\n    elif is_dtype_bitvect(dtype):\n        fp = [to_fp(feat, sparse=(dtype == SparseBitVect)) for feat in fp]\n    else:\n        raise TypeError(\"The type {} is not supported\".format(dtype))\n    return fp\n</code></pre>"},{"location":"api/molfeat.utils.html#molfeat.utils.datatype.ensure_explicit","title":"<code>ensure_explicit(x)</code>","text":"<p>Ensure that the input vector is not a sparse bit vector</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>Union[SparseBitVect, ExplicitBitVect]</code> <p>input vector</p> required <p>Returns:</p> Name Type Description <code>converted</code> <p>ExplicitBitVect if input is SparseBitVec, else input as is</p> Source code in <code>molfeat/utils/datatype.py</code> <pre><code>def ensure_explicit(x: Union[SparseBitVect, ExplicitBitVect]):\n\"\"\"Ensure that the input vector is not a sparse bit vector\n\n    Args:\n        x: input vector\n\n    Returns:\n        converted: ExplicitBitVect if input is SparseBitVec, else input as is\n    \"\"\"\n    if isinstance(x, SparseBitVect):\n        x = ConvertToExplicit(x)\n    return x\n</code></pre>"},{"location":"api/molfeat.utils.html#molfeat.utils.datatype.is_dtype_bitvect","title":"<code>is_dtype_bitvect(dtype)</code>","text":"<p>Verify if the dtype is a bitvect type</p> <p>Parameters:</p> Name Type Description Default <code>dtype</code> <code>callable</code> <p>The dtype of a value. E.g. np.int32, str, torch.float</p> required <p>Returns:</p> Type Description <p>A boolean saying if the dtype is a torch dtype</p> Source code in <code>molfeat/utils/datatype.py</code> <pre><code>def is_dtype_bitvect(dtype):\n\"\"\"\n    Verify if the dtype is a bitvect type\n\n    Args:\n        dtype (callable): The dtype of a value. E.g. np.int32, str, torch.float\n\n    Returns:\n        A boolean saying if the dtype is a torch dtype\n    \"\"\"\n    return dtype in [ExplicitBitVect, SparseBitVect] or isinstance(\n        dtype, (ExplicitBitVect, SparseBitVect)\n    )\n</code></pre>"},{"location":"api/molfeat.utils.html#molfeat.utils.datatype.is_dtype_numpy","title":"<code>is_dtype_numpy(dtype)</code>","text":"<p>Verify if the dtype is a numpy dtype</p> <p>Parameters:</p> Name Type Description Default <code>dtype</code> <code>callable</code> <p>The dtype of a value. E.g. np.int32, str, torch.float</p> required <p>Returns     A boolean saying if the dtype is a numpy dtype</p> Source code in <code>molfeat/utils/datatype.py</code> <pre><code>def is_dtype_numpy(dtype):\nr\"\"\"\n    Verify if the dtype is a numpy dtype\n\n    Args:\n        dtype (callable): The dtype of a value. E.g. np.int32, str, torch.float\n    Returns\n        A boolean saying if the dtype is a numpy dtype\n    \"\"\"\n    is_torch = is_dtype_tensor(dtype)\n    is_num = dtype in (int, float, complex)\n    if hasattr(dtype, \"__module__\"):\n        is_numpy = dtype.__module__ == \"numpy\"\n    else:\n        is_numpy = False\n    return (is_num or is_numpy) and not is_torch\n</code></pre>"},{"location":"api/molfeat.utils.html#molfeat.utils.datatype.is_dtype_tensor","title":"<code>is_dtype_tensor(dtype)</code>","text":"<p>Verify if the dtype is a torch dtype</p> <p>Parameters:</p> Name Type Description Default <code>dtype</code> <code>callable</code> <p>The dtype of a value. E.g. np.int32, str, torch.float</p> required <p>Returns:</p> Type Description <p>A boolean saying if the dtype is a torch dtype</p> Source code in <code>molfeat/utils/datatype.py</code> <pre><code>def is_dtype_tensor(dtype):\nr\"\"\"\n    Verify if the dtype is a torch dtype\n\n    Args:\n        dtype (callable): The dtype of a value. E.g. np.int32, str, torch.float\n\n    Returns:\n        A boolean saying if the dtype is a torch dtype\n    \"\"\"\n    return isinstance(dtype, torch.dtype) or (dtype == torch.Tensor)\n</code></pre>"},{"location":"api/molfeat.utils.html#molfeat.utils.datatype.is_null","title":"<code>is_null(obj)</code>","text":"<p>Check if an obj is null (nan, None or array of nan)</p> <p>Parameters:</p> Name Type Description Default <code>is_null</code> <code>bool</code> <p>whether the input obj is null</p> required Source code in <code>molfeat/utils/datatype.py</code> <pre><code>def is_null(obj):\n\"\"\"Check if an obj is null (nan, None or array of nan)\n\n    Args:\n        is_null (bool): whether the input obj is null\n    \"\"\"\n    array_nan = False\n    all_none = False\n    try:\n        tmp = to_numpy(obj)\n        array_nan = np.all(np.isnan(tmp))\n    except:\n        pass\n    try:\n        all_none = all(x is None for x in obj)\n    except:\n        pass\n    return obj is None or all_none or array_nan\n</code></pre>"},{"location":"api/molfeat.utils.html#molfeat.utils.datatype.to_fp","title":"<code>to_fp(arr, bitvect=True, sparse=False)</code>","text":"<p>Convert numpy array to fingerprint</p> <p>Parameters:</p> Name Type Description Default <code>arr</code> <code>np.ndarray</code> <p>Numpy array to convert to bitvec</p> required <code>bitvect</code> <code>bool</code> <p>whether to assume the data is a bitvect or intvect</p> <code>True</code> <code>sparse</code> <code>bool</code> <p>whether to convert to sparse bit vect</p> <code>False</code> <p>Returns:</p> Name Type Description <code>fp</code> <p>RDKit bit vector</p> Source code in <code>molfeat/utils/datatype.py</code> <pre><code>def to_fp(arr: np.ndarray, bitvect: bool = True, sparse: bool = False):\n\"\"\"Convert numpy array to fingerprint\n\n    Args:\n        arr: Numpy array to convert to bitvec\n        bitvect: whether to assume the data is a bitvect or intvect\n        sparse: whether to convert to sparse bit vect\n\n    Returns:\n        fp: RDKit bit vector\n    \"\"\"\n    if not isinstance(arr, list) and arr.ndim &gt; 1:\n        raise ValueError(\"Expect a 1D array as input !\")\n    if not bitvect:\n        fp = UIntSparseIntVect(len(arr))\n        for ix, value in enumerate(arr):\n            fp[ix] = int(value)\n    elif sparse:\n        onbits = np.where(arr == 1)[0].tolist()\n        fp = SparseBitVect(arr.shape[0])\n        fp.SetBitsFromList(onbits)\n    else:\n        arr = np.asarray(arr)\n        bitstring = \"\".join(arr.astype(str))\n        fp = CreateFromBitString(bitstring)\n    return fp\n</code></pre>"},{"location":"api/molfeat.utils.html#molfeat.utils.datatype.to_numpy","title":"<code>to_numpy(x, copy=False, dtype=None)</code>","text":"<p>Convert a tensor to numpy array.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>Object</code> <p>The Python object to convert.</p> required <code>copy</code> <code>bool</code> <p>Whether to copy the memory. By default, if a tensor is already on CPU, the Numpy array will be a view of the tensor.</p> <code>False</code> <code>dtype</code> <code>callable</code> <p>Optional type to cast the values to</p> <code>None</code> <p>Returns:</p> Type Description <p>A new Python object with the same structure as <code>x</code> but where the tensors are now Numpy</p> <p>arrays. Not supported type are left as reference in the new object.</p> Source code in <code>molfeat/utils/datatype.py</code> <pre><code>def to_numpy(x, copy=False, dtype=None):\nr\"\"\"\n    Convert a tensor to numpy array.\n\n    Args:\n        x (Object): The Python object to convert.\n        copy (bool, optional): Whether to copy the memory.\n            By default, if a tensor is already on CPU, the\n            Numpy array will be a view of the tensor.\n        dtype (callable, optional): Optional type to cast the values to\n\n    Returns:\n        A new Python object with the same structure as `x` but where the tensors are now Numpy\n        arrays. Not supported type are left as reference in the new object.\n    \"\"\"\n    if isinstance(x, (list, tuple, np.ndarray)) and torch.is_tensor(x[0]):\n        x = [to_numpy(xi, copy=copy, dtype=dtype) for xi in x]\n    if isinstance(x, np.ndarray):\n        pass\n    elif torch.is_tensor(x):\n        x = x.cpu().detach().numpy()\n        x = x.copy()\n    elif isinstance(x, SparseBitVect):\n        tmp = np.zeros(x.GetNumBits(), dtype=int)\n        for n_bit in list(x.GetOnBits()):\n            tmp[n_bit] = 1\n        x = tmp\n    elif isinstance(x, ExplicitBitVect):\n        x = dm.fp_to_array(x)\n    elif hasattr(x, \"GetNonzeroElements\"):\n        # one of the other rdkit type\n        tmp = np.zeros(x.GetLength())\n        bit_idx, values = np.array(list(x.GetNonzeroElements().items())).T\n        tmp[bit_idx] = values\n        x = tmp\n    else:\n        x = np.asarray(x)\n    if dtype is not None:\n        x = x.astype(dtype)\n    return x\n</code></pre>"},{"location":"api/molfeat.utils.html#molfeat.utils.datatype.to_sparse","title":"<code>to_sparse(x, dtype=None)</code>","text":"<p>Converts dense tensor x to sparse format</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>torch.Tensor</code> <p>tensor to convert</p> required <code>dtype</code> <code>torch.dtype</code> <p>Enforces new data type for the output. If None, it keeps the same datatype as x (Default: None)</p> <code>None</code> <p>Returns:</p> Type Description <p>new torch.sparse Tensor</p> Source code in <code>molfeat/utils/datatype.py</code> <pre><code>def to_sparse(x, dtype=None):\nr\"\"\"\n    Converts dense tensor x to sparse format\n\n    Args:\n        x (torch.Tensor): tensor to convert\n        dtype (torch.dtype, optional): Enforces new data type for the output.\n            If None, it keeps the same datatype as x (Default: None)\n    Returns:\n        new torch.sparse Tensor\n    \"\"\"\n\n    if dtype is not None:\n        x = x.type(dtype)\n\n    x_typename = torch.typename(x).split(\".\")[-1]\n    sparse_tensortype = getattr(torch.sparse, x_typename)\n\n    indices = torch.nonzero(x)\n    if len(indices.shape) == 0:  # if all elements are zeros\n        return sparse_tensortype(*x.shape)\n    indices = indices.t()\n    values = x[tuple(indices[i] for i in range(indices.shape[0]))]\n    return sparse_tensortype(indices, values, x.size())\n</code></pre>"},{"location":"api/molfeat.utils.html#molfeat.utils.datatype.to_tensor","title":"<code>to_tensor(x, gpu=False, dtype=None)</code>","text":"<p>Convert a numpy array to tensor. The tensor type will be the same as the original array, unless specify otherwise</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>numpy.ndarray</code> <p>Numpy array to convert to tensor type</p> required <code>gpu</code> <code>bool optional</code> <p>Whether to move tensor to gpu. Default False</p> <code>False</code> <code>dtype</code> <code>torch.dtype</code> <p>Enforces new data type for the output</p> <code>None</code> <p>Returns:</p> Type Description <p>New torch.Tensor</p> Source code in <code>molfeat/utils/datatype.py</code> <pre><code>def to_tensor(x, gpu=False, dtype=None):\nr\"\"\"\n    Convert a numpy array to tensor. The tensor type will be\n    the same as the original array, unless specify otherwise\n\n    Args:\n        x (numpy.ndarray): Numpy array to convert to tensor type\n        gpu (bool optional): Whether to move tensor to gpu. Default False\n        dtype (torch.dtype, optional): Enforces new data type for the output\n\n    Returns:\n        New torch.Tensor\n    \"\"\"\n    if not torch.is_tensor(x):\n        try:\n            if torch.is_tensor(x[0]):\n                x = torch.stack(x)\n        except:\n            pass\n        x = torch.as_tensor(x)\n    if dtype is not None:\n        x = x.to(dtype=dtype)\n    if gpu and torch.cuda.is_available():\n        x = x.cuda()\n    return x\n</code></pre>"},{"location":"api/molfeat.utils.html#pooling","title":"Pooling","text":""},{"location":"api/molfeat.utils.html#molfeat.utils.pooler.BartPooler","title":"<code>BartPooler</code>","text":"<p>         Bases: <code>nn.Module</code></p> <p>Default Bart pooler as implemented in huggingface transformers The Bart pooling function focusing on the first token ([CLS]) to get a sentence representation.</p> Source code in <code>molfeat/utils/pooler.py</code> <pre><code>class BartPooler(nn.Module):\n\"\"\"\n    Default Bart pooler as implemented in huggingface transformers\n    The Bart pooling function focusing on the first token ([CLS]) to get a sentence representation.\n    \"\"\"\n\n    def __init__(self, config, **kwargs):\n        super().__init__()\n        self.config = config\n\n    def forward(\n        self, h: torch.Tensor, inputs: Optional[torch.Tensor] = None, **kwargs\n    ) -&gt; torch.Tensor:\n\"\"\"Forward pass of the pooling layer\n\n        Args:\n            h: hidden representation of the input sequence to pool over\n            inputs: inputs tokens to the bart underlying model\n\n        Returns:\n            pooled_output: pooled representation of the input sequence\n        \"\"\"\n        eos_mask = inputs.eq(self.config.get(\"eos_token_id\"))\n        if len(torch.unique_consecutive(eos_mask.sum(1))) &gt; 1:\n            raise ValueError(\"All examples must have the same number of &lt;eos&gt; tokens.\")\n        pooled_output = h[eos_mask, :].view(h.size(0), -1, h.size(-1))[:, -1, :]\n        return pooled_output\n</code></pre>"},{"location":"api/molfeat.utils.html#molfeat.utils.pooler.BartPooler.config","title":"<code>config = config</code>  <code>instance-attribute</code>","text":""},{"location":"api/molfeat.utils.html#molfeat.utils.pooler.BartPooler.__init__","title":"<code>__init__(config, **kwargs)</code>","text":"Source code in <code>molfeat/utils/pooler.py</code> <pre><code>def __init__(self, config, **kwargs):\n    super().__init__()\n    self.config = config\n</code></pre>"},{"location":"api/molfeat.utils.html#molfeat.utils.pooler.BartPooler.forward","title":"<code>forward(h, inputs=None, **kwargs)</code>","text":"<p>Forward pass of the pooling layer</p> <p>Parameters:</p> Name Type Description Default <code>h</code> <code>torch.Tensor</code> <p>hidden representation of the input sequence to pool over</p> required <code>inputs</code> <code>Optional[torch.Tensor]</code> <p>inputs tokens to the bart underlying model</p> <code>None</code> <p>Returns:</p> Name Type Description <code>pooled_output</code> <code>torch.Tensor</code> <p>pooled representation of the input sequence</p> Source code in <code>molfeat/utils/pooler.py</code> <pre><code>def forward(\n    self, h: torch.Tensor, inputs: Optional[torch.Tensor] = None, **kwargs\n) -&gt; torch.Tensor:\n\"\"\"Forward pass of the pooling layer\n\n    Args:\n        h: hidden representation of the input sequence to pool over\n        inputs: inputs tokens to the bart underlying model\n\n    Returns:\n        pooled_output: pooled representation of the input sequence\n    \"\"\"\n    eos_mask = inputs.eq(self.config.get(\"eos_token_id\"))\n    if len(torch.unique_consecutive(eos_mask.sum(1))) &gt; 1:\n        raise ValueError(\"All examples must have the same number of &lt;eos&gt; tokens.\")\n    pooled_output = h[eos_mask, :].view(h.size(0), -1, h.size(-1))[:, -1, :]\n    return pooled_output\n</code></pre>"},{"location":"api/molfeat.utils.html#molfeat.utils.pooler.BertPooler","title":"<code>BertPooler</code>","text":"<p>         Bases: <code>nn.Module</code></p> <p>Default Bert pooler as implemented in huggingface transformers The bert pooling function focuses on the first token ([CLS]) to get a sentence representation.</p> Source code in <code>molfeat/utils/pooler.py</code> <pre><code>class BertPooler(nn.Module):\n\"\"\"\n    Default Bert pooler as implemented in huggingface transformers\n    The bert pooling function focuses on the first token ([CLS]) to get a sentence representation.\n    \"\"\"\n\n    def __init__(\n        self,\n        config,\n        activation: Optional[Callable] = None,\n        random_seed: int = None,\n        **kwargs,\n    ):\n        super().__init__()\n        self.config = config\n        self.random_seed = random_seed\n        if self.random_seed is not None:\n            torch.manual_seed(self.random_seed)\n        hidden_size = config.get(\"hidden_size\")\n        self.dense = nn.Linear(hidden_size, hidden_size)\n        self.activation = nn.Tanh() if activation is None else activation\n\n    def forward(\n        self, h: torch.Tensor, inputs: Optional[torch.Tensor] = None, **kwargs\n    ) -&gt; torch.Tensor:\n\"\"\"Forward pass of the pooling layer\n\n        Args:\n            h: hidden representation of the input sequence to pool over\n            inputs: optional input that has been provided to the underlying bert model\n\n        Returns:\n            pooled_output: pooled representation of the input sequence\n        \"\"\"\n        # We \"pool\" the model by simply taking the hidden state corresponding\n        # to the first token.\n        first_token_tensor = h[:, 0]\n        pooled_output = self.dense(first_token_tensor)\n        pooled_output = self.activation(pooled_output)\n        return pooled_output\n</code></pre>"},{"location":"api/molfeat.utils.html#molfeat.utils.pooler.BertPooler.activation","title":"<code>activation = nn.Tanh() if activation is None else activation</code>  <code>instance-attribute</code>","text":""},{"location":"api/molfeat.utils.html#molfeat.utils.pooler.BertPooler.config","title":"<code>config = config</code>  <code>instance-attribute</code>","text":""},{"location":"api/molfeat.utils.html#molfeat.utils.pooler.BertPooler.dense","title":"<code>dense = nn.Linear(hidden_size, hidden_size)</code>  <code>instance-attribute</code>","text":""},{"location":"api/molfeat.utils.html#molfeat.utils.pooler.BertPooler.random_seed","title":"<code>random_seed = random_seed</code>  <code>instance-attribute</code>","text":""},{"location":"api/molfeat.utils.html#molfeat.utils.pooler.BertPooler.__init__","title":"<code>__init__(config, activation=None, random_seed=None, **kwargs)</code>","text":"Source code in <code>molfeat/utils/pooler.py</code> <pre><code>def __init__(\n    self,\n    config,\n    activation: Optional[Callable] = None,\n    random_seed: int = None,\n    **kwargs,\n):\n    super().__init__()\n    self.config = config\n    self.random_seed = random_seed\n    if self.random_seed is not None:\n        torch.manual_seed(self.random_seed)\n    hidden_size = config.get(\"hidden_size\")\n    self.dense = nn.Linear(hidden_size, hidden_size)\n    self.activation = nn.Tanh() if activation is None else activation\n</code></pre>"},{"location":"api/molfeat.utils.html#molfeat.utils.pooler.BertPooler.forward","title":"<code>forward(h, inputs=None, **kwargs)</code>","text":"<p>Forward pass of the pooling layer</p> <p>Parameters:</p> Name Type Description Default <code>h</code> <code>torch.Tensor</code> <p>hidden representation of the input sequence to pool over</p> required <code>inputs</code> <code>Optional[torch.Tensor]</code> <p>optional input that has been provided to the underlying bert model</p> <code>None</code> <p>Returns:</p> Name Type Description <code>pooled_output</code> <code>torch.Tensor</code> <p>pooled representation of the input sequence</p> Source code in <code>molfeat/utils/pooler.py</code> <pre><code>def forward(\n    self, h: torch.Tensor, inputs: Optional[torch.Tensor] = None, **kwargs\n) -&gt; torch.Tensor:\n\"\"\"Forward pass of the pooling layer\n\n    Args:\n        h: hidden representation of the input sequence to pool over\n        inputs: optional input that has been provided to the underlying bert model\n\n    Returns:\n        pooled_output: pooled representation of the input sequence\n    \"\"\"\n    # We \"pool\" the model by simply taking the hidden state corresponding\n    # to the first token.\n    first_token_tensor = h[:, 0]\n    pooled_output = self.dense(first_token_tensor)\n    pooled_output = self.activation(pooled_output)\n    return pooled_output\n</code></pre>"},{"location":"api/molfeat.utils.html#molfeat.utils.pooler.GPTPooler","title":"<code>GPTPooler</code>","text":"<p>         Bases: <code>nn.Module</code></p> <p>Default GPT pooler as implemented in huggingface transformers The Bart pooling function focusing on the first token ([CLS]) to get a sentence representation.</p> Source code in <code>molfeat/utils/pooler.py</code> <pre><code>class GPTPooler(nn.Module):\n\"\"\"\n    Default GPT pooler as implemented in huggingface transformers\n    The Bart pooling function focusing on the first token ([CLS]) to get a sentence representation.\n    \"\"\"\n\n    def __init__(self, config, **kwargs):\n        super().__init__()\n        self.config = config\n        self.pad_token_id = config.get(\"pad_token_id\")\n\n    def forward(\n        self, h: torch.Tensor, inputs: Optional[torch.Tensor] = None, **kwargs\n    ) -&gt; torch.Tensor:\n\"\"\"Forward pass of the pooling layer\n\n        Args:\n            h: hidden representation of the input sequence to pool over\n            inputs: inputs tokens to the bart underlying model\n\n        Returns:\n            pooled_output: pooled representation of the input sequence\n        \"\"\"\n        batch_size, sequence_lengths = inputs.shape[:2]\n\n        assert (\n            self.pad_token_id is not None or batch_size == 1\n        ), \"Cannot handle batch sizes &gt; 1 if no padding token is defined.\"\n        if self.pad_token_id is None:\n            sequence_lengths = -1\n            logger.warning(\n                f\"{self.__class__.__name__} will not detect padding tokens in `inputs_embeds`. Results may be \"\n                f\"unexpected if using padding tokens in conjunction with `inputs_embeds.`\"\n            )\n        else:\n            sequence_lengths = torch.ne(inputs, self.pad_token_id).sum(-1) - 1\n        pooled_output = h[torch.arange(batch_size), sequence_lengths]\n        return pooled_output\n</code></pre>"},{"location":"api/molfeat.utils.html#molfeat.utils.pooler.GPTPooler.config","title":"<code>config = config</code>  <code>instance-attribute</code>","text":""},{"location":"api/molfeat.utils.html#molfeat.utils.pooler.GPTPooler.pad_token_id","title":"<code>pad_token_id = config.get('pad_token_id')</code>  <code>instance-attribute</code>","text":""},{"location":"api/molfeat.utils.html#molfeat.utils.pooler.GPTPooler.__init__","title":"<code>__init__(config, **kwargs)</code>","text":"Source code in <code>molfeat/utils/pooler.py</code> <pre><code>def __init__(self, config, **kwargs):\n    super().__init__()\n    self.config = config\n    self.pad_token_id = config.get(\"pad_token_id\")\n</code></pre>"},{"location":"api/molfeat.utils.html#molfeat.utils.pooler.GPTPooler.forward","title":"<code>forward(h, inputs=None, **kwargs)</code>","text":"<p>Forward pass of the pooling layer</p> <p>Parameters:</p> Name Type Description Default <code>h</code> <code>torch.Tensor</code> <p>hidden representation of the input sequence to pool over</p> required <code>inputs</code> <code>Optional[torch.Tensor]</code> <p>inputs tokens to the bart underlying model</p> <code>None</code> <p>Returns:</p> Name Type Description <code>pooled_output</code> <code>torch.Tensor</code> <p>pooled representation of the input sequence</p> Source code in <code>molfeat/utils/pooler.py</code> <pre><code>def forward(\n    self, h: torch.Tensor, inputs: Optional[torch.Tensor] = None, **kwargs\n) -&gt; torch.Tensor:\n\"\"\"Forward pass of the pooling layer\n\n    Args:\n        h: hidden representation of the input sequence to pool over\n        inputs: inputs tokens to the bart underlying model\n\n    Returns:\n        pooled_output: pooled representation of the input sequence\n    \"\"\"\n    batch_size, sequence_lengths = inputs.shape[:2]\n\n    assert (\n        self.pad_token_id is not None or batch_size == 1\n    ), \"Cannot handle batch sizes &gt; 1 if no padding token is defined.\"\n    if self.pad_token_id is None:\n        sequence_lengths = -1\n        logger.warning(\n            f\"{self.__class__.__name__} will not detect padding tokens in `inputs_embeds`. Results may be \"\n            f\"unexpected if using padding tokens in conjunction with `inputs_embeds.`\"\n        )\n    else:\n        sequence_lengths = torch.ne(inputs, self.pad_token_id).sum(-1) - 1\n    pooled_output = h[torch.arange(batch_size), sequence_lengths]\n    return pooled_output\n</code></pre>"},{"location":"api/molfeat.utils.html#molfeat.utils.pooler.HFPooler","title":"<code>HFPooler</code>","text":"<p>         Bases: <code>nn.Module</code></p> <p>Default Pooler based on Molfeat Pooling layer</p> Source code in <code>molfeat/utils/pooler.py</code> <pre><code>class HFPooler(nn.Module):\n\"\"\"Default Pooler based on Molfeat Pooling layer\"\"\"\n\n    def __init__(self, config, dim: int = 1, name: str = \"mean\", **kwargs):\n        super().__init__()\n        self.config = config\n        self.pooling = Pooling(dim=dim, name=name)\n\n    def forward(\n        self,\n        h: torch.Tensor,\n        inputs: Optional[torch.Tensor] = None,\n        mask: Optional[torch.Tensor] = None,\n        ignore_padding: bool = True,\n        **kwargs,\n    ) -&gt; torch.Tensor:\n\"\"\"Forward pass of the pooling layer\n\n        Args:\n            h: hidden representation of the input sequence to pool over\n            inputs: optional input that has been provided to the underlying bert model\n            mask: optional mask to use in place of computing the padding specific mask\n            ignore_padding: whether to ignore padding tokens when pooling\n\n        Returns:\n            pooled_output: pooled representation of the input sequence\n        \"\"\"\n        if mask is None and ignore_padding:\n            mask = inputs.ne(self.config.get(\"pad_token_id\"))\n        if mask.ndim == 2:\n            mask = mask.unsqueeze(-1)  # B, S, 1\n        return self.pooling(h, indices=None, mask=mask)\n</code></pre>"},{"location":"api/molfeat.utils.html#molfeat.utils.pooler.HFPooler.config","title":"<code>config = config</code>  <code>instance-attribute</code>","text":""},{"location":"api/molfeat.utils.html#molfeat.utils.pooler.HFPooler.pooling","title":"<code>pooling = Pooling(dim=dim, name=name)</code>  <code>instance-attribute</code>","text":""},{"location":"api/molfeat.utils.html#molfeat.utils.pooler.HFPooler.__init__","title":"<code>__init__(config, dim=1, name='mean', **kwargs)</code>","text":"Source code in <code>molfeat/utils/pooler.py</code> <pre><code>def __init__(self, config, dim: int = 1, name: str = \"mean\", **kwargs):\n    super().__init__()\n    self.config = config\n    self.pooling = Pooling(dim=dim, name=name)\n</code></pre>"},{"location":"api/molfeat.utils.html#molfeat.utils.pooler.HFPooler.forward","title":"<code>forward(h, inputs=None, mask=None, ignore_padding=True, **kwargs)</code>","text":"<p>Forward pass of the pooling layer</p> <p>Parameters:</p> Name Type Description Default <code>h</code> <code>torch.Tensor</code> <p>hidden representation of the input sequence to pool over</p> required <code>inputs</code> <code>Optional[torch.Tensor]</code> <p>optional input that has been provided to the underlying bert model</p> <code>None</code> <code>mask</code> <code>Optional[torch.Tensor]</code> <p>optional mask to use in place of computing the padding specific mask</p> <code>None</code> <code>ignore_padding</code> <code>bool</code> <p>whether to ignore padding tokens when pooling</p> <code>True</code> <p>Returns:</p> Name Type Description <code>pooled_output</code> <code>torch.Tensor</code> <p>pooled representation of the input sequence</p> Source code in <code>molfeat/utils/pooler.py</code> <pre><code>def forward(\n    self,\n    h: torch.Tensor,\n    inputs: Optional[torch.Tensor] = None,\n    mask: Optional[torch.Tensor] = None,\n    ignore_padding: bool = True,\n    **kwargs,\n) -&gt; torch.Tensor:\n\"\"\"Forward pass of the pooling layer\n\n    Args:\n        h: hidden representation of the input sequence to pool over\n        inputs: optional input that has been provided to the underlying bert model\n        mask: optional mask to use in place of computing the padding specific mask\n        ignore_padding: whether to ignore padding tokens when pooling\n\n    Returns:\n        pooled_output: pooled representation of the input sequence\n    \"\"\"\n    if mask is None and ignore_padding:\n        mask = inputs.ne(self.config.get(\"pad_token_id\"))\n    if mask.ndim == 2:\n        mask = mask.unsqueeze(-1)  # B, S, 1\n    return self.pooling(h, indices=None, mask=mask)\n</code></pre>"},{"location":"api/molfeat.utils.html#molfeat.utils.pooler.Pooling","title":"<code>Pooling</code>","text":"<p>         Bases: <code>nn.Module</code></p> <p>Perform simple pooling on a tensor over one dimension</p> Source code in <code>molfeat/utils/pooler.py</code> <pre><code>class Pooling(nn.Module):\n\"\"\"\n    Perform simple pooling on a tensor over one dimension\n    \"\"\"\n\n    SUPPORTED_POOLING = [\"mean\", \"avg\", \"max\", \"sum\", \"clf\", None]\n\n    def __init__(self, dim: int = 1, name: str = \"max\"):\n\"\"\"\n        Pooling for embeddings\n\n        Args:\n            dim: dimension to pool over, default is 1\n            name: pooling type. Default is 'mean'.\n        \"\"\"\n        super().__init__()\n        self.dim = dim\n        self.name = name\n\n    def forward(self, x, indices: List[int] = None, mask: torch.Tensor = None) -&gt; torch.Tensor:\n\"\"\"Perform a pooling operation on the input tensor\n\n        Args:\n            x: input tensor to pull over\n            indices: Subset of indices to pool over. Defaults to None for all indices.\n            mask: binary mask to apply when pooling. Defaults to None, which is a matrix of 1.\n                If mask is provided it takes precedence over indices.\n        \"\"\"\n        x = torch.as_tensor(x)\n        if mask is None:\n            mask = torch.ones_like(x)\n        if indices is not None:\n            mask[:, indices] = 0\n        neg_inf = torch.finfo(x.dtype).min\n        if self.name == \"clf\":\n            return x[:, 0, :]\n        if self.name == \"max\":\n            tmp = x.masked_fill(mask, neg_inf)\n            return torch.max(tmp, dim=self.dim)[0]\n        elif self.name in [\"mean\", \"avg\"]:\n            return torch.sum(x * mask, dim=self.dim) / mask.sum(self.dim)\n        elif self.name == \"sum\":\n            return torch.sum(x * mask, dim=self.dim)\n        return x\n</code></pre>"},{"location":"api/molfeat.utils.html#molfeat.utils.pooler.Pooling.SUPPORTED_POOLING","title":"<code>SUPPORTED_POOLING = ['mean', 'avg', 'max', 'sum', 'clf', None]</code>  <code>class-attribute</code>","text":""},{"location":"api/molfeat.utils.html#molfeat.utils.pooler.Pooling.dim","title":"<code>dim = dim</code>  <code>instance-attribute</code>","text":""},{"location":"api/molfeat.utils.html#molfeat.utils.pooler.Pooling.name","title":"<code>name = name</code>  <code>instance-attribute</code>","text":""},{"location":"api/molfeat.utils.html#molfeat.utils.pooler.Pooling.__init__","title":"<code>__init__(dim=1, name='max')</code>","text":"<p>Pooling for embeddings</p> <p>Parameters:</p> Name Type Description Default <code>dim</code> <code>int</code> <p>dimension to pool over, default is 1</p> <code>1</code> <code>name</code> <code>str</code> <p>pooling type. Default is 'mean'.</p> <code>'max'</code> Source code in <code>molfeat/utils/pooler.py</code> <pre><code>def __init__(self, dim: int = 1, name: str = \"max\"):\n\"\"\"\n    Pooling for embeddings\n\n    Args:\n        dim: dimension to pool over, default is 1\n        name: pooling type. Default is 'mean'.\n    \"\"\"\n    super().__init__()\n    self.dim = dim\n    self.name = name\n</code></pre>"},{"location":"api/molfeat.utils.html#molfeat.utils.pooler.Pooling.forward","title":"<code>forward(x, indices=None, mask=None)</code>","text":"<p>Perform a pooling operation on the input tensor</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <p>input tensor to pull over</p> required <code>indices</code> <code>List[int]</code> <p>Subset of indices to pool over. Defaults to None for all indices.</p> <code>None</code> <code>mask</code> <code>torch.Tensor</code> <p>binary mask to apply when pooling. Defaults to None, which is a matrix of 1. If mask is provided it takes precedence over indices.</p> <code>None</code> Source code in <code>molfeat/utils/pooler.py</code> <pre><code>def forward(self, x, indices: List[int] = None, mask: torch.Tensor = None) -&gt; torch.Tensor:\n\"\"\"Perform a pooling operation on the input tensor\n\n    Args:\n        x: input tensor to pull over\n        indices: Subset of indices to pool over. Defaults to None for all indices.\n        mask: binary mask to apply when pooling. Defaults to None, which is a matrix of 1.\n            If mask is provided it takes precedence over indices.\n    \"\"\"\n    x = torch.as_tensor(x)\n    if mask is None:\n        mask = torch.ones_like(x)\n    if indices is not None:\n        mask[:, indices] = 0\n    neg_inf = torch.finfo(x.dtype).min\n    if self.name == \"clf\":\n        return x[:, 0, :]\n    if self.name == \"max\":\n        tmp = x.masked_fill(mask, neg_inf)\n        return torch.max(tmp, dim=self.dim)[0]\n    elif self.name in [\"mean\", \"avg\"]:\n        return torch.sum(x * mask, dim=self.dim) / mask.sum(self.dim)\n    elif self.name == \"sum\":\n        return torch.sum(x * mask, dim=self.dim)\n    return x\n</code></pre>"},{"location":"api/molfeat.utils.html#molfeat.utils.pooler.get_default_hgf_pooler","title":"<code>get_default_hgf_pooler(name, config, **kwargs)</code>","text":"<p>Get default HuggingFace pooler based on the model name</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <p>name of the model</p> required <code>config</code> <p>config of the model</p> required <code>kwargs</code> <p>additional arguments to pass to the pooler</p> <code>{}</code> Source code in <code>molfeat/utils/pooler.py</code> <pre><code>def get_default_hgf_pooler(name, config, **kwargs):\n\"\"\"Get default HuggingFace pooler based on the model name\n    Args:\n        name: name of the model\n        config: config of the model\n        kwargs: additional arguments to pass to the pooler\n    \"\"\"\n    model_type = config.get(\"model_type\", None)\n    if name not in [\"bert\", \"roberta\", \"gpt\", \"bart\"] and name in Pooling.SUPPORTED_POOLING[:-1]:\n        return HFPooler(config, name=name, **kwargs)\n    names = [name]\n    if model_type is not None:\n        names += [model_type]\n    if any(x in [\"bert\", \"roberta\"] for x in names):\n        return BertPooler(config, **kwargs)\n    elif any(x.startswith(\"gpt\") for x in names):\n        return GPTPooler(config, **kwargs)\n    elif any(x == \"bart\" for x in names):\n        return BartPooler(config, **kwargs)\n    return None\n</code></pre>"},{"location":"api/molfeat.utils.html#mol-format-converters","title":"Mol Format Converters","text":""},{"location":"api/molfeat.utils.html#molfeat.utils.converters.SmilesConverter","title":"<code>SmilesConverter</code>","text":"<p>Molecule line notation conversion from smiles to selfies or inchi</p> Source code in <code>molfeat/utils/converters.py</code> <pre><code>class SmilesConverter:\n\"\"\"Molecule line notation conversion from smiles to selfies or inchi\"\"\"\n\n    SUPPORTED_LINE_NOTATIONS = [\n        \"none\",\n        \"smiles\",\n        \"selfies\",\n        \"inchi\",\n    ]\n\n    def __init__(self, target: str = None):\n\"\"\"\n        Convert input smiles to a target line notation\n\n        Args:\n            target: target representation.\n        \"\"\"\n        self.target = target\n\n        if self.target is not None and self.target not in self.SUPPORTED_LINE_NOTATIONS:\n            raise ValueError(\n                f\"{target} is not a supported line representation. Choose from {self.SUPPORTED_LINE_NOTATIONS}\"\n            )\n\n        if self.target == \"smiles\" or (self.target is None or self.target == \"none\"):\n            self.converter = None\n        elif self.target == \"inchi\":\n            self.converter = types.SimpleNamespace(decode=dm.from_inchi, encode=dm.to_inchi)\n        elif self.target == \"selfies\":\n            self.converter = types.SimpleNamespace(decode=dm.from_selfies, encode=dm.to_selfies)\n\n    def decode(self, inp: str):\n\"\"\"Decode inputs into smiles\n\n        Args:\n            inp: input representation to decode\n        \"\"\"\n        if self.converter is None:\n            return inp\n        with dm.without_rdkit_log():\n            try:\n                decoded = self.converter.decode(inp)\n                return decoded.strip()\n            except:  # (deepsmiles.DecodeError, ValueError, AttributeError, IndexError):\n                return None\n\n    def encode(self, smiles: str):\n\"\"\"Encode a input smiles into target line notation\n\n        Args:\n            smiles: input smiles to encode\n        \"\"\"\n        if self.converter is None:\n            return smiles\n        with dm.without_rdkit_log():\n            try:\n                encoded = self.converter.encode(smiles)\n                return encoded.strip()\n            except:\n                return None\n</code></pre>"},{"location":"api/molfeat.utils.html#molfeat.utils.converters.SmilesConverter.SUPPORTED_LINE_NOTATIONS","title":"<code>SUPPORTED_LINE_NOTATIONS = ['none', 'smiles', 'selfies', 'inchi']</code>  <code>class-attribute</code>","text":""},{"location":"api/molfeat.utils.html#molfeat.utils.converters.SmilesConverter.converter","title":"<code>converter = None</code>  <code>instance-attribute</code>","text":""},{"location":"api/molfeat.utils.html#molfeat.utils.converters.SmilesConverter.target","title":"<code>target = target</code>  <code>instance-attribute</code>","text":""},{"location":"api/molfeat.utils.html#molfeat.utils.converters.SmilesConverter.__init__","title":"<code>__init__(target=None)</code>","text":"<p>Convert input smiles to a target line notation</p> <p>Parameters:</p> Name Type Description Default <code>target</code> <code>str</code> <p>target representation.</p> <code>None</code> Source code in <code>molfeat/utils/converters.py</code> <pre><code>def __init__(self, target: str = None):\n\"\"\"\n    Convert input smiles to a target line notation\n\n    Args:\n        target: target representation.\n    \"\"\"\n    self.target = target\n\n    if self.target is not None and self.target not in self.SUPPORTED_LINE_NOTATIONS:\n        raise ValueError(\n            f\"{target} is not a supported line representation. Choose from {self.SUPPORTED_LINE_NOTATIONS}\"\n        )\n\n    if self.target == \"smiles\" or (self.target is None or self.target == \"none\"):\n        self.converter = None\n    elif self.target == \"inchi\":\n        self.converter = types.SimpleNamespace(decode=dm.from_inchi, encode=dm.to_inchi)\n    elif self.target == \"selfies\":\n        self.converter = types.SimpleNamespace(decode=dm.from_selfies, encode=dm.to_selfies)\n</code></pre>"},{"location":"api/molfeat.utils.html#molfeat.utils.converters.SmilesConverter.decode","title":"<code>decode(inp)</code>","text":"<p>Decode inputs into smiles</p> <p>Parameters:</p> Name Type Description Default <code>inp</code> <code>str</code> <p>input representation to decode</p> required Source code in <code>molfeat/utils/converters.py</code> <pre><code>def decode(self, inp: str):\n\"\"\"Decode inputs into smiles\n\n    Args:\n        inp: input representation to decode\n    \"\"\"\n    if self.converter is None:\n        return inp\n    with dm.without_rdkit_log():\n        try:\n            decoded = self.converter.decode(inp)\n            return decoded.strip()\n        except:  # (deepsmiles.DecodeError, ValueError, AttributeError, IndexError):\n            return None\n</code></pre>"},{"location":"api/molfeat.utils.html#molfeat.utils.converters.SmilesConverter.encode","title":"<code>encode(smiles)</code>","text":"<p>Encode a input smiles into target line notation</p> <p>Parameters:</p> Name Type Description Default <code>smiles</code> <code>str</code> <p>input smiles to encode</p> required Source code in <code>molfeat/utils/converters.py</code> <pre><code>def encode(self, smiles: str):\n\"\"\"Encode a input smiles into target line notation\n\n    Args:\n        smiles: input smiles to encode\n    \"\"\"\n    if self.converter is None:\n        return smiles\n    with dm.without_rdkit_log():\n        try:\n            encoded = self.converter.encode(smiles)\n            return encoded.strip()\n        except:\n            return None\n</code></pre>"},{"location":"api/molfeat.viz.html","title":"<code>molfeat.viz</code>","text":""},{"location":"api/molfeat.viz.html#molfeat.viz.colors_from_feature_factory","title":"<code>colors_from_feature_factory(feature_factory, cmap_name='Set1', alpha=1.0)</code>","text":"<p>Get a list of colors for a given feature factory. For the same <code>feature_factory</code> the returned colors will be the same.</p> <p>Parameters:</p> Name Type Description Default <code>feature_factory</code> <code>rdMolChemicalFeatures.MolChemicalFeatureFactory</code> <p>Feature factory to use.</p> required <code>cmap_name</code> <code>str</code> <p>Matplotlib colormap name.</p> <code>'Set1'</code> <code>alpha</code> <code>float</code> <p>Alpha value for the colors.</p> <code>1.0</code> <p>Returns:</p> Name Type Description <code>colors</code> <p>Dict of feature_name as keys and colors as values.</p> Source code in <code>molfeat/viz.py</code> <pre><code>def colors_from_feature_factory(\n    feature_factory: rdMolChemicalFeatures.MolChemicalFeatureFactory,\n    cmap_name: str = \"Set1\",\n    alpha: float = 1.0,\n):\n\"\"\"Get a list of colors for a given feature factory. For the same\n    `feature_factory` the returned colors will be the same.\n\n    Args:\n        feature_factory: Feature factory to use.\n        cmap_name: Matplotlib colormap name.\n        alpha: Alpha value for the colors.\n\n    Returns:\n        colors: Dict of feature_name as keys and colors as values.\n    \"\"\"\n    cmap_name = \"Set1\"\n\n    cmap = matplotlib.cm.get_cmap(cmap_name)\n    cmap_n = cmap.N  # type: ignore\n\n    colors = {}\n    for i, name in enumerate(feature_factory.GetFeatureFamilies()):\n        color: List[float] = list(cmap(i % cmap_n))\n        color[3] = alpha\n        colors[name] = color\n\n    return colors\n</code></pre>"},{"location":"api/molfeat.viz.html#molfeat.viz.show_mols","title":"<code>show_mols(mols)</code>","text":"<p>Generate a view of the molecules.</p> <p>Parameters:</p> Name Type Description Default <code>mols</code> <code>Union[dm.Mol, List[dm.Mol]]</code> <p>A mol or a list of mols.</p> required <p>Returns:</p> Type Description <p>nglview.widget.NGLWidget</p> Source code in <code>molfeat/viz.py</code> <pre><code>def show_mols(mols: Union[dm.Mol, List[dm.Mol]]):\n\"\"\"Generate a view of the molecules.\n\n    Args:\n        mols: A mol or a list of mols.\n\n    Returns:\n        nglview.widget.NGLWidget\n    \"\"\"\n\n    import nglview as nv\n\n    if isinstance(mols, dm.Mol):\n        mols = [mols]\n\n    view = nv.NGLWidget()\n    for mol in mols:\n        component = view.add_component(mol)\n        component.clear()  # type: ignore\n        component.add_ball_and_stick(multipleBond=True)  # type: ignore\n\n    return view\n</code></pre>"},{"location":"api/molfeat.viz.html#molfeat.viz.show_pharm_features","title":"<code>show_pharm_features(mols, features, feature_factory, alpha=1.0, sphere_radius=0.4, show_legend=True)</code>","text":"<p>Generate a view of the molecules with pharmacophoric features.</p> <p>Parameters:</p> Name Type Description Default <code>mols</code> <code>Union[dm.Mol, List[dm.Mol]]</code> <p>A mol or a list of mols.</p> required <code>features</code> <code>pd.DataFrame</code> <p>Features data. Columns must contain at least \"feature_name\", \"feature_id\", and \"feature_coords\".</p> required <code>feature_factory</code> <code>rdMolChemicalFeatures.MolChemicalFeatureFactory</code> <p>Feature factory to display consistent colors.</p> required <code>alpha</code> <code>float</code> <p>Alpha value for the colors (currently not working).</p> <code>1.0</code> <code>sphere_radius</code> <code>float</code> <p>Radius of the spheres for the features.</p> <code>0.4</code> <code>show_legend</code> <code>bool</code> <p>Display the legend (the layout is bad but at least it shows the legend).</p> <code>True</code> <p>Returns:</p> Type Description <p>nglview.widget.NGLWidget</p> Source code in <code>molfeat/viz.py</code> <pre><code>def show_pharm_features(\n    mols: Union[dm.Mol, List[dm.Mol]],\n    features: pd.DataFrame,\n    feature_factory: rdMolChemicalFeatures.MolChemicalFeatureFactory,\n    alpha: float = 1.0,\n    sphere_radius: float = 0.4,\n    show_legend: bool = True,\n):\n\"\"\"Generate a view of the molecules with pharmacophoric features.\n\n    Args:\n        mols: A mol or a list of mols.\n        features: Features data. Columns must contain at least\n            \"feature_name\", \"feature_id\", and \"feature_coords\".\n        feature_factory: Feature factory to display consistent colors.\n        alpha: Alpha value for the colors (currently not working).\n        sphere_radius: Radius of the spheres for the features.\n        show_legend: Display the legend (the layout is bad but at least it\n            shows the legend).\n\n    Returns:\n        nglview.widget.NGLWidget\n    \"\"\"\n\n    import ipywidgets as ipy\n\n    # Get mols view\n    mol_view = show_mols(mols)\n\n    # Get colors\n    colors = colors_from_feature_factory(feature_factory, alpha=alpha)\n\n    # Add features to the viz\n    for _, row in features.iterrows():\n        color = colors[row[\"feature_name\"]]\n        label = f\"{row['feature_name']}_{row['feature_id']}\"\n        mol_view.shape.add_sphere(row[\"coords\"], color, sphere_radius, label)  # type: ignore\n\n    if not show_legend:\n        return mol_view\n\n    # Build legend widget\n    colors_widget = _build_colors_widget(colors)\n\n    main_layout = ipy.Layout(\n        display=\"flex\",\n        flex_flow=\"column\",\n        align_content=\"center\",\n    )\n    main_widget = ipy.HBox([mol_view, colors_widget], layout=main_layout)  # type: ignore\n\n    return main_widget\n</code></pre>"},{"location":"developers/contribute.html","title":"Contribute","text":"<p>This document details the development lifecycle of Molfeat.</p>"},{"location":"developers/contribute.html#setup-a-dev-environment","title":"Setup a dev environment","text":"<p>First you'll need to fork and clone the repository. Once you have a local copy, run the following command.  It is strongly recommended that you do this within a new conda environment.</p> <pre><code>mamba env create -n molfeat -f env.yml\nconda activate molfeat\npip install -e .\n</code></pre>"},{"location":"developers/contribute.html#continuous-integration","title":"Continuous Integration","text":"<p>MolFeat uses Github Actions to:</p> <ul> <li>Build and test <code>molfeat</code>.</li> <li>Check code formating the code: <code>black</code>.</li> <li>Documentation: build and deploy the documentation on <code>main</code> and for every new git tag.</li> </ul>"},{"location":"developers/contribute.html#run-tests","title":"Run tests","text":"<pre><code>pytest\n</code></pre>"},{"location":"developers/contribute.html#build-the-documentation","title":"Build the documentation","text":"<p>You can build and serve the documentation locally with:</p> <pre><code># Build and serve the doc\nmkdocs serve\n</code></pre>"},{"location":"developers/contribute.html#submitting-pull-requests","title":"Submitting Pull Requests","text":"<p>If you're considering a large code contribution to <code>MolFeat</code>, please prefer to open an issue first to get early feedback on the idea.</p> <p>Once you think the code is ready to be reviewed, push it to your fork and send a pull request. We will assign a reviewer to your PR. For a change to be accepted it will need to have exiting tests passing, and additional tests and documentation for any new features. </p> <p>If you are developping and extension (plugin) of <code>MolFeat</code>, please refer to the corresponding section Extending Functionalities with a Plugin</p>"},{"location":"developers/contribute.html#release-a-new-version","title":"Release a new version","text":"<ul> <li>Run check: <code>rever check</code>.</li> <li>Bump and release new version: <code>rever VERSION_NUMBER</code>.</li> <li>Releasing a new version will do the following things in that order:<ul> <li>Update <code>AUTHORS.rst</code>.</li> <li>Update <code>CHANGELOG.rst</code>.</li> <li>Bump the version number in <code>setup.py</code> and <code>_version.py</code>.</li> <li>Add a git tag.</li> <li>Push the git tag.</li> <li>Add a new release on the GH repo associated with the git tag.</li> </ul> </li> </ul>"},{"location":"developers/create-plugin.html","title":"Plugins","text":"<p>For developers that are planning to extend <code>MolFeat</code> functionalities, we recommend using the plugin system. </p> <p>The following document focuses on how to package <code>MolFeat</code> extensions (plugins) so that they can be tested, published and eventually reused by others.</p> <p><code>MolFeat</code> plugins can be bundled and distributed in a Python package that provides a set of extensions to <code>MolFeat</code>.</p>"},{"location":"developers/create-plugin.html#quickstart","title":"Quickstart","text":"<p>The fastest way to jumpstart a <code>MolFeat</code> plugin package is to use the MolFeat plugin template in order to template the basic folder structure, already customized according to the desired name of your plugin, following <code>MolFeat</code> conventions.</p> <p>See also the molfeat-padel demo plugin package for an in-depth explanation of the files &amp; folders.</p> <p>In the following, we explain some of the conventions used when building a <code>MolFeat</code> plugin.</p>"},{"location":"developers/create-plugin.html#choosing-a-name","title":"Choosing a name","text":"<p>The naming convention for <code>MolFeat</code> plugin packages is `</p> <ul> <li><code>molfeat-&lt;myplugin&gt;</code> for the plugin distribution on PyPI or Conda </li> <li><code>molfeat_&lt;myplugin&gt;</code> for the corresponding python package (since python package names cannot contain dashes), leading to the following folder structure:<p>molfeat-myplugin/      molfeat_myplugin/         init.py</p> </li> </ul> <p>If you intend to eventually publish your plugin package, please go to the Register a plugin and choose a name that is not already taken. You are also encouraged to pre-register your package (see instructions provided), both to reserve your plugin name and to inform others of your ongoing development.</p>"},{"location":"developers/create-plugin.html#folder-structure","title":"Folder structure","text":"<p>The overall folder structure of your plugin is up to you, but it is useful to follow a set of basic conventions. Here is an example of a folder structure for a <code>MolFeat</code> plugin, illustrating different levels of nesting</p> <pre><code>molfeat-myplugin/           - distribution folder\n   tests/                   - tests directory (possibly with subdirectories)\n   molfeat_myplugin/        - top-level package (from molfeat_myplugin import ..)\n      __init__.py\n      calc/\n         __init__.py\n         myplugin.py      - contains my plugin SerializableCalculator\n      trans/\n         __init__.py\n         myplugin.py       - contains my plugin MoleculeTransformer\n      data/\n         __init__.py    - contains code-specific MyData data format\n      ...\n   setup.py             - setup.py file (optional based on your pyproject.toml content)\n   LICENSE              - license of your plugin\n   MANIFEST.in          - lists non-python files to be installed, such as LICENSE\n   README.md            - project description for github and PyPI\n   pyproject.toml       - plugin metadata: installation requirements, author, entry points, etc.\n   ...\n</code></pre>"},{"location":"developers/create-plugin.html#registering-plugins-through-entry-points","title":"Registering plugins through entry points","text":"<p>A <code>MolFeat</code> plugin is an extension of <code>MolFeat</code> that announces itself by means of a new entry point. Adding a new entry point consists of the following steps:</p> <ol> <li> <p>Deciding a name. We strongly suggest to start the name of each     entry point with the name of the plugin package (omitting the     \\'molfeat-\\' prefix). For a package <code>molfeat-myplugin</code>, this will     usually mean <code>\"myplugin.&lt;something&gt;\"</code></p> </li> <li> <p>Finding the right entry point group. Three mains entry point are defined in molfeat <code>molfeat.calc</code> (for single molecule calculator: <code>SerializableCalculator</code>, which your class should inherit from), <code>molfeat.trans</code> (for <code>MoleculeTransformers</code>) and <code>molfeat.trans.pretrained</code> (for <code>PretrainedMolTransformer</code>)</p> </li> <li> <p>Adding the entry point to the <code>entry_points</code> field in the     <code>pyproject.toml</code> file:</p> <pre><code>  ...\n  [project.entry-points.\"molfeat.calc\"]\n  \"myplugin.&lt;something&gt;\" = \"molfeat_myplugin.calc.some:MysomethingCalculator\"\n  [project.entry-points.\"molfeat.trans\"]\n  \"myplugin.&lt;something&gt;\" = \"molfeat_myplugin.trans.some:MysomethingMoleculeTransformer\"\n  ...\n</code></pre> </li> </ol> <p>For further details, see the Python packaging user guide.</p> <p>The main <code>MolFeat</code> package will automatically discover new molfeat plugins and appropriately make them accessible and importable. </p> <p>For example, upon proper registration of a plugin offereing a new <code>SerializableCalculator</code>, it should be directly accessible in the list of available calculator for <code>MoleculeTransformer</code>.</p> <p>The following example show how to leverage the <code>molfeat-padel</code> plugin package automatically when installed. In this example, all three scenarios are valid.</p> <ol> <li>initializing the calculator from the plugin package</li> </ol> <pre><code>from molfeat.trans import MoleculeTransformer\n\nfrom molfeat_padel.calc.padel import PadelDescriptors\ntrans = MoleculeTransformer(featurizer=PadelDescriptors())\n</code></pre> <ol> <li>enable autodiscovery and addition of the <code>PadelDescriptors</code> as importable attribute to the entry point group <code>molfeat.calc</code></li> </ol> <pre><code>from molfeat.trans import MoleculeTransformer\nfrom molfeat.plugins import load_registered_plugins\nload_registered_plugins(add_submodules=True)\n\n# this is now possible\nfrom molfeat.calc import PadelDescriptors\ntrans = MoleculeTransformer(featurizer=PadelDescriptors())\n</code></pre> <ol> <li>auto discovery of PadelDescriptors </li> </ol> <pre><code>from molfeat.trans import MoleculeTransformer\nimport molfeat_padel\n\ntrans = MoleculeTransformer(featurizer=\"PadelDescriptors\")\n# works because PadelDescriptors is imported in the root init of molfeat_padel\n</code></pre> <pre><code>from molfeat.trans import MoleculeTransformer\nfrom molfeat.plugins import load_registered_plugins\nload_registered_plugins(add_submodules=True)\ntrans = MoleculeTransformer(featurizer=\"PadelDescriptors\")\n</code></pre>"},{"location":"developers/create-plugin.html#testing-a-plugin-package","title":"Testing a plugin package","text":"<p>Writing tests for your <code>MolFeat</code> plugins and running continuous integration tests using free platforms like GitHub Actions is the best way to ensure that your plugin works and keeps working as it is being developed. We recommend using the pytest framework for testing <code>MolFeat</code> plugins.</p>"},{"location":"developers/create-plugin.html#documenting-a-plugin-package","title":"Documenting a plugin package","text":"<p><code>MolFeat</code> plugin packages are python packages, and general best practises for writing python documentation apply.</p> <p>In the following, we mention a few hints that apply specifically to <code>MolFeat</code> plugins.</p>"},{"location":"developers/create-plugin.html#repository-level-documentation","title":"Repository-level documentation","text":"<p>Since the source code of most <code>MolFeat</code> plugins is hosted on GitHub, the first contact of a new user with your plugin package is likely the landing page of your GitHub repository.</p> <ul> <li>Make sure to have a useful <code>README.md</code>, describing what your     plugin does, how to install it and how to run it.</li> <li>Leaving a contact email and adding a license is also a good idea.</li> <li>Make sure the information in the <code>pyproject.toml</code> file is correct     and up to date (in particular the version number)</li> <li>Optionally add a documentation website to provide tutorials</li> </ul>"},{"location":"developers/create-plugin.html#source-code-level-documentation","title":"Source-code-level documentation","text":"<p>Source-code level documentations matters both for users of your plugin\\'s python API and, particularly, for attracting contributions from others.</p> <p>When adding new types of calculations or workflows, make sure to use docstrings, and use the <code>help</code> argument to document input ports and output ports.</p>"},{"location":"developers/create-plugin.html#registering-your-plugin-as-official-molfeat-plugin","title":"Registering your plugin as official MolFeat plugin","text":"<p>Once you have designed, and tested your plugin package, you can officially register it to be listed on the <code>MolFeat</code> website by following the instructions at Register a plugin </p>"},{"location":"developers/register-plugin.html","title":"MolFeat plugin registry","text":"<p>This document explains how to officially register a plugin in <code>MolFeat</code>. </p> <p>The <code>MolFeat</code> plugin registry aims to be the home for all publicly available <code>MolFeat</code> plugins. It collects information on the type of plugins provided by your package, which <code>MolFeat</code> versions it is compatible with, etc.</p> <p>If you are starting to develop a new plugin or if you already have one, please register it here. We strongly encourage to register at early stages of development, both to reserve the name of your plugin and to inform the community of your ongoing work.</p>"},{"location":"developers/register-plugin.html#how-to-register-a-plugin","title":"How to register a plugin","text":"<ol> <li>Fork this repository</li> <li>Add your plugin to the end of the <code>plugins.yaml</code> file, e.g.     <pre><code>...\nmolfeat-new:\n    entry_point_prefix: new\n    available_model_infos: ~\n    home_url: ~\n    documentation_url: ~ \n</code></pre></li> <li>Create a Pull Request to this repository</li> </ol>"},{"location":"developers/register-plugin.html#valid-keys-for-each-plugin","title":"Valid keys for each plugin","text":"<ul> <li>top-level key (required): The name under which your plugin will be distributed. By convention, names of MolFeat plugins are lowercase and prefixed by <code>molfeat-</code> (e.g <code>molfeat-padelpy</code>)</li> </ul> <ul> <li>entry_point_prefix (required): The prefix of all entry points provided by the plugin. By convention, a plugin <code>molfeat-xxx</code> should use <code>entry_point_prefix: xxx</code>. For example: <code>molfeat-padelpy</code> uses the entry point prefix <code>padelpy</code> and provides numerous entry points, all of which start with <code>padelpy.</code>.</li> </ul> <ul> <li>available_model_infos (required): A path to a json file specifying the information (model card) of all models that are offered in your plugin. For more information about a model card. Please refer to the create-plugin section.</li> </ul> <ul> <li>home_url (required): The link to the homepage of the plugin, for example its github repository.</li> </ul> <ul> <li>molfeat_version (required): The molfeat version required for your plugin to work.</li> </ul> <ul> <li>documentation_url (optional): The link to the online documentation for your plugin, for example on readthedocs.org .</li> </ul>"},{"location":"tutorials/advanced.html","title":"Advanced Features","text":"In\u00a0[1]: Copied! <pre>%load_ext autoreload\n%autoreload 2\n</pre> %load_ext autoreload %autoreload 2 In\u00a0[2]: Copied! <pre>import datamol as dm\nimport numpy as np\nfrom functools import partial\nfrom sklearn.preprocessing import PowerTransformer\nfrom molfeat.trans.base import MoleculeTransformer\nfrom loguru import logger\n\n# reproducibility\nCONF_PARAMS = dict(n_confs=5, clear_existing=True, minimize_energy=True, random_seed=12)\n\n\nclass MyCustomTransformer(MoleculeTransformer):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.ptrans = PowerTransformer()\n\n    def preprocess(self, inputs, *args, **kwargs):\n        # During preprocessing we need to compute the conformation of the molecule\n        inputs = [dm.to_mol(x) for x in inputs]\n        outputs = dm.parallelized(partial(dm.conformers.generate, **CONF_PARAMS), inputs, n_jobs=4)\n        logger.info(\"In preprocess: computed the conformers\")\n        return outputs\n\n    def postprocess(self, inputs, *args, **kwargs):\n        # during postprocess we standardize the data\n        outputs = self.ptrans.fit_transform(inputs)\n        logger.info(\"In postprocess: normalized the data\")\n        return outputs\n</pre> import datamol as dm import numpy as np from functools import partial from sklearn.preprocessing import PowerTransformer from molfeat.trans.base import MoleculeTransformer from loguru import logger  # reproducibility CONF_PARAMS = dict(n_confs=5, clear_existing=True, minimize_energy=True, random_seed=12)   class MyCustomTransformer(MoleculeTransformer):     def __init__(self, *args, **kwargs):         super().__init__(*args, **kwargs)         self.ptrans = PowerTransformer()      def preprocess(self, inputs, *args, **kwargs):         # During preprocessing we need to compute the conformation of the molecule         inputs = [dm.to_mol(x) for x in inputs]         outputs = dm.parallelized(partial(dm.conformers.generate, **CONF_PARAMS), inputs, n_jobs=4)         logger.info(\"In preprocess: computed the conformers\")         return outputs      def postprocess(self, inputs, *args, **kwargs):         # during postprocess we standardize the data         outputs = self.ptrans.fit_transform(inputs)         logger.info(\"In postprocess: normalized the data\")         return outputs <pre>Using backend: pytorch\n</pre> In\u00a0[3]: Copied! <pre>data = dm.data.freesolv().sample(n=100)\n</pre> data = dm.data.freesolv().sample(n=100) <p>Let's first show that we cannot featurize without conformers in the molecules by using <code>MoleculeTransformer</code> directly</p> In\u00a0[14]: Copied! <pre>trans = MoleculeTransformer(featurizer=\"desc3d\", verbose=False)\ntrans.transform(data[\"smiles\"], ignore_errors=False)\n</pre> trans = MoleculeTransformer(featurizer=\"desc3d\", verbose=False) trans.transform(data[\"smiles\"], ignore_errors=False) <pre>\n---------------------------------------------------------------------------\nValueError                                Traceback (most recent call last)\n&lt;ipython-input-14-b5ef4cbe0932&gt; in &lt;module&gt;\n      1 trans = MoleculeTransformer(featurizer=\"desc3d\", verbose=False)\n----&gt; 2 trans.transform(data[\"smiles\"], ignore_errors=False)\n\n~/Code/molfeat/molfeat/trans/base.py in transform(self, mols, ignore_errors, **kwargs)\n    289             for ind, feat in enumerate(features):\n    290                 if feat is None:\n--&gt; 291                     raise ValueError(f\"Cannot transform molecule at index {ind}\")\n    292 \n    293         if self.callbacks is not None:\n\nValueError: Cannot transform molecule at index 0</pre> <p>Now with our new class :</p> In\u00a0[\u00a0]: Copied! <pre>trans = MyCustomTransformer(featurizer=\"desc3d\")\nX = trans.preprocess(data[\"smiles\"])\nX = trans.transform(X)\nX = trans.postprocess(X)\nX\n</pre> trans = MyCustomTransformer(featurizer=\"desc3d\") X = trans.preprocess(data[\"smiles\"]) X = trans.transform(X) X = trans.postprocess(X) X <pre>2021-07-16 17:29:54.933 | INFO     | __main__:preprocess:20 - In preprocess: computed the conformers\n/Users/manu/.miniconda/envs/molfeat/lib/python3.7/site-packages/sklearn/preprocessing/_data.py:3237: RuntimeWarning: divide by zero encountered in log\n  loglike = -n_samples / 2 * np.log(x_trans.var())\n2021-07-16 17:29:55.837 | INFO     | __main__:postprocess:26 - In postprocess: normalized the data\n</pre> Out[\u00a0]: <pre>array([[ 1.27336055,  0.9874605 ,  1.99189802, ..., -1.34248133,\n        -1.38425571, -1.16710531],\n       [-0.60835615, -0.3324303 , -0.23798693, ..., -0.64279521,\n        -0.54665693, -0.59015871],\n       [ 0.63046753,  0.75814346, -0.34787693, ...,  0.45775594,\n         0.54136146,  0.61144396],\n       ...,\n       [ 1.32519232,  0.99850081,  1.1748335 , ...,  0.04142212,\n        -0.11412962, -0.53027834],\n       [ 0.53299287,  0.71157622, -0.08109695, ..., -0.02670614,\n         0.11096503,  0.07506185],\n       [ 1.36885527,  1.00718807,  2.09435387, ..., -1.51994557,\n        -1.26664259, -1.22082345]])</pre> In\u00a0[\u00a0]: Copied! <pre># let's clear the initial cache\n!rm -rf {cb.tmp_dir}/molfeat/utils/callbacks/\n</pre> # let's clear the initial cache !rm -rf {cb.tmp_dir}/molfeat/utils/callbacks/ In\u00a0[6]: Copied! <pre>from molfeat.utils.callbacks import ConformerCallback\n\ncb = ConformerCallback(n_jobs=4, **CONF_PARAMS)\n</pre> from molfeat.utils.callbacks import ConformerCallback  cb = ConformerCallback(n_jobs=4, **CONF_PARAMS) In\u00a0[7]: Copied! <pre>%%timeit -n 1 -r 1\ntrans = MoleculeTransformer(featurizer=\"desc3d\", callbacks=cb, dtype=float)\nX2 = trans(data[\"smiles\"], ignore_errors=False, enforce_dtype=True)\n</pre> %%timeit -n 1 -r 1 trans = MoleculeTransformer(featurizer=\"desc3d\", callbacks=cb, dtype=float) X2 = trans(data[\"smiles\"], ignore_errors=False, enforce_dtype=True) <pre>2.77 s \u00b1 0 ns per loop (mean \u00b1 std. dev. of 1 run, 1 loop each)\n</pre> <p>Computation are cached to disk, and you can have a quick overview of their content. Note that caching is done using a combination of both <code>inchikey</code> of the input molecule and <code>parameters</code> of the conformer generation, to prevent erroneous caching.</p> In\u00a0[13]: outputPrepend Copied! <pre>!tree {cb.tmp_dir}/molfeat | head -n 20\n</pre> !tree {cb.tmp_dir}/molfeat | head -n 20 <pre>/Users/manu/Library/Caches/molfeat/conformers/molfeat\n\u2514\u2500\u2500 utils\n    \u2514\u2500\u2500 callbacks\n        \u2514\u2500\u2500 _generate_conformer\n            \u251c\u2500\u2500 00e04915ad95b437d6bca4e335c4bb62\n            \u2502\u00a0\u00a0 \u251c\u2500\u2500 metadata.json\n            \u2502\u00a0\u00a0 \u2514\u2500\u2500 output.pkl\n            \u251c\u2500\u2500 0183520c8848a5f315f4a333cc0143ce\n            \u2502\u00a0\u00a0 \u251c\u2500\u2500 metadata.json\n            \u2502\u00a0\u00a0 \u2514\u2500\u2500 output.pkl\n            \u251c\u2500\u2500 02c6467cf645a7b590f7f28923b0e5ed\n            \u2502\u00a0\u00a0 \u251c\u2500\u2500 metadata.json\n            \u2502\u00a0\u00a0 \u2514\u2500\u2500 output.pkl\n            \u251c\u2500\u2500 0325f0027466d614fc79ddaaede073ed\n            \u2502\u00a0\u00a0 \u251c\u2500\u2500 metadata.json\n            \u2502\u00a0\u00a0 \u2514\u2500\u2500 output.pkl\n            \u251c\u2500\u2500 036b771e817fd50fae26fefbd2fcd8da\n            \u2502\u00a0\u00a0 \u251c\u2500\u2500 metadata.json\n            \u2502\u00a0\u00a0 \u2514\u2500\u2500 output.pkl\n            \u251c\u2500\u2500 0374f115da4cf1ee88e7c41e99e543c6\n</pre> <p>Let's compute again to make sure the cache has kicked in and that we get faster results.</p> In\u00a0[9]: Copied! <pre>%%timeit -n 1 -r 3\ntrans = MoleculeTransformer(featurizer=\"desc3d\", callbacks=cb, dtype=float)\nX2 = trans(data[\"smiles\"], ignore_errors=False, enforce_dtype=True)\n</pre> %%timeit -n 1 -r 3 trans = MoleculeTransformer(featurizer=\"desc3d\", callbacks=cb, dtype=float) X2 = trans(data[\"smiles\"], ignore_errors=False, enforce_dtype=True) <pre>121 ms \u00b1 4.98 ms per loop (mean \u00b1 std. dev. of 3 runs, 1 loop each)\n</pre> <p>Sanity check to compare output to calculator output</p> In\u00a0[11]: Copied! <pre>trans = MoleculeTransformer(featurizer=\"desc3d\", callbacks=cb, dtype=float)\nX2 = trans.transform(data[\"smiles\"], ignore_errors=False, enforce_dtype=True)\nX2[-1]\n</pre> trans = MoleculeTransformer(featurizer=\"desc3d\", callbacks=cb, dtype=float) X2 = trans.transform(data[\"smiles\"], ignore_errors=False, enforce_dtype=True) X2[-1] Out[11]: <pre>array([ 8.36296440e-01,  9.98321117e-01,  1.36344887e-01,  5.79219138e-02,\n        9.42348490e-01,  6.91150588e+00,  1.12445303e+02,  1.19324543e+02,\n        1.45956249e+00,  4.55100499e-04,  1.71447673e-02,  7.22000000e-01,\n        8.02000000e-01,  6.05000000e-01,  0.00000000e+00,  0.00000000e+00,\n        0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n        0.00000000e+00,  8.77000000e-01,  1.06800000e+00,  1.07300000e+00,\n        0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n        0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  5.89000000e-01,\n        5.73000000e-01,  3.09000000e-01,  0.00000000e+00,  0.00000000e+00,\n        0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n        0.00000000e+00,  8.75000000e-01,  1.06400000e+00,  1.06500000e+00,\n        0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n        0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  4.67000000e-01,\n        3.64000000e-01,  1.25000000e-01,  0.00000000e+00,  0.00000000e+00,\n        0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n        0.00000000e+00,  8.20000000e-01,  9.70000000e-01,  8.84000000e-01,\n        0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n        0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  7.22000000e-01,\n        8.02000000e-01,  6.05000000e-01,  0.00000000e+00,  0.00000000e+00,\n        0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n        0.00000000e+00,  6.60000000e-01,  6.96000000e-01,  4.56000000e-01,\n        0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n        0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n        1.68000000e+00,  0.00000000e+00,  8.22000000e-01,  0.00000000e+00,\n        1.94000000e-01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n        0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n        0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n        0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n        0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n        0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n        0.00000000e+00,  0.00000000e+00,  1.93200000e+00,  0.00000000e+00,\n        1.09600000e+00,  0.00000000e+00,  3.45000000e-01,  0.00000000e+00,\n        0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n        0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n        0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n        0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n        0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n        0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n        1.46400000e+00,  0.00000000e+00,  5.88000000e-01,  0.00000000e+00,\n        9.90000000e-02,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n        0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n        0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n        0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n        0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n        0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n        0.00000000e+00,  0.00000000e+00,  1.92800000e+00,  0.00000000e+00,\n        1.09100000e+00,  0.00000000e+00,  3.42000000e-01,  0.00000000e+00,\n        0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n        0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n        0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n        0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n        0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n        0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n        1.26600000e+00,  0.00000000e+00,  3.74000000e-01,  0.00000000e+00,\n        4.00000000e-02,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n        0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n        0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n        0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n        0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n        0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n        0.00000000e+00,  0.00000000e+00,  1.83900000e+00,  0.00000000e+00,\n        9.95000000e-01,  0.00000000e+00,  2.84000000e-01,  0.00000000e+00,\n        0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n        0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n        0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n        0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n        0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n        0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n        1.68000000e+00,  0.00000000e+00,  8.22000000e-01,  0.00000000e+00,\n        1.94000000e-01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n        0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n        0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n        0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n        0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n        0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n        0.00000000e+00,  6.00000000e+00,  2.48900000e+00, -3.50000000e-02,\n       -5.00000000e-01, -2.28000000e-01,  1.96000000e-01,  3.72000000e-01,\n       -2.63000000e-01, -1.85000000e-01,  1.35000000e-01,  6.80000000e-02,\n        7.80000000e-02, -1.82000000e-01, -3.20000000e-02,  1.53000000e-01,\n       -2.80000000e-02, -9.00000000e-03, -7.00000000e-02,  1.30000000e-02,\n        9.20000000e-02, -4.60000000e-02, -2.30000000e-02, -6.00000000e-03,\n        7.00000000e-03,  4.70000000e-02, -2.40000000e-02, -3.80000000e-02,\n        1.80000000e-02,  9.00000000e-03,  2.50000000e-02, -1.30000000e-02,\n       -5.40000000e-02,  8.10400000e+00,  3.04200000e+00, -6.00000000e-03,\n       -6.35000000e-01, -2.66000000e-01,  2.03000000e-01,  4.91000000e-01,\n       -3.17000000e-01, -2.47000000e-01,  1.70000000e-01,  7.00000000e-02,\n        1.30000000e-01, -2.38000000e-01, -5.70000000e-02,  1.99000000e-01,\n       -3.20000000e-02,  4.00000000e-03, -1.09000000e-01,  1.30000000e-02,\n        1.29000000e-01, -5.50000000e-02, -3.30000000e-02, -2.20000000e-02,\n        2.00000000e-02,  6.70000000e-02, -3.40000000e-02, -5.80000000e-02,\n        2.50000000e-02,  2.30000000e-02,  2.70000000e-02, -2.10000000e-02,\n       -7.20000000e-02,  4.37000000e+00,  1.99200000e+00, -4.10000000e-02,\n       -4.01000000e-01, -1.84000000e-01,  1.84000000e-01,  2.72000000e-01,\n       -2.16000000e-01, -1.35000000e-01,  1.10000000e-01,  6.20000000e-02,\n        3.60000000e-02, -1.35000000e-01, -1.00000000e-02,  1.15000000e-01,\n       -2.70000000e-02, -1.70000000e-02, -3.80000000e-02,  1.50000000e-02,\n        5.90000000e-02, -3.90000000e-02, -1.30000000e-02,  5.00000000e-03,\n       -2.00000000e-03,  2.90000000e-02, -1.40000000e-02, -2.10000000e-02,\n        1.10000000e-02, -2.00000000e-03,  2.20000000e-02, -5.00000000e-03,\n       -3.90000000e-02,  8.07100000e+00,  3.03400000e+00, -6.00000000e-03,\n       -6.33000000e-01, -2.65000000e-01,  2.03000000e-01,  4.89000000e-01,\n       -3.16000000e-01, -2.46000000e-01,  1.69000000e-01,  7.00000000e-02,\n        1.29000000e-01, -2.37000000e-01, -5.60000000e-02,  1.98000000e-01,\n       -3.20000000e-02,  4.00000000e-03, -1.08000000e-01,  1.30000000e-02,\n        1.28000000e-01, -5.50000000e-02, -3.30000000e-02, -2.10000000e-02,\n        2.00000000e-02,  6.70000000e-02, -3.40000000e-02, -5.70000000e-02,\n        2.50000000e-02,  2.20000000e-02,  2.70000000e-02, -2.10000000e-02,\n       -7.20000000e-02,  3.02500000e+00,  1.52000000e+00, -2.90000000e-02,\n       -3.23000000e-01, -1.34000000e-01,  1.68000000e-01,  1.82000000e-01,\n       -1.71000000e-01, -9.30000000e-02,  9.10000000e-02,  5.20000000e-02,\n        1.00000000e-03, -9.50000000e-02,  9.00000000e-03,  8.10000000e-02,\n       -2.80000000e-02, -2.20000000e-02, -1.20000000e-02,  1.70000000e-02,\n        2.90000000e-02, -3.30000000e-02, -2.00000000e-03,  1.30000000e-02,\n       -8.00000000e-03,  1.10000000e-02, -5.00000000e-03, -5.00000000e-03,\n        4.00000000e-03, -1.00000000e-02,  1.80000000e-02,  3.00000000e-03,\n       -2.60000000e-02,  7.30000000e+00,  2.84100000e+00, -1.90000000e-02,\n       -5.83000000e-01, -2.53000000e-01,  2.01000000e-01,  4.47000000e-01,\n       -2.97000000e-01, -2.24000000e-01,  1.56000000e-01,  7.00000000e-02,\n        1.10000000e-01, -2.17000000e-01, -4.70000000e-02,  1.82000000e-01,\n       -3.00000000e-02, -1.00000000e-03, -9.40000000e-02,  1.30000000e-02,\n        1.15000000e-01, -5.20000000e-02, -3.00000000e-02, -1.60000000e-02,\n        1.50000000e-02,  6.00000000e-02, -3.00000000e-02, -5.00000000e-02,\n        2.30000000e-02,  1.70000000e-02,  2.60000000e-02, -1.80000000e-02,\n       -6.50000000e-02,  6.00000000e+00,  2.48900000e+00, -3.50000000e-02,\n       -5.00000000e-01, -2.28000000e-01,  1.96000000e-01,  3.72000000e-01,\n       -2.63000000e-01, -1.85000000e-01,  1.35000000e-01,  6.80000000e-02,\n        7.80000000e-02, -1.82000000e-01, -3.20000000e-02,  1.53000000e-01,\n       -2.80000000e-02, -9.00000000e-03, -7.00000000e-02,  1.30000000e-02,\n        9.20000000e-02, -4.60000000e-02, -2.30000000e-02, -6.00000000e-03,\n        7.00000000e-03,  4.70000000e-02, -2.40000000e-02, -3.80000000e-02,\n        1.80000000e-02,  9.00000000e-03,  2.50000000e-02, -1.30000000e-02,\n       -5.40000000e-02,  1.79700000e+00,  1.40000000e-01,  0.00000000e+00,\n        9.27000000e-01,  7.20000000e-02,  1.00000000e+00,  1.00000000e+00,\n        1.00000000e+00,  6.00000000e-01,  6.00000000e-01,  1.00000000e+00,\n        2.00700000e+00,  1.23000000e-01,  0.00000000e+00,  9.42000000e-01,\n        5.80000000e-02,  1.00000000e+00,  1.00000000e+00,  1.00000000e+00,\n        7.44000000e-01,  4.22000000e-01,  1.00000000e+00,  1.55500000e+00,\n        1.58000000e-01,  0.00000000e+00,  9.08000000e-01,  9.20000000e-02,\n        1.00000000e+00,  1.00000000e+00,  1.00000000e+00,  4.55000000e-01,\n        8.62000000e-01,  1.00000000e+00,  2.00400000e+00,  1.23000000e-01,\n        0.00000000e+00,  9.42000000e-01,  5.80000000e-02,  1.00000000e+00,\n        1.00000000e+00,  1.00000000e+00,  7.42000000e-01,  4.24000000e-01,\n        1.00000000e+00,  1.25800000e+00,  1.72000000e-01,  0.00000000e+00,\n        8.79000000e-01,  1.20000000e-01,  1.00000000e+00,  1.00000000e+00,\n        1.00000000e+00,  3.09000000e-01,  1.12800000e+00,  1.00000000e+00,\n        1.93700000e+00,  1.29000000e-01,  0.00000000e+00,  9.37000000e-01,\n        6.20000000e-02,  1.00000000e+00,  1.00000000e+00,  1.00000000e+00,\n        6.94000000e-01,  4.77000000e-01,  1.00000000e+00,  1.79700000e+00,\n        1.40000000e-01,  0.00000000e+00,  9.27000000e-01,  7.20000000e-02,\n        1.00000000e+00,  1.00000000e+00,  1.00000000e+00,  6.00000000e-01,\n        6.00000000e-01,  1.00000000e+00,  1.93800000e+00,  2.13000000e+00,\n        1.71300000e+00,  2.12800000e+00,  1.43000000e+00,  2.06600000e+00,\n        1.93800000e+00,  2.53000000e-01,  2.48000000e-01,  2.46000000e-01,\n        2.48000000e-01,  2.17000000e-01,  2.50000000e-01,  2.53000000e-01,\n        1.00000000e+00,  1.00000000e+00,  8.91000000e-01,  9.13000000e-01,\n        8.62000000e-01,  9.13000000e-01,  8.19000000e-01,  9.06000000e-01,\n        8.91000000e-01,  7.33000000e-01,  7.22000000e-01,  7.72000000e-01,\n        7.22000000e-01,  8.12000000e-01,  7.23000000e-01,  7.33000000e-01,\n        2.19000000e+00,  2.37800000e+00,  1.95800000e+00,  2.37600000e+00,\n        1.64700000e+00,  2.31600000e+00,  2.19000000e+00])</pre> In\u00a0[23]: Copied! <pre>from molfeat.trans.base import PrecomputedMolTransformer\nfrom molfeat.utils.cache import DataCache\nimport time\n\ntrans = MoleculeTransformer(\"desc2d\")\ncache = DataCache(name=\"desc2d_transformer\")\n\nprecomp = PrecomputedMolTransformer(cache=cache, featurizer=trans)\nmolecules = data[\"smiles\"].values\n\nt1 = time.time()\nout1 = precomp.transform(molecules)\nelapsed1 = time.time() - t1\nprint(\"Elapsed time: {:.3f} s\".format(elapsed1))\nout2 = precomp.transform(molecules)\nprint(\"Elapsed time after caching: {:.3f} s\".format(time.time() - elapsed1 - t1))\nassert np.all(out1 == out2)\n</pre> from molfeat.trans.base import PrecomputedMolTransformer from molfeat.utils.cache import DataCache import time  trans = MoleculeTransformer(\"desc2d\") cache = DataCache(name=\"desc2d_transformer\")  precomp = PrecomputedMolTransformer(cache=cache, featurizer=trans) molecules = data[\"smiles\"].values  t1 = time.time() out1 = precomp.transform(molecules) elapsed1 = time.time() - t1 print(\"Elapsed time: {:.3f} s\".format(elapsed1)) out2 = precomp.transform(molecules) print(\"Elapsed time after caching: {:.3f} s\".format(time.time() - elapsed1 - t1)) assert np.all(out1 == out2) <pre>Elapsed time: 0.727 s\nElapsed time after caching: 0.025 s\n</pre> In\u00a0[19]: Copied! <pre>out1\n</pre> out1 Out[19]: <pre>[array([ 5.13194444e+00,  9.24444444e-01,  5.13194444e+00,  9.24444444e-01,\n         4.91869888e-01,  1.02177000e+02,  8.80650000e+01,  1.02104465e+02,\n         4.40000000e+01,  0.00000000e+00,  4.62900700e-02, -3.81474012e-01,\n         3.81474012e-01,  4.62900700e-02,  1.00000000e+00,  1.42857143e+00,\n         1.71428571e+00,  1.64727595e+01,  1.04907047e+01,  1.77425267e+00,\n        -1.94896098e+00,  1.81010376e+00, -1.91756393e+00,  4.24744837e+00,\n         1.35272616e-01,  2.44747289e+00,  2.33609904e+01,  5.53553391e+00,\n         5.23667542e+00,  5.23667542e+00,  3.41421356e+00,  2.99156383e+00,\n         2.99156383e+00,  1.61237244e+00,  1.61237244e+00,  6.96923425e-01,\n         6.96923425e-01,  3.90737207e-01,  3.90737207e-01, -4.00000000e-02,\n         3.55096099e+01,  6.96000000e+00,  5.96000000e+00,  5.96000000e+00,\n         4.56775068e+01,  4.73686295e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  1.38474744e+01,\n         1.28416432e+01,  1.32137639e+01,  0.00000000e+00,  4.73686295e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         2.66891176e+01,  1.32137639e+01,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.32137639e+01,  4.73686295e+00,  0.00000000e+00,\n         2.66891176e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  9.23000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  2.60554072e+01,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  1.38474744e+01,\n         4.73686295e+00,  5.13194444e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         2.27777778e+00,  6.09027778e+00,  0.00000000e+00,  1.00000000e+00,\n         7.00000000e+00,  0.00000000e+00,  1.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.00000000e+00,  0.00000000e+00,  1.00000000e+00,\n         4.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.82300000e+00,  3.14010000e+01,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         1.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  2.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.00000000e+00]),\n array([ 2.31481481e+00,  8.42592593e-01,  2.31481481e+00,  8.42592593e-01,\n         5.17490769e-01,  1.14232000e+02,  9.60880000e+01,  1.14140851e+02,\n         5.00000000e+01,  0.00000000e+00, -3.96430091e-02, -6.25091140e-02,\n         6.25091140e-02,  3.96430091e-02,  6.25000000e-01,  8.75000000e-01,\n         8.75000000e-01,  1.41505006e+01,  9.87641276e+00,  2.09200120e+00,\n        -2.18212737e+00,  2.17818017e+00, -2.09887905e+00,  4.59092325e+00,\n         3.16099398e-01,  3.46422685e+00,  4.50586500e+01,  6.73205081e+00,\n         6.73205081e+00,  6.73205081e+00,  3.55341801e+00,  3.55341801e+00,\n         3.55341801e+00,  3.34715063e+00,  3.34715063e+00,  2.10313369e+00,\n         2.10313369e+00,  7.69800359e-01,  7.69800359e-01,  0.00000000e+00,\n         3.93680656e+01,  8.00000000e+00,  3.11111111e+00,  2.34375000e+00,\n         5.32938458e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  3.46186860e+01,\n         1.77537181e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  1.77537181e+01,\n         3.46186860e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  1.77537181e+01,\n         3.46186860e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  1.77537181e+01,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  3.46186860e+01,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  2.55555556e+00,  0.00000000e+00,\n         0.00000000e+00,  1.14444444e+01,  0.00000000e+00,  1.00000000e+00,\n         8.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         2.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  2.93450000e+00,  3.88400000e+01,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00]),\n array([ 2.30097222e+00,  5.32013889e-01,  2.30097222e+00,  5.32013889e-01,\n         5.33905152e-01,  1.28259000e+02,  1.08099000e+02,  1.28156501e+02,\n         5.60000000e+01,  0.00000000e+00, -3.82513376e-02, -6.27732646e-02,\n         6.27732646e-02,  3.82513376e-02,  1.11111111e+00,  1.55555556e+00,\n         1.66666667e+00,  1.41511644e+01,  9.87648538e+00,  2.09204205e+00,\n        -2.18266185e+00,  2.22363899e+00, -2.05419931e+00,  4.61333216e+00,\n         3.37886185e-01,  3.28071084e+00,  6.45977206e+01,  7.49156383e+00,\n         7.49156383e+00,  7.49156383e+00,  3.91650222e+00,  3.91650222e+00,\n         3.91650222e+00,  4.49318216e+00,  4.49318216e+00,  1.47168784e+00,\n         1.47168784e+00,  7.21687836e-01,  7.21687836e-01,  0.00000000e+00,\n         5.10033567e+01,  9.00000000e+00,  3.23966942e+00,  8.00000000e+00,\n         5.96587879e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  4.10395076e+01,\n         1.77537181e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  1.13328965e+01,\n         4.74603292e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  1.13328965e+01,\n         4.74603292e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  5.41499047e+00,  5.91790605e+00,\n         1.28416432e+01,  0.00000000e+00,  0.00000000e+00,  3.46186860e+01,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  5.32013889e-01,  8.65023148e-01,  0.00000000e+00,\n         2.71643519e+00,  1.14698611e+01,  0.00000000e+00,  1.00000000e+00,\n         9.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         2.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  3.46870000e+00,  4.35270000e+01,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00]),\n array([ 5.83513040e+00, -2.16273153e+00,  5.83513040e+00,  5.93144209e-01,\n         3.55407068e-01,  3.42875000e+02,  3.26747000e+02,  3.41973857e+02,\n         1.02000000e+02,  0.00000000e+00,  2.47639752e-01, -3.21948961e-01,\n         3.21948961e-01,  2.47639752e-01,  1.16666667e+00,  1.72222222e+00,\n         2.22222222e+00,  3.54956928e+01,  1.03643074e+01,  2.17960815e+00,\n        -2.19057523e+00,  2.61491257e+00, -1.91698435e+00,  8.69052144e+00,\n         2.80468262e-01,  2.43147852e+00,  3.89779728e+02,  1.34328751e+01,\n         1.02971409e+01,  1.43969868e+01,  8.59346546e+00,  5.51368443e+00,\n         1.11060814e+01,  3.12797105e+00,  1.12886248e+01,  1.82447517e+00,\n         9.15103392e+00,  1.11779629e+00,  8.21018329e+00,  7.80000000e-01,\n         8.94354222e+03,  1.68332481e+01,  8.85303068e+00,  6.28695176e+00,\n         1.27074533e+02,  9.04749432e+00,  0.00000000e+00,  0.00000000e+00,\n         5.69353760e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  1.17618849e+01,  2.29826647e+01,\n         4.99197988e+01,  9.91811679e+00,  1.82986495e+01,  9.04749432e+00,\n         5.22449433e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         1.87429579e+01,  1.82986495e+01,  2.92881016e+01,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         4.04380872e+01,  1.82986495e+01,  2.08543504e+01,  0.00000000e+00,\n         1.38474744e+01,  2.91609517e+01,  5.02263331e+00,  0.00000000e+00,\n         0.00000000e+00,  1.84600000e+01,  5.69353760e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  1.32137639e+01,  1.01075189e+01,\n         4.89548348e+00,  2.31436097e+01,  3.81129427e+01,  0.00000000e+00,\n         3.24552903e+01,  1.11183183e+01,  1.45632941e+01,  1.16800642e+00,\n         1.56905937e+00, -2.16273153e+00,  0.00000000e+00,  7.76616245e+00,\n         0.00000000e+00,  5.06122424e+00,  0.00000000e+00,  4.54545455e-01,\n         1.80000000e+01,  0.00000000e+00,  2.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  1.00000000e+00,  0.00000000e+00,\n         1.00000000e+00,  5.00000000e+00,  0.00000000e+00,  7.00000000e+00,\n         8.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         1.00000000e+00,  5.42030000e+00,  8.73040000e+01,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  1.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  1.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  3.00000000e+00]),\n array([ 5.67925422e+00,  1.96203704e-01,  5.67925422e+00,  1.96203704e-01,\n         7.71063921e-01,  2.01661000e+02,  1.89565000e+02,  2.01078123e+02,\n         7.20000000e+01,  0.00000000e+00,  2.28447015e-01, -3.54318264e-01,\n         3.54318264e-01,  2.28447015e-01,  1.00000000e+00,  1.46153846e+00,\n         1.84615385e+00,  3.54957012e+01,  1.06850713e+01,  2.01399646e+00,\n        -2.04164523e+00,  2.07997254e+00, -2.07830085e+00,  6.27950488e+00,\n         9.99024903e-01,  2.82886728e+00,  2.53335454e+02,  9.68179828e+00,\n         7.63381882e+00,  8.38974777e+00,  6.25755016e+00,  4.15194337e+00,\n         4.52990784e+00,  2.31231481e+00,  2.65037652e+00,  1.27790338e+00,\n         1.44693423e+00,  8.24428698e-01,  9.84537018e-01, -1.10000000e+00,\n         8.14657554e+02,  9.98403361e+00,  4.81198595e+00,  3.02296488e+00,\n         8.19531061e+01,  1.06335772e+01,  0.00000000e+00,  0.00000000e+00,\n         1.71802649e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.49519356e+01,  0.00000000e+00,  0.00000000e+00,\n         2.54484143e+01,  1.30895128e+01,  0.00000000e+00,  0.00000000e+00,\n         2.34976185e+01,  0.00000000e+00,  1.49519356e+01,  0.00000000e+00,\n         1.38474744e+01,  2.37230900e+01,  5.28358632e+00,  0.00000000e+00,\n         0.00000000e+00,  1.06335772e+01,  1.18966786e+01,  0.00000000e+00,\n         1.16009399e+01,  2.80414484e+01,  0.00000000e+00,  0.00000000e+00,\n         1.38474744e+01,  0.00000000e+00,  5.28358632e+00,  0.00000000e+00,\n         0.00000000e+00,  6.27300000e+01,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  5.28358632e+00,  1.18966786e+01,  1.30895128e+01,\n         0.00000000e+00,  0.00000000e+00,  1.38474744e+01,  2.55855128e+01,\n         1.16009399e+01,  0.00000000e+00,  5.67925422e+00,  1.18800139e+01,\n         6.11716742e+00,  0.00000000e+00,  9.97129630e-01,  0.00000000e+00,\n         0.00000000e+00,  5.43754598e+00,  0.00000000e+00,  5.71428571e-01,\n         1.30000000e+01,  2.00000000e+00,  5.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  1.00000000e+00,\n         1.00000000e+00,  5.00000000e+00,  2.00000000e+00,  6.00000000e+00,\n         4.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         1.00000000e+00,  1.38860000e+00,  5.31644000e+01,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         3.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  3.00000000e+00,  2.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         2.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  1.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00]),\n array([ 3.30555556e+00,  6.25000000e-01,  3.30555556e+00,  6.25000000e-01,\n         5.53986563e-01,  1.01193000e+02,  8.60730000e+01,  1.01120449e+02,\n         4.40000000e+01,  0.00000000e+00,  1.26886528e-03, -3.12334426e-01,\n         3.12334426e-01,  1.26886528e-03,  8.57142857e-01,  1.14285714e+00,\n         1.14285714e+00,  1.49132263e+01,  1.03024859e+01,  1.91938442e+00,\n        -2.09546691e+00,  1.80350460e+00, -2.28991341e+00,  4.55298690e+00,\n         5.17965423e-01,  2.95322317e+00,  3.34446784e+01,  5.86180732e+00,\n         5.65470054e+00,  5.65470054e+00,  3.12589766e+00,  2.88675135e+00,\n         2.88675135e+00,  2.47606774e+00,  2.47606774e+00,  6.66666667e-01,\n         6.66666667e-01,  6.66666667e-01,  6.66666667e-01, -4.00000000e-02,\n         1.90935839e+01,  6.96000000e+00,  3.02685163e+00,  5.96000000e+00,\n         4.61138238e+01,  5.31678860e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  2.76949488e+01,\n         0.00000000e+00,  1.20836817e+01,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  5.31678860e+00,  0.00000000e+00,\n         3.97786305e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  5.31678860e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.20836817e+01,  0.00000000e+00,  0.00000000e+00,\n         2.76949488e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.20300000e+01,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  1.20836817e+01,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  3.30117374e+01,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         3.30555556e+00,  0.00000000e+00,  0.00000000e+00,  1.25000000e+00,\n         0.00000000e+00,  8.61111111e+00,  0.00000000e+00,  1.00000000e+00,\n         7.00000000e+00,  1.00000000e+00,  1.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.00000000e+00,  1.00000000e+00,  1.00000000e+00,\n         2.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.39280000e+00,  3.34077000e+01,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  1.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00]),\n array([ 2.27777778e+00,  9.35185185e-01,  2.27777778e+00,  9.35185185e-01,\n         4.83890298e-01,  8.61780000e+01,  7.20660000e+01,  8.61095504e+01,\n         3.80000000e+01,  0.00000000e+00, -4.48047100e-02, -6.51284736e-02,\n         6.51284736e-02,  4.48047100e-02,  1.16666667e+00,  1.50000000e+00,\n         1.50000000e+00,  1.39452152e+01,  1.00800959e+01,  1.88193668e+00,\n        -1.98321310e+00,  2.02336303e+00, -1.84544499e+00,  4.41007660e+00,\n         5.44063929e-01,  2.75418479e+00,  1.92192809e+01,  4.99156383e+00,\n         4.99156383e+00,  4.99156383e+00,  2.80806041e+00,  2.80806041e+00,\n         2.80806041e+00,  1.92166830e+00,  1.92166830e+00,  1.39384685e+00,\n         1.39384685e+00,  2.88675135e-01,  2.88675135e-01,  0.00000000e+00,\n         1.98002691e+01,  6.00000000e+00,  3.20000000e+00,  2.25000000e+00,\n         4.05639616e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  3.36128548e+01,\n         5.91790605e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  5.91790605e+00,\n         3.36128548e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  5.91790605e+00,\n         3.36128548e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  5.91790605e+00,\n         1.28416432e+01,  0.00000000e+00,  0.00000000e+00,  2.07712116e+01,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  9.35185185e-01,  0.00000000e+00,\n         2.65972222e+00,  6.73842593e+00,  0.00000000e+00,  1.00000000e+00,\n         6.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         2.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  2.44250000e+00,  2.97460000e+01,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00]),\n array([ 2.17824074e+00,  1.31129630e+00,  2.17824074e+00,  1.31129630e+00,\n         4.56410247e-01,  1.78234000e+02,  1.68154000e+02,  1.78078250e+02,\n         6.60000000e+01,  0.00000000e+00, -1.05415351e-02, -6.16289927e-02,\n         6.16289927e-02,  1.05415351e-02,  4.28571429e-01,  8.57142857e-01,\n         1.35714286e+00,  1.40079537e+01,  1.00244584e+01,  1.96621383e+00,\n        -2.01783958e+00,  2.23868778e+00, -1.75099084e+00,  6.06717061e+00,\n         1.76461911e+00,  2.61031869e+00,  5.39009099e+02,  9.38046889e+00,\n         7.77350269e+00,  7.77350269e+00,  6.94948974e+00,  4.81538414e+00,\n         4.81538414e+00,  3.50783423e+00,  3.50783423e+00,  2.65420195e+00,\n         2.65420195e+00,  1.95480742e+00,  1.95480742e+00, -1.82000000e+00,\n         3.40880776e+03,  7.57143910e+00,  2.84508362e+00,  1.00754062e+00,\n         8.27947322e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  6.06636707e+01,\n         2.15448969e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         2.15448969e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  6.06636707e+01,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  6.06636707e+01,  0.00000000e+00,  2.15448969e+01,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         2.15448969e+01,  0.00000000e+00,  0.00000000e+00,  6.06636707e+01,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         5.29962963e+00,  0.00000000e+00,  0.00000000e+00,  2.13670370e+01,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         1.40000000e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  3.00000000e+00,  0.00000000e+00,\n         3.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         3.00000000e+00,  3.99300000e+00,  6.14540000e+01,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  3.00000000e+00,  0.00000000e+00,  3.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.00000000e+00]),\n array([ 3.28472222e+00,  1.17444444e+00,  3.28472222e+00,  1.17444444e+00,\n         5.27646237e-01,  1.01193000e+02,  8.60730000e+01,  1.01120449e+02,\n         4.40000000e+01,  0.00000000e+00, -5.15514155e-03, -3.16753430e-01,\n         3.16753430e-01,  5.15514155e-03,  1.00000000e+00,  1.42857143e+00,\n         1.71428571e+00,  1.48354116e+01,  1.04186985e+01,  1.76119869e+00,\n        -1.95177923e+00,  1.71116993e+00, -2.14065707e+00,  4.39444874e+00,\n         6.61635385e-01,  2.44747289e+00,  2.33609904e+01,  5.53553391e+00,\n         5.32842712e+00,  5.32842712e+00,  3.41421356e+00,  3.12132034e+00,\n         3.12132034e+00,  1.75000000e+00,  1.75000000e+00,  8.53553391e-01,\n         8.53553391e-01,  4.78553391e-01,  4.78553391e-01, -4.00000000e-02,\n         3.55096099e+01,  6.96000000e+00,  5.96000000e+00,  5.96000000e+00,\n         4.61138238e+01,  5.31678860e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  1.38474744e+01,\n         2.59311561e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  5.31678860e+00,  0.00000000e+00,\n         2.66891176e+01,  1.30895128e+01,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  5.31678860e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.30895128e+01,  0.00000000e+00,  0.00000000e+00,\n         2.66891176e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.20300000e+01,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         2.59311561e+01,  0.00000000e+00,  0.00000000e+00,  1.91642630e+01,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         3.28472222e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         2.50000000e+00,  6.71527778e+00,  0.00000000e+00,  1.00000000e+00,\n         7.00000000e+00,  1.00000000e+00,  1.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.00000000e+00,  1.00000000e+00,  1.00000000e+00,\n         4.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.39600000e+00,  3.34517000e+01,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  1.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  2.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.00000000e+00]),\n array([ 2.37500000e+00,  1.18750000e+00,  2.37500000e+00,  1.18750000e+00,\n         5.18374870e-01,  1.01193000e+02,  8.60730000e+01,  1.01120449e+02,\n         4.40000000e+01,  0.00000000e+00, -4.74385412e-03, -3.04159943e-01,\n         3.04159943e-01,  4.74385412e-03,  8.57142857e-01,  1.14285714e+00,\n         1.14285714e+00,  1.50958000e+01,  1.04970931e+01,  1.88648579e+00,\n        -2.12860894e+00,  1.81143846e+00, -2.21123529e+00,  4.43327206e+00,\n         3.20927429e-01,  2.99230288e+00,  2.56514845e+01,  5.69867061e+00,\n         5.56853394e+00,  5.56853394e+00,  3.34606521e+00,  3.07000364e+00,\n         3.07000364e+00,  1.61950369e+00,  1.61950369e+00,  1.34164079e+00,\n         1.34164079e+00,  6.70820393e-01,  6.70820393e-01, -4.00000000e-02,\n         3.43994619e+01,  6.96000000e+00,  4.12778523e+00,  2.63114094e+00,\n         4.63237953e+01,  4.89990973e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  2.07712116e+01,\n         1.96342692e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  4.89990973e+00,  0.00000000e+00,\n         2.07712116e+01,  1.96342692e+01,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  2.45341789e+01,  0.00000000e+00,  0.00000000e+00,\n         2.07712116e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  3.24000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         1.96342692e+01,  0.00000000e+00,  0.00000000e+00,  2.56711213e+01,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  2.37500000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.01250000e+01,  0.00000000e+00,  1.00000000e+00,\n         7.00000000e+00,  0.00000000e+00,  1.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.00000000e+00,  0.00000000e+00,  1.00000000e+00,\n         3.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.34810000e+00,  3.34620000e+01,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  1.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00]),\n array([ 1.00769652e+01, -4.58888889e-01,  1.00769652e+01,  6.40740741e-02,\n         3.59543609e-01,  1.38126000e+02,  1.32078000e+02,  1.38042927e+02,\n         5.20000000e+01,  0.00000000e+00,  2.69074800e-01, -3.98722083e-01,\n         3.98722083e-01,  2.69074800e-01,  1.30000000e+00,  1.80000000e+00,\n         2.20000000e+00,  1.66282044e+01,  1.02790666e+01,  2.00410153e+00,\n        -1.89833424e+00,  2.11466526e+00, -1.88025112e+00,  5.43802429e+00,\n        -3.84428319e-01,  3.00340068e+00,  2.42429658e+02,  7.56047793e+00,\n         5.15046152e+00,  5.15046152e+00,  4.69837730e+00,  2.69879751e+00,\n         2.69879751e+00,  1.84864201e+00,  1.84864201e+00,  1.10390665e+00,\n         1.10390665e+00,  5.96037969e-01,  5.96037969e-01, -1.58000000e+00,\n         1.80912515e+02,  6.53876485e+00,  2.34499410e+00,  1.22261694e+00,\n         5.74242695e+01,  5.73366748e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  5.68738627e+00,  0.00000000e+00,  1.01143183e+01,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         1.21327341e+01,  1.78201204e+01,  4.92331105e+00,  4.92331105e+00,\n         1.13747725e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  5.73366748e+00,  3.43797865e+01,  0.00000000e+00,\n         0.00000000e+00,  5.73366748e+00,  1.13747725e+01,  0.00000000e+00,\n         0.00000000e+00,  4.92331105e+00,  0.00000000e+00,  1.01143183e+01,\n         0.00000000e+00,  2.42654683e+01,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  6.91600000e+01,  4.92331105e+00,  1.01143183e+01,\n         0.00000000e+00,  5.68738627e+00,  5.68738627e+00,  0.00000000e+00,\n         2.42654683e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         5.73366748e+00,  0.00000000e+00,  0.00000000e+00,  9.61807634e+00,\n         1.00769652e+01,  5.90125472e+00,  0.00000000e+00,  5.73703704e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         1.00000000e+01,  2.00000000e+00,  4.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  1.00000000e+00,  0.00000000e+00,\n         1.00000000e+00,  3.00000000e+00,  1.00000000e+00,  4.00000000e+00,\n         1.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         1.00000000e+00,  1.17700000e+00,  3.75088000e+01,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  1.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  1.00000000e+00,  0.00000000e+00,\n         1.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         1.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.00000000e+00,  1.00000000e+00,  1.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  3.00000000e+00]),\n array([ 3.35034722e+00,  1.16750000e+00,  3.35034722e+00,  1.16750000e+00,\n         4.29136519e-01,  1.51047000e+02,  1.39959000e+02,  1.50004412e+02,\n         3.80000000e+01,  0.00000000e+00,  3.12512957e-03, -9.28078054e-02,\n         9.28078054e-02,  3.12512957e-03,  1.33333333e+00,  2.00000000e+00,\n         2.16666667e+00,  7.99187296e+01,  1.02784986e+01,  1.76109110e+00,\n        -1.84544652e+00,  1.94995006e+00, -1.69673282e+00,  9.08886518e+00,\n         7.81495121e-01,  2.33909231e+00,  1.59001345e+01,  4.82842712e+00,\n         4.20639160e+00,  5.79238814e+00,  2.91421356e+00,  2.47436802e+00,\n         3.59583693e+00,  1.39608902e+00,  2.18908729e+00,  7.37184012e-01,\n         1.29791847e+00,  3.44491118e-01,  7.40990253e-01,  4.80000000e-01,\n         2.09863009e+01,  6.48000000e+00,  5.48000000e+00,  4.48000000e+00,\n         4.80665671e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  3.56953243e+01,\n         6.42082162e+00,  5.33008965e+00,  0.00000000e+00,  0.00000000e+00,\n         1.59299439e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         2.61862021e+01,  5.33008965e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         1.59299439e+01,  5.33008965e+00,  0.00000000e+00,  0.00000000e+00,\n         2.61862021e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         2.45925545e+01,  0.00000000e+00,  0.00000000e+00,  2.28536811e+01,\n         0.00000000e+00,  0.00000000e+00,  3.35034722e+00,  0.00000000e+00,\n         1.16750000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         4.02118056e+00,  2.21097222e+00,  0.00000000e+00,  1.00000000e+00,\n         6.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  1.00000000e+00,\n         3.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  2.57150000e+00,  3.33190000e+01,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         1.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  1.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  1.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  2.00000000e+00]),\n array([ 2.04166667e+00,  1.75000000e+00,  2.04166667e+00,  1.75000000e+00,\n         4.02816811e-01,  6.21370000e+01,  5.60890000e+01,  6.20190212e+01,\n         2.00000000e+01,  0.00000000e+00, -1.86782119e-02, -1.68861688e-01,\n         1.68861688e-01,  1.86782119e-02,  1.33333333e+00,  1.33333333e+00,\n         1.33333333e+00,  3.21662347e+01,  1.19127653e+01,  1.32296241e+00,\n        -1.50950231e+00,  1.69964471e+00, -1.25394471e+00,  7.97413207e+00,\n         2.37086793e+00,  1.63299316e+00,  2.75488750e+00,  2.70710678e+00,\n         2.40824829e+00,  3.22474487e+00,  1.41421356e+00,  8.16496581e-01,\n         2.44948974e+00,  4.08248290e-01,  1.22474487e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  3.50000000e-01,\n         2.75488750e+00,  3.35000000e+00,  2.35000000e+00,  2.35000000e+00,\n         2.52273032e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.17618849e+01,  0.00000000e+00,  0.00000000e+00,\n         1.25115384e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         1.17618849e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.25115384e+01,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         1.17618849e+01,  1.25115384e+01,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.17618849e+01,  1.25115384e+01,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  1.75000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         4.08333333e+00,  0.00000000e+00,  0.00000000e+00,  1.00000000e+00,\n         3.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.00000000e+00,  0.00000000e+00,  1.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  9.79200000e-01,  1.94390000e+01,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  1.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00]),\n array([ 5.66876543e+00,  1.09012346e-01,  5.66876543e+00,  1.09012346e-01,\n         4.29142859e-01,  2.84784000e+02,  2.84784000e+02,  2.81813116e+02,\n         6.60000000e+01,  0.00000000e+00,  8.09571906e-02, -8.09571906e-02,\n         8.09571906e-02,  8.09571906e-02,  3.33333333e-01,  4.16666667e-01,\n         5.00000000e-01,  3.55042101e+01,  1.03392660e+01,  2.16721643e+00,\n        -2.05647606e+00,  2.45477979e+00, -1.78970448e+00,  6.58647861e+00,\n         1.69209715e+00,  3.60356745e+00,  2.26303090e+02,  9.46410162e+00,\n         5.26778684e+00,  9.80336051e+00,  5.46410162e+00,  2.63389342e+00,\n         4.90168026e+00,  1.88389342e+00,  4.15168026e+00,  1.15623242e+00,\n         4.00441156e+00,  5.78116212e-01,  2.00220578e+00,  9.60000000e-01,\n         4.16314365e+02,  1.10371605e+01,  3.99646139e+00,  1.74517936e+00,\n         9.92510005e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  6.96056393e+01,\n         0.00000000e+00,  0.00000000e+00,  3.01357999e+01,  0.00000000e+00,\n         6.96056393e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  3.01357999e+01,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         6.96056393e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  3.01357999e+01,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  3.01357999e+01,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         6.96056393e+01,  0.00000000e+00,  3.40125926e+01,  0.00000000e+00,\n         6.54074074e-01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         1.20000000e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  1.00000000e+00,  0.00000000e+00,\n         1.00000000e+00,  0.00000000e+00,  0.00000000e+00,  6.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         1.00000000e+00,  5.60700000e+00,  5.65020000e+01,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  6.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  2.00000000e+00]),\n array([ 3.11111111e+00,  1.09375000e+00,  3.11111111e+00,  1.09375000e+00,\n         5.04854052e-01,  7.31390000e+01,  6.20510000e+01,  7.30891494e+01,\n         3.20000000e+01,  0.00000000e+00, -7.75136113e-03, -3.17281591e-01,\n         3.17281591e-01,  7.75136113e-03,  1.20000000e+00,  1.60000000e+00,\n         1.60000000e+00,  1.48225612e+01,  1.06682155e+01,  1.62330855e+00,\n        -1.85806053e+00,  1.47139088e+00, -2.09372364e+00,  4.27349693e+00,\n         7.62424952e-01,  2.19060969e+00,  1.11194155e+01,  4.12132034e+00,\n         3.91421356e+00,  3.91421356e+00,  2.41421356e+00,  2.12132034e+00,\n         2.12132034e+00,  9.57106781e-01,  9.57106781e-01,  5.00000000e-01,\n         5.00000000e-01,  2.50000000e-01,  2.50000000e-01, -4.00000000e-02,\n         1.12451125e+01,  4.96000000e+00,  3.96000000e+00,  3.96000000e+00,\n         3.33839396e+01,  5.31678860e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  1.38474744e+01,\n         1.30895128e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  5.31678860e+00,  0.00000000e+00,\n         1.38474744e+01,  1.30895128e+01,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  5.31678860e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.30895128e+01,  0.00000000e+00,  0.00000000e+00,\n         1.38474744e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.20300000e+01,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  1.30895128e+01,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  1.91642630e+01,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         3.11111111e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  6.38888889e+00,  0.00000000e+00,  1.00000000e+00,\n         5.00000000e+00,  1.00000000e+00,  1.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.00000000e+00,  1.00000000e+00,  1.00000000e+00,\n         2.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  6.15800000e-01,  2.42177000e+01,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  1.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00]),\n array([ 3.94509259e+00,  1.25694444e+00,  3.94509259e+00,  1.25694444e+00,\n         4.91387777e-01,  1.07156000e+02,  9.80840000e+01,  1.07073499e+02,\n         4.20000000e+01,  0.00000000e+00,  2.99178078e-02, -2.64439005e-01,\n         2.64439005e-01,  2.99178078e-02,  1.25000000e+00,  2.00000000e+00,\n         2.37500000e+00,  1.46086408e+01,  1.01841410e+01,  1.84484521e+00,\n        -1.92210360e+00,  1.99596878e+00, -1.78474440e+00,  5.18224807e+00,\n         1.21650415e+00,  3.13486151e+00,  1.60496629e+02,  5.98312766e+00,\n         5.17926440e+00,  5.17926440e+00,  3.80453045e+00,  2.67708138e+00,\n         2.67708138e+00,  1.95993391e+00,  1.95993391e+00,  1.30079513e+00,\n         1.30079513e+00,  5.42936472e-01,  5.42936472e-01, -8.50000000e-01,\n         7.24952658e+01,  5.28986014e+00,  1.94826212e+00,  8.60936931e-01,\n         4.93809353e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  4.98397852e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         3.10407445e+01,  1.23936871e+01,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  4.98397852e+00,  0.00000000e+00,\n         1.38474744e+01,  0.00000000e+00,  2.95869572e+01,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  4.98397852e+00,  0.00000000e+00,  1.38474744e+01,\n         1.11269030e+01,  1.84600542e+01,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.28900000e+01,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         1.11269030e+01,  0.00000000e+00,  1.84600542e+01,  1.88314529e+01,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  3.94509259e+00,\n         0.00000000e+00,  2.56250000e+00,  0.00000000e+00,  2.00925926e+00,\n         3.67824074e+00,  4.13824074e+00,  0.00000000e+00,  2.85714286e-01,\n         8.00000000e+00,  0.00000000e+00,  1.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  1.00000000e+00,\n         1.00000000e+00,  1.00000000e+00,  0.00000000e+00,  1.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         1.00000000e+00,  1.69844000e+00,  3.37110000e+01,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         1.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  1.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  2.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         1.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00]),\n array([ 3.30951389e+00,  1.15625000e+00,  3.30951389e+00,  1.15625000e+00,\n         5.11382120e-01,  1.37020000e+02,  1.27948000e+02,  1.35988762e+02,\n         3.20000000e+01,  0.00000000e+00,  3.11522271e-03, -9.28079851e-02,\n         9.28079851e-02,  3.11522271e-03,  1.60000000e+00,  2.20000000e+00,\n         2.20000000e+00,  7.99187295e+01,  1.03915837e+01,  1.69353127e+00,\n        -1.77254969e+00,  1.88830627e+00, -1.63932624e+00,  9.08886457e+00,\n         9.01781266e-01,  2.19060969e+00,  1.11194155e+01,  4.12132034e+00,\n         3.49928482e+00,  5.08528136e+00,  2.41421356e+00,  1.97436802e+00,\n         3.09583693e+00,  1.04253563e+00,  1.83553390e+00,  4.87184012e-01,\n         1.04791847e+00,  1.33630621e-01,  6.94365075e-01,  4.80000000e-01,\n         1.12451125e+01,  5.48000000e+00,  4.48000000e+00,  4.48000000e+00,\n         4.17016250e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  2.92745027e+01,\n         6.42082162e+00,  5.33008965e+00,  0.00000000e+00,  0.00000000e+00,\n         1.59299439e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         1.97653804e+01,  5.33008965e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         1.59299439e+01,  5.33008965e+00,  0.00000000e+00,  0.00000000e+00,\n         1.97653804e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  5.33008965e+00,\n         1.28416432e+01,  0.00000000e+00,  0.00000000e+00,  2.28536811e+01,\n         0.00000000e+00,  0.00000000e+00,  3.30951389e+00,  0.00000000e+00,\n         1.15625000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         2.60243056e+00,  2.18180556e+00,  0.00000000e+00,  1.00000000e+00,\n         5.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  1.00000000e+00,\n         2.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  2.18140000e+00,  2.87020000e+01,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         1.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  1.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.00000000e+00]),\n array([ 3.98379630e+00,  1.22685185e+00,  3.98379630e+00,  1.22685185e+00,\n         4.91387777e-01,  1.07156000e+02,  9.80840000e+01,  1.07073499e+02,\n         4.20000000e+01,  0.00000000e+00,  2.96746901e-02, -2.64181802e-01,\n         2.64181802e-01,  2.96746901e-02,  1.12500000e+00,  1.62500000e+00,\n         1.87500000e+00,  1.46124863e+01,  1.02332221e+01,  1.81448252e+00,\n        -1.89462393e+00,  1.96271046e+00, -1.76416559e+00,  5.13697720e+00,\n         1.22010647e+00,  3.07766044e+00,  1.64246629e+02,  5.98312766e+00,\n         5.17926440e+00,  5.17926440e+00,  3.78769370e+00,  2.67109832e+00,\n         2.67109832e+00,  2.03964153e+00,  2.03964153e+00,  1.01168309e+00,\n         1.01168309e+00,  7.06057650e-01,  7.06057650e-01, -8.50000000e-01,\n         6.40524865e+01,  5.28986014e+00,  1.94826212e+00,  1.05940309e+00,\n         4.93809353e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  4.98397852e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  6.06636707e+00,\n         2.49743774e+01,  1.23936871e+01,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  4.98397852e+00,  0.00000000e+00,\n         1.38474744e+01,  0.00000000e+00,  2.95869572e+01,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  4.98397852e+00,  0.00000000e+00,  1.38474744e+01,\n         1.11269030e+01,  1.84600542e+01,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.28900000e+01,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         1.11269030e+01,  0.00000000e+00,  2.62411615e+01,  1.10503456e+01,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  3.98379630e+00,\n         0.00000000e+00,  2.45370370e+00,  0.00000000e+00,  2.10416667e+00,\n         3.70833333e+00,  4.08333333e+00,  0.00000000e+00,  2.85714286e-01,\n         8.00000000e+00,  0.00000000e+00,  1.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  1.00000000e+00,\n         1.00000000e+00,  1.00000000e+00,  0.00000000e+00,  1.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         1.00000000e+00,  1.69844000e+00,  3.37110000e+01,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         1.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  1.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  2.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         1.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00]),\n array([ 4.94444444e+00,  1.00000000e+00,  4.94444444e+00,  1.00000000e+00,\n         4.10937601e-01,  7.21070000e+01,  6.40430000e+01,  7.20575149e+01,\n         3.00000000e+01,  0.00000000e+00,  4.66381698e-02, -3.81449382e-01,\n         3.81449382e-01,  4.66381698e-02,  1.00000000e+00,  1.60000000e+00,\n         1.80000000e+00,  1.64780809e+01,  1.03935840e+01,  1.94274709e+00,\n        -1.76402578e+00,  1.97825977e+00, -1.74302670e+00,  4.43175190e+00,\n         1.97833493e-01,  2.08333333e+00,  1.52192809e+01,  3.53553391e+00,\n         3.23667542e+00,  3.23667542e+00,  2.50000000e+00,  2.07735027e+00,\n         2.07735027e+00,  1.31947922e+00,  1.31947922e+00,  8.27350269e-01,\n         8.27350269e-01,  5.10310363e-01,  5.10310363e-01, -4.00000000e-02,\n         2.28864354e+01,  3.16161290e+00,  1.41031217e+00,  6.18363684e-01,\n         3.19417914e+01,  4.73686295e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         1.28416432e+01,  1.32137639e+01,  0.00000000e+00,  4.73686295e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         1.28416432e+01,  1.32137639e+01,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.32137639e+01,  4.73686295e+00,  0.00000000e+00,\n         1.28416432e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  9.23000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  1.32137639e+01,\n         1.28416432e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         4.73686295e+00,  4.94444444e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         2.55555556e+00,  2.00000000e+00,  0.00000000e+00,  1.00000000e+00,\n         5.00000000e+00,  0.00000000e+00,  1.00000000e+00,  0.00000000e+00,\n         1.00000000e+00,  1.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.00000000e+00,  0.00000000e+00,  1.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  1.00000000e+00,  1.00000000e+00,\n         1.00000000e+00,  7.96800000e-01,  2.00530000e+01,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         1.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00]),\n array([ 6.09741749e+00,  3.28920225e-01,  6.09741749e+00,  3.28920225e-01,\n         5.16501532e-01,  3.26437000e+02,  3.21397000e+02,  3.23883389e+02,\n         8.80000000e+01,  0.00000000e+00,  7.78399273e-02, -8.43196021e-02,\n         8.43196021e-02,  7.78399273e-02,  6.47058824e-01,  1.23529412e+00,\n         1.82352941e+00,  3.55014616e+01,  1.00604250e+01,  2.09892838e+00,\n        -2.07719874e+00,  2.37620485e+00, -1.81977816e+00,  6.47959522e+00,\n         1.61281827e+00,  2.64383842e+00,  5.54098938e+02,  1.25769858e+01,\n         8.27657371e+00,  1.20562184e+01,  7.98607100e+00,  4.58764559e+00,\n         6.47746796e+00,  3.37804266e+00,  5.41404329e+00,  2.22322857e+00,\n         3.98476049e+00,  1.42973882e+00,  2.42467147e+00, -1.10000000e-01,\n         6.46645555e+03,  1.33246792e+01,  5.25592539e+00,  2.83400519e+00,\n         1.24004828e+02,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  5.80046995e+01,\n         3.58952868e+01,  1.56087181e+01,  1.50678999e+01,  0.00000000e+00,\n         5.80046995e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  5.54450019e+01,  0.00000000e+00,\n         1.11269030e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         5.80046995e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  3.03318353e+01,  2.51131666e+01,  1.11269030e+01,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  2.51131666e+01,  1.11269030e+01,\n         0.00000000e+00,  3.03318353e+01,  0.00000000e+00,  0.00000000e+00,\n         5.80046995e+01,  0.00000000e+00,  2.98468645e+01,  0.00000000e+00,\n         2.25102057e+00,  1.53845679e+00,  0.00000000e+00,  8.58588040e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         1.70000000e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  2.00000000e+00,  0.00000000e+00,\n         2.00000000e+00,  0.00000000e+00,  0.00000000e+00,  5.00000000e+00,\n         1.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         2.00000000e+00,  6.62060000e+00,  7.69280000e+01,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  2.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  5.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.00000000e+00]),\n array([ 2.24074074e+00,  1.33388889e+00,  2.24074074e+00,  1.33388889e+00,\n         5.47649245e-01,  1.56228000e+02,  1.44132000e+02,  1.56093900e+02,\n         6.00000000e+01,  0.00000000e+00, -1.81207942e-02, -6.16295429e-02,\n         6.16295429e-02,  1.81207942e-02,  7.50000000e-01,  1.16666667e+00,\n         1.58333333e+00,  1.39982973e+01,  1.00325351e+01,  1.94668326e+00,\n        -2.01937093e+00,  2.17799834e+00, -1.80140334e+00,  5.83386919e+00,\n         1.36532890e+00,  2.83951994e+00,  3.72807866e+02,  8.55204176e+00,\n         7.46410162e+00,  7.46410162e+00,  5.77085695e+00,  4.23205081e+00,\n         4.23205081e+00,  3.28361765e+00,  3.28361765e+00,  2.36203669e+00,\n         2.36203669e+00,  1.46796632e+00,  1.46796632e+00, -1.30000000e+00,\n         7.21482141e+02,  7.35454014e+00,  2.63255405e+00,  1.09542144e+00,\n         7.28429519e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  3.63982024e+01,\n         3.57468258e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         1.07724484e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         1.38474744e+01,  0.00000000e+00,  4.75251054e+01,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  1.38474744e+01,\n         1.11269030e+01,  3.63982024e+01,  0.00000000e+00,  1.07724484e+01,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         2.18993514e+01,  0.00000000e+00,  0.00000000e+00,  5.02456768e+01,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         2.66777778e+00,  2.73833333e+00,  0.00000000e+00,  1.29514815e+01,\n         0.00000000e+00,  4.30907407e+00,  0.00000000e+00,  1.66666667e-01,\n         1.20000000e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  2.00000000e+00,  0.00000000e+00,\n         2.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         2.00000000e+00,  3.45664000e+00,  5.34220000e+01,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  2.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  2.00000000e+00,  0.00000000e+00,  1.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00]),\n array([ 3.28472222e+00,  1.25000000e+00,  3.28472222e+00,  1.25000000e+00,\n         4.57636228e-01,  8.51500000e+01,  7.40620000e+01,  8.50891494e+01,\n         3.60000000e+01,  0.00000000e+00, -4.89114001e-03, -3.16732581e-01,\n         3.16732581e-01,  4.89114001e-03,  8.33333333e-01,  1.50000000e+00,\n         1.66666667e+00,  1.48519096e+01,  1.01695466e+01,  1.93163566e+00,\n        -2.08175022e+00,  1.95940648e+00, -2.20553993e+00,  4.54510536e+00,\n         5.20040197e-01,  2.00000000e+00,  1.94099095e+01,  4.24264069e+00,\n         4.03553391e+00,  4.03553391e+00,  3.00000000e+00,  2.70710678e+00,\n         2.70710678e+00,  1.81066017e+00,  1.81066017e+00,  1.20710678e+00,\n         1.20710678e+00,  8.01776695e-01,  8.01776695e-01, -4.00000000e-02,\n         3.43994619e+01,  4.12778523e+00,  2.18967434e+00,  9.76756002e-01,\n         3.87430505e+01,  5.31678860e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  6.42082162e+00,\n         2.59311561e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  5.31678860e+00,  0.00000000e+00,\n         1.92624649e+01,  1.30895128e+01,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  5.31678860e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.30895128e+01,  0.00000000e+00,  0.00000000e+00,\n         1.92624649e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.20300000e+01,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         3.23519777e+01,  0.00000000e+00,  0.00000000e+00,  5.31678860e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         3.28472222e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         4.21527778e+00,  2.50000000e+00,  0.00000000e+00,  1.00000000e+00,\n         6.00000000e+00,  1.00000000e+00,  1.00000000e+00,  0.00000000e+00,\n         1.00000000e+00,  1.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.00000000e+00,  1.00000000e+00,  1.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  1.00000000e+00,  1.00000000e+00,\n         1.00000000e+00,  7.59900000e-01,  2.67207000e+01,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  1.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         1.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00]),\n array([ 6.05404589e+00,  2.92194192e-01,  6.05404589e+00,  2.92194192e-01,\n         5.05001794e-01,  2.87529000e+02,  2.82489000e+02,  2.85935512e+02,\n         8.60000000e+01,  0.00000000e+00,  1.91292499e-01, -4.47862107e-01,\n         4.47862107e-01,  1.91292499e-01,  7.64705882e-01,  1.35294118e+00,\n         2.00000000e+00,  3.54990159e+01,  1.02261226e+01,  2.24928756e+00,\n        -2.21954879e+00,  2.52896306e+00, -1.99643182e+00,  6.44408958e+00,\n         3.59760397e-01,  2.20891285e+00,  6.10940003e+02,  1.19911994e+01,\n         8.33714135e+00,  1.06049282e+01,  8.16470380e+00,  4.78814383e+00,\n         5.92203725e+00,  3.46330255e+00,  4.65566728e+00,  2.35882564e+00,\n         3.40964347e+00,  1.58172794e+00,  2.24496444e+00, -1.09000000e+00,\n         1.05026154e+04,  1.10264140e+01,  3.98386403e+00,  1.72910975e+00,\n         1.12619555e+02,  9.47372591e+00,  5.02263331e+00,  2.29980473e+01,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  4.69355538e+01,\n         1.81991012e+01,  0.00000000e+00,  1.00452666e+01,  9.47372591e+00,\n         3.48028197e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  4.53997353e+01,  0.00000000e+00,\n         2.29980473e+01,  9.47372591e+00,  0.00000000e+00,  2.29980473e+01,\n         3.48028197e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  3.03318353e+01,  1.50678999e+01,  0.00000000e+00,\n         0.00000000e+00,  1.84600000e+01,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  3.80659473e+01,  0.00000000e+00,\n         6.06636707e+00,  1.21327341e+01,  1.21327341e+01,  0.00000000e+00,\n         4.42765456e+01,  1.12880247e+01,  1.80179433e+01,  0.00000000e+00,\n         9.88769054e-01,  0.00000000e+00,  1.91958869e+00,  8.78567427e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         1.70000000e+01,  0.00000000e+00,  2.00000000e+00,  0.00000000e+00,\n         1.00000000e+00,  1.00000000e+00,  2.00000000e+00,  0.00000000e+00,\n         2.00000000e+00,  2.00000000e+00,  0.00000000e+00,  5.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         3.00000000e+00,  5.54480000e+00,  6.80620000e+01,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  2.00000000e+00,  0.00000000e+00,  2.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         2.00000000e+00,  0.00000000e+00,  0.00000000e+00,  3.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  2.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.00000000e+00]),\n array([ 1.19023148e+01, -1.68825113e+00,  1.19023148e+01,  2.54004630e-01,\n         3.23312311e-01,  3.00594000e+02,  2.92530000e+02,  2.98934133e+02,\n         8.80000000e+01,  0.00000000e+00,  2.56394464e-01, -2.73107652e-01,\n         2.73107652e-01,  2.56394464e-01,  1.12500000e+00,  1.56250000e+00,\n         1.93750000e+00,  3.55839205e+01,  9.85191880e+00,  2.49399363e+00,\n        -2.17370589e+00,  2.46270470e+00, -2.26474235e+00,  8.03074784e+00,\n        -1.32766644e-01,  2.17985753e+00,  3.40255824e+02,  1.19222853e+01,\n         8.02946653e+00,  1.11137499e+01,  7.39966547e+00,  4.68611702e+00,\n         6.59340711e+00,  3.66367594e+00,  7.77732441e+00,  2.66192538e+00,\n         4.03246794e+00,  1.96335107e+00,  3.24216192e+00,  1.00000000e-01,\n         3.86743012e+03,  1.25541568e+01,  4.40690976e+00,  2.34828952e+00,\n         1.12208687e+02,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         1.18143595e+01,  3.12456792e+00,  0.00000000e+00,  9.58907437e+00,\n         4.30521599e+00,  0.00000000e+00,  0.00000000e+00,  4.69548599e+01,\n         1.28416432e+01,  1.19479230e+01,  1.18358121e+01,  9.58907437e+00,\n         5.85651021e+01,  0.00000000e+00,  4.30521599e+00,  1.18358121e+01,\n         1.59662112e+01,  0.00000000e+00,  1.21520402e+01,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         4.67507426e+01,  1.92441434e+01,  9.58907437e+00,  1.18358121e+01,\n         1.28416432e+01,  1.21520402e+01,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  3.73800000e+01,  3.12456792e+00,  9.58907437e+00,\n         0.00000000e+00,  2.36501716e+01,  2.47895662e+01,  4.30521599e+00,\n         0.00000000e+00,  0.00000000e+00,  1.21520402e+01,  0.00000000e+00,\n         3.48028197e+01, -6.92880763e-01,  1.73694038e+01,  2.38046296e+01,\n         0.00000000e+00,  0.00000000e+00, -1.06847222e+00,  0.00000000e+00,\n         5.00398621e+00,  0.00000000e+00,  0.00000000e+00,  5.55555556e-01,\n         1.60000000e+01,  0.00000000e+00,  3.00000000e+00,  1.00000000e+00,\n         1.00000000e+00,  2.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  3.00000000e+00,  0.00000000e+00,  7.00000000e+00,\n         1.00000000e+00,  0.00000000e+00,  1.00000000e+00,  1.00000000e+00,\n         2.00000000e+00,  2.91350000e+00,  6.50880000e+01,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  2.00000000e+00,  2.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  1.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         3.00000000e+00,  2.00000000e+00,  2.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  1.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  3.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  1.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         2.00000000e+00,  0.00000000e+00,  0.00000000e+00,  2.00000000e+00,\n         0.00000000e+00,  4.00000000e+00]),\n array([ 2.34333333e+00,  8.03333333e-01,  2.34333333e+00,  8.03333333e-01,\n         3.83896713e-01,  1.69993000e+02,  1.62937000e+02,  1.69959248e+02,\n         2.60000000e+01,  0.00000000e+00,  5.29551870e-03, -8.32238287e-02,\n         8.32238287e-02,  5.29551870e-03,  1.50000000e+00,  1.50000000e+00,\n         1.50000000e+00,  1.26912705e+02,  1.05929916e+01,  1.70430583e+00,\n        -1.76055242e+00,  1.90869252e+00, -1.68562146e+00,  1.41092694e+01,\n         1.16254141e+00,  2.32379001e+00,  8.00000000e+00,  3.57735027e+00,\n         2.95531474e+00,  5.11281303e+00,  1.73205081e+00,  1.37291843e+00,\n         2.61855065e+00,  1.01378605e+00,  3.50505049e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  7.30000000e-01,\n         3.24511250e+00,  4.73000000e+00,  1.99809651e+00,  1.53323644e+01,\n         4.07309734e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  3.64383450e+01,\n         0.00000000e+00,  3.92463683e+00,  0.00000000e+00,  0.00000000e+00,\n         2.25908706e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         1.77721112e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         2.25908706e+01,  3.92463683e+00,  0.00000000e+00,  0.00000000e+00,\n         1.38474744e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  3.92463683e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  3.64383450e+01,\n         0.00000000e+00,  8.03333333e-01,  2.34333333e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  4.30666667e+00,  0.00000000e+00,  1.00000000e+00,\n         4.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  1.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.82980000e+00,  2.91560000e+01,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         1.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  1.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  2.00000000e+00]),\n array([ 1.01587037e+01, -3.95833333e-01,  1.01587037e+01,  1.52777778e-01,\n         4.37911866e-01,  1.37138000e+02,  1.30082000e+02,  1.37047678e+02,\n         5.20000000e+01,  0.00000000e+00,  2.69187287e-01, -2.58309495e-01,\n         2.69187287e-01,  2.58309495e-01,  1.50000000e+00,  2.20000000e+00,\n         2.60000000e+00,  1.66282069e+01,  1.02091436e+01,  2.01079943e+00,\n        -1.90114499e+00,  2.10649783e+00, -1.86290881e+00,  5.32695790e+00,\n        -3.84467131e-01,  3.06989927e+00,  2.57537949e+02,  7.56047793e+00,\n         5.57311125e+00,  5.57311125e+00,  4.69837730e+00,  2.91012237e+00,\n         2.91012237e+00,  2.09611327e+00,  2.09611327e+00,  1.21247491e+00,\n         1.21247491e+00,  7.41532939e-01,  7.41532939e-01, -1.38000000e+00,\n         1.78192787e+02,  6.73600928e+00,  2.47319690e+00,  1.31284033e+00,\n         5.84493210e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  5.68738627e+00,  0.00000000e+00,  1.01143183e+01,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  1.21327341e+01,\n         1.24871887e+01,  1.21327341e+01,  4.92331105e+00,  4.92331105e+00,\n         5.68738627e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         6.92373720e+00,  0.00000000e+00,  3.99432380e+01,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  5.68738627e+00,  0.00000000e+00,\n         0.00000000e+00,  4.92331105e+00,  0.00000000e+00,  1.70380555e+01,\n         5.56345149e+00,  2.42654683e+01,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  4.31400000e+01,  4.92331105e+00,  1.01143183e+01,\n         0.00000000e+00,  5.68738627e+00,  0.00000000e+00,  5.56345149e+00,\n         6.06636707e+00,  1.21327341e+01,  1.29901043e+01,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  9.76287037e+00,\n         1.01587037e+01,  1.06407407e+00,  0.00000000e+00,  6.52129630e+00,\n         0.00000000e+00,  1.82638889e+00,  0.00000000e+00,  1.42857143e-01,\n         1.00000000e+01,  0.00000000e+00,  3.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  1.00000000e+00,  0.00000000e+00,\n         1.00000000e+00,  2.00000000e+00,  0.00000000e+00,  3.00000000e+00,\n         1.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         1.00000000e+00,  1.90322000e+00,  3.78334000e+01,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  1.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.00000000e+00,  1.00000000e+00,  1.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  2.00000000e+00]),\n array([ 2.21296296e+00,  6.53333333e-01,  2.21296296e+00,  6.53333333e-01,\n         5.53258492e-01,  1.34222000e+02,  1.20110000e+02,  1.34109550e+02,\n         5.40000000e+01,  0.00000000e+00, -2.18820531e-02, -5.90419922e-02,\n         5.90419922e-02,  2.18820531e-02,  1.00000000e+00,  1.50000000e+00,\n         1.90000000e+00,  1.40042386e+01,  1.00244825e+01,  1.94837423e+00,\n        -2.03165315e+00,  2.13152767e+00, -1.84867221e+00,  5.22817704e+00,\n         8.65844210e-01,  2.89376278e+00,  1.93783225e+02,  7.56047793e+00,\n         6.88675135e+00,  6.88675135e+00,  4.69837730e+00,  3.76474288e+00,\n         3.76474288e+00,  3.06538414e+00,  3.06538414e+00,  1.74401694e+00,\n         1.74401694e+00,  9.51353092e-01,  9.51353092e-01, -7.80000000e-01,\n         1.80912515e+02,  7.32845987e+00,  2.86948396e+00,  1.59828807e+00,\n         6.28911716e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  4.36763942e+01,\n         1.84050947e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         2.66891176e+01,  0.00000000e+00,  3.53923713e+01,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  6.92373720e+00,\n         3.08922834e+01,  2.42654683e+01,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  5.91790605e+00,  0.00000000e+00,\n         1.11269030e+01,  0.00000000e+00,  0.00000000e+00,  4.50366799e+01,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  2.75925926e+00,  6.53333333e-01,  8.71296296e+00,\n         0.00000000e+00,  6.54111111e+00,  0.00000000e+00,  4.00000000e-01,\n         1.00000000e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  1.00000000e+00,  0.00000000e+00,\n         1.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         1.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         1.00000000e+00,  3.11842000e+00,  4.52680000e+01,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00]),\n array([ 3.84555556e+00,  1.25925926e+00,  3.84555556e+00,  1.25925926e+00,\n         4.71998368e-01,  9.31290000e+01,  8.60730000e+01,  9.30578492e+01,\n         3.60000000e+01,  0.00000000e+00,  2.69930048e-02, -2.64716634e-01,\n         2.64716634e-01,  2.69930048e-02,  1.28571429e+00,  1.85714286e+00,\n         2.14285714e+00,  1.46003855e+01,  1.03130645e+01,  1.72460058e+00,\n        -1.81768481e+00,  1.88278484e+00, -1.68130354e+00,  5.05160634e+00,\n         1.28670719e+00,  3.02146531e+00,  1.34107370e+02,  5.11288418e+00,\n         4.25661467e+00,  4.25661467e+00,  3.39384685e+00,  2.26041472e+00,\n         2.26041472e+00,  1.52456386e+00,  1.52456386e+00,  8.46987215e-01,\n         8.46987215e-01,  4.26449747e-01,  4.26449747e-01, -8.50000000e-01,\n         4.71972526e+01,  4.31260163e+00,  1.73496748e+00,  9.99576996e-01,\n         4.30159932e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  4.98397852e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         2.46199228e+01,  1.23936871e+01,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  4.98397852e+00,  0.00000000e+00,\n         6.92373720e+00,  0.00000000e+00,  3.00898728e+01,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  4.98397852e+00,  0.00000000e+00,  6.92373720e+00,\n         5.56345149e+00,  2.45264213e+01,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.28900000e+01,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         5.56345149e+00,  1.23936871e+01,  1.90564713e+01,  4.98397852e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  3.84555556e+00,\n         0.00000000e+00,  1.25925926e+00,  0.00000000e+00,  3.94444444e+00,\n         3.57407407e+00,  2.04333333e+00,  0.00000000e+00,  1.66666667e-01,\n         7.00000000e+00,  0.00000000e+00,  1.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  1.00000000e+00,\n         1.00000000e+00,  1.00000000e+00,  0.00000000e+00,  1.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         1.00000000e+00,  1.39002000e+00,  2.89740000e+01,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         1.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  1.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         1.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00]),\n array([ 5.31444444e+00,  9.54861111e-01,  5.31444444e+00,  9.54861111e-01,\n         5.02074900e-01,  1.30231000e+02,  1.12087000e+02,  1.30135765e+02,\n         5.60000000e+01,  0.00000000e+00,  4.65432723e-02, -3.81452815e-01,\n         3.81452815e-01,  4.65432723e-02,  8.88888889e-01,  1.33333333e+00,\n         1.66666667e+00,  1.64728492e+01,  1.03334121e+01,  1.83950244e+00,\n        -1.99058085e+00,  1.90770816e+00, -1.94651282e+00,  4.33395711e+00,\n         1.28234750e-01,  2.59508271e+00,  3.78322939e+01,  6.94974747e+00,\n         6.65088898e+00,  6.65088898e+00,  4.41421356e+00,  3.99156383e+00,\n         3.99156383e+00,  2.31947922e+00,  2.31947922e+00,  1.28445705e+00,\n         1.28445705e+00,  5.94861352e-01,  5.94861352e-01, -4.00000000e-02,\n         1.03687916e+02,  8.96000000e+00,  7.96000000e+00,  7.96000000e+00,\n         5.84073911e+01,  4.73686295e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  2.66891176e+01,\n         1.28416432e+01,  1.32137639e+01,  0.00000000e+00,  4.73686295e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         3.95307609e+01,  1.32137639e+01,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.32137639e+01,  4.73686295e+00,  0.00000000e+00,\n         3.95307609e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  9.23000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  1.32137639e+01,\n         2.56832865e+01,  0.00000000e+00,  0.00000000e+00,  1.38474744e+01,\n         4.73686295e+00,  5.31444444e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         4.90841128e+00,  6.27714427e+00,  0.00000000e+00,  1.00000000e+00,\n         9.00000000e+00,  0.00000000e+00,  1.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.00000000e+00,  0.00000000e+00,  1.00000000e+00,\n         6.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  2.60320000e+00,  4.06350000e+01,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         1.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  4.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.00000000e+00]),\n array([ 1.03484722e+01, -1.04768519e-01,  1.03484722e+01,  1.04768519e-01,\n         5.20098668e-01,  1.16160000e+02,  1.04064000e+02,  1.16083730e+02,\n         4.80000000e+01,  0.00000000e+00,  3.05001658e-01, -4.68995429e-01,\n         4.68995429e-01,  3.05001658e-01,  1.62500000e+00,  2.25000000e+00,\n         2.62500000e+00,  1.65229348e+01,  1.02513999e+01,  1.94666262e+00,\n        -1.93164154e+00,  1.93509996e+00, -1.97734511e+00,  5.68446738e+00,\n        -1.40226693e-01,  2.98859865e+00,  6.89287869e+01,  6.40577739e+00,\n         5.43781692e+00,  5.43781692e+00,  3.80806041e+00,  2.87715675e+00,\n         2.87715675e+00,  1.67968600e+00,  1.67968600e+00,  9.62125132e-01,\n         9.62125132e-01,  4.23176335e-01,  4.23176335e-01, -5.30000000e-01,\n         5.66256323e+01,  7.47000000e+00,  4.62455951e+00,  3.65281536e+00,\n         4.98390289e+01,  4.73686295e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  5.96930529e+00,  4.79453718e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  1.33445588e+01,\n         6.42082162e+00,  6.42082162e+00,  7.10979754e+00,  9.53140014e+00,\n         5.96930529e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         2.61862021e+01,  7.10979754e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.30791028e+01,  9.53140014e+00,  0.00000000e+00,\n         2.61862021e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  2.63000000e+01,  0.00000000e+00,  4.79453718e+00,\n         0.00000000e+00,  5.96930529e+00,  6.42082162e+00,  1.28416432e+01,\n         7.10979754e+00,  0.00000000e+00,  6.92373720e+00,  4.73686295e+00,\n         0.00000000e+00,  4.41333333e+00,  0.00000000e+00,  1.03484722e+01,\n         0.00000000e+00,  0.00000000e+00, -1.04768519e-01,  0.00000000e+00,\n         2.55037037e+00,  2.04458333e+00,  1.41467593e+00,  8.33333333e-01,\n         8.00000000e+00,  0.00000000e+00,  2.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  2.00000000e+00,  0.00000000e+00,  2.00000000e+00,\n         3.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.34960000e+00,  3.15410000e+01,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.00000000e+00,  1.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  1.00000000e+00,\n         1.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  1.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.00000000e+00]),\n array([ 2.35138889e+00,  1.28944444e+00,  2.35138889e+00,  1.28944444e+00,\n         4.15569799e-01,  1.69993000e+02,  1.62937000e+02,  1.69959248e+02,\n         2.60000000e+01,  0.00000000e+00, -7.35305872e-04, -8.63867543e-02,\n         8.63867543e-02,  7.35305872e-04,  1.75000000e+00,  2.00000000e+00,\n         2.00000000e+00,  1.26912704e+02,  1.05951313e+01,  1.58138592e+00,\n        -1.65599575e+00,  1.81332541e+00, -1.53633415e+00,  1.41087565e+01,\n         1.12926357e+00,  1.97474487e+00,  5.24511250e+00,  3.41421356e+00,\n         2.79217804e+00,  4.94967633e+00,  1.91421356e+00,  1.47436802e+00,\n         2.99994970e+00,  6.88982237e-01,  1.76773138e+00,  1.88982237e-01,\n         1.26773138e+00,  0.00000000e+00,  0.00000000e+00,  7.30000000e-01,\n         6.85475297e+00,  4.73000000e+00,  3.73000000e+00,  2.73000000e+00,\n         4.07309734e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  2.95146078e+01,\n         1.08483740e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         2.25908706e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         1.33445588e+01,  4.42755240e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         2.25908706e+01,  4.42755240e+00,  0.00000000e+00,  0.00000000e+00,\n         1.33445588e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         1.08483740e+01,  0.00000000e+00,  0.00000000e+00,  2.95146078e+01,\n         0.00000000e+00,  1.28944444e+00,  2.35138889e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         1.30611111e+00,  2.17305556e+00,  0.00000000e+00,  1.00000000e+00,\n         4.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  1.00000000e+00,\n         1.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.83140000e+00,  2.91780000e+01,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         1.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  1.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  2.00000000e+00]),\n array([ 2.15000000e+00,  1.97000000e+00,  2.15000000e+00,  1.97000000e+00,\n         3.49907335e-01,  1.41939000e+02,  1.38915000e+02,  1.41927948e+02,\n         1.40000000e+01,  0.00000000e+00, -1.20973350e-02, -9.01343584e-02,\n         9.01343584e-02,  1.20973350e-02,  1.50000000e+00,  1.50000000e+00,\n         1.50000000e+00,  1.26912703e+02,  1.20022969e+01,  9.49645086e-01,\n        -1.05187678e+00,  1.47977869e+00, -7.97578690e-01,  1.41080664e+01,\n         2.66493358e+00,  1.00000000e+00,  2.00000000e+00,  2.00000000e+00,\n         1.37796447e+00,  3.53546276e+00,  1.00000000e+00,  3.77964473e-01,\n         2.53546276e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  7.30000000e-01,\n         2.00000000e+00,  2.73000000e+00,  1.73000000e+00,  9.98630137e-02,\n         2.80010891e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  2.25908706e+01,\n         4.93046798e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         2.25908706e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  4.93046798e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         2.25908706e+01,  4.93046798e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  4.93046798e+00,  2.25908706e+01,\n         0.00000000e+00,  0.00000000e+00,  2.15000000e+00,  1.97000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  1.00000000e+00,\n         2.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  1.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.05120000e+00,  1.99440000e+01,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         1.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  1.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  2.00000000e+00]),\n array([ 1.06053704e+01,  5.84259259e-02,  1.06053704e+01,  5.84259259e-02,\n         5.23743595e-01,  1.21139000e+02,  1.14083000e+02,  1.21052764e+02,\n         4.60000000e+01,  0.00000000e+00,  1.60847338e-01, -2.94450771e-01,\n         2.94450771e-01,  1.60847338e-01,  1.66666667e+00,  2.44444444e+00,\n         2.77777778e+00,  1.61374232e+01,  1.02055287e+01,  1.93375656e+00,\n        -1.88267458e+00,  1.94100830e+00, -1.89970775e+00,  5.93050035e+00,\n         1.01265112e-01,  2.98145461e+00,  2.05415953e+02,  6.69023444e+00,\n         5.16486296e+00,  5.16486296e+00,  4.30453045e+00,  2.71453886e+00,\n         2.71453886e+00,  1.79788662e+00,  1.79788662e+00,  1.06806320e+00,\n         1.06806320e+00,  5.71014931e-01,  5.71014931e-01, -1.18000000e+00,\n         1.29225339e+02,  5.94787724e+00,  2.39556174e+00,  1.35339301e+00,\n         5.35424574e+01,  0.00000000e+00,  0.00000000e+00,  5.78324495e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  9.77851571e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         1.90564713e+01,  1.79571386e+01,  0.00000000e+00,  4.79453718e+00,\n         5.78324495e+00,  0.00000000e+00,  4.98397852e+00,  0.00000000e+00,\n         6.92373720e+00,  0.00000000e+00,  3.00898728e+01,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.07672235e+01,  0.00000000e+00,  0.00000000e+00,\n         1.72817259e+01,  2.45264213e+01,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  2.99600000e+01,  0.00000000e+00,  4.79453718e+00,\n         0.00000000e+00,  5.78324495e+00,  5.56345149e+00,  0.00000000e+00,\n         6.92373720e+00,  2.45264213e+01,  0.00000000e+00,  4.98397852e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  1.43904630e+01,\n         0.00000000e+00,  6.64351852e-01,  5.84259259e-02,  3.49212963e+00,\n         3.20314815e+00,  1.52481481e+00,  0.00000000e+00,  1.42857143e-01,\n         9.00000000e+00,  0.00000000e+00,  2.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  1.00000000e+00,\n         1.00000000e+00,  2.00000000e+00,  0.00000000e+00,  2.00000000e+00,\n         1.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         1.00000000e+00,  1.28420000e+00,  3.42415000e+01,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         1.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.00000000e+00,  1.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  1.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  1.00000000e+00,  1.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         1.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.00000000e+00]),\n array([ 8.52083333e+00, -5.00000000e-01,  8.52083333e+00,  5.00000000e-01,\n         4.49827657e-01,  7.41230000e+01,  6.40430000e+01,  7.40731649e+01,\n         3.20000000e+01,  0.00000000e+00,  5.63258534e-02, -3.90760088e-01,\n         3.90760088e-01,  5.63258534e-02,  1.20000000e+00,  1.20000000e+00,\n         1.20000000e+00,  1.62798415e+01,  1.01919558e+01,  1.97401131e+00,\n        -2.04198288e+00,  1.92940321e+00, -2.09555141e+00,  4.50415946e+00,\n         1.01589081e-01,  3.02371578e+00,  1.91194155e+01,  4.50000000e+00,\n         3.94721360e+00,  3.94721360e+00,  2.00000000e+00,  1.72360680e+00,\n         1.72360680e+00,  2.17082039e+00,  2.17082039e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00, -4.00000000e-02,\n         3.60964047e+00,  4.96000000e+00,  9.76756002e-01,  9.50796000e+03,\n         3.26283111e+01,  5.10652739e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         2.07712116e+01,  0.00000000e+00,  5.60105081e+00,  5.10652739e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         2.63722624e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.07075782e+01,  0.00000000e+00,  0.00000000e+00,\n         2.07712116e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  2.02300000e+01,  5.60105081e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  2.07712116e+01,  0.00000000e+00,  0.00000000e+00,\n         5.10652739e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         8.52083333e+00, -5.00000000e-01,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  5.22916667e+00,  0.00000000e+00,  1.00000000e+00,\n         5.00000000e+00,  1.00000000e+00,  1.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.00000000e+00,  1.00000000e+00,  1.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  7.77200000e-01,  2.19718000e+01,  0.00000000e+00,\n         1.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00]),\n array([ 9.40486111,  0.70833333,  9.40486111,  0.70833333,  0.44434505,\n        72.107     , 64.043     , 72.05751488, 30.        ,  0.        ,\n         0.11947978, -0.3034031 ,  0.3034031 ,  0.11947978,  1.8       ,\n         2.4       ,  2.4       , 16.12871272, 10.38067593,  1.66369877,\n        -1.68004777,  1.74358517, -1.64199321,  5.48309287, -0.10737864,\n         2.40171522, 24.82892142,  4.12132034,  3.39981212,  3.39981212,\n         2.41421356,  1.85105733,  1.85105733,  0.9553418 ,  0.9553418 ,\n         0.40652626,  0.40652626,  0.11785113,  0.11785113, -0.33      ,\n        11.2451125 ,  4.67      ,  3.67      ,  3.67      , 31.99559947,\n         4.79453718,  6.28616052,  0.        ,  0.        ,  0.        ,\n         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n         6.9237372 ,  6.42082162,  6.42082162,  0.        ,  4.79453718,\n         6.28616052,  0.        ,  0.        ,  0.        , 19.76538045,\n         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n         0.        ,  0.        ,  0.        ,  6.28616052,  4.79453718,\n         0.        , 19.76538045,  0.        ,  0.        ,  0.        ,\n         0.        , 17.07      ,  0.        ,  4.79453718,  0.        ,\n         0.        ,  6.42082162, 12.70698215,  0.        ,  0.        ,\n         6.9237372 ,  0.        ,  0.        ,  0.        ,  0.        ,\n         9.40486111,  0.        ,  0.        ,  0.        ,  0.        ,\n         2.61458333,  1.98055556,  0.        ,  0.75      ,  5.        ,\n         0.        ,  1.        ,  0.        ,  0.        ,  0.        ,\n         0.        ,  0.        ,  0.        ,  1.        ,  0.        ,\n         1.        ,  2.        ,  0.        ,  0.        ,  0.        ,\n         0.        ,  0.9854    , 20.972     ,  0.        ,  0.        ,\n         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n         0.        ,  0.        ,  0.        ,  1.        ,  1.        ,\n         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n         0.        ,  1.        ,  0.        ,  0.        ,  0.        ,\n         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n         0.        ,  0.        ,  0.        ,  1.        ]),\n array([ 3.98130244e+00,  9.03611111e-01,  3.98130244e+00,  9.03611111e-01,\n         6.52624492e-01,  1.58204000e+02,  1.48124000e+02,  1.58084398e+02,\n         6.00000000e+01,  0.00000000e+00,  9.48558538e-02, -3.33072022e-01,\n         3.33072022e-01,  9.48558538e-02,  1.16666667e+00,  2.00000000e+00,\n         2.66666667e+00,  1.50111505e+01,  1.02051264e+01,  1.90501025e+00,\n        -1.99891839e+00,  2.00335617e+00, -1.94512671e+00,  5.14377944e+00,\n         7.97273016e-01,  2.15114547e+00,  3.24003952e+02,  8.22576835e+00,\n         6.72033613e+00,  6.72033613e+00,  5.94948974e+00,  3.94659365e+00,\n         3.94659365e+00,  2.72061566e+00,  2.72061566e+00,  1.76716454e+00,\n         1.76716454e+00,  1.17449879e+00,  1.17449879e+00, -1.57000000e+00,\n         1.20100755e+03,  7.09929517e+00,  3.21835672e+00,  1.53182950e+00,\n         7.14922193e+01,  4.56709965e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         4.98397852e+00,  0.00000000e+00,  0.00000000e+00,  3.03318353e+01,\n         5.56345149e+00,  1.89384435e+01,  6.32732007e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  9.55107817e+00,  0.00000000e+00,\n         6.54475641e+00,  0.00000000e+00,  5.46162941e+01,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  9.55107817e+00,  6.54475641e+00,  0.00000000e+00,\n         5.56345149e+00,  4.90528426e+01,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.78200000e+01,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  6.54475641e+00,\n         5.56345149e+00,  6.19684357e+00,  3.07232649e+01,  2.16838123e+01,\n         0.00000000e+00,  2.05092593e+00,  0.00000000e+00,  3.98130244e+00,\n         0.00000000e+00,  1.30138889e+00,  0.00000000e+00,  1.03431883e+01,\n         5.58625000e+00,  9.03611111e-01,  0.00000000e+00,  1.00000000e-01,\n         1.20000000e+01,  0.00000000e+00,  2.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  1.00000000e+00,  1.00000000e+00,\n         2.00000000e+00,  2.00000000e+00,  0.00000000e+00,  2.00000000e+00,\n         2.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         2.00000000e+00,  1.93140000e+00,  4.77710000e+01,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         2.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  2.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  1.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00]),\n array([ 3.55555556e+00,  1.01851852e+00,  3.55555556e+00,  1.01851852e+00,\n         4.10514682e-01,  6.81190000e+01,  6.00550000e+01,  6.80626003e+01,\n         2.80000000e+01,  0.00000000e+00, -4.03835494e-02, -9.88231072e-02,\n         9.88231072e-02,  4.03835494e-02,  1.80000000e+00,  2.00000000e+00,\n         2.00000000e+00,  1.36632011e+01,  1.03612425e+01,  1.58953129e+00,\n        -1.71273922e+00,  1.80547716e+00, -1.49650004e+00,  5.05429101e+00,\n         1.57851598e+00,  3.20480542e+00,  5.10586500e+01,  4.28445705e+00,\n         3.49156383e+00,  3.49156383e+00,  2.27005561e+00,  1.55047682e+00,\n         1.55047682e+00,  1.05047682e+00,  1.05047682e+00,  3.48461713e-01,\n         3.48461713e-01,  0.00000000e+00,  0.00000000e+00, -5.20000000e-01,\n         9.65148445e+00,  4.48000000e+00,  1.76735632e+00,  3.48000000e+00,\n         3.28198134e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  2.48069960e+01,\n         6.92373720e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         6.92373720e+00,  0.00000000e+00,  2.48069960e+01,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         6.92373720e+00,  2.48069960e+01,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  5.57310453e+00,\n         0.00000000e+00,  6.07602011e+00,  6.92373720e+00,  1.31578714e+01,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.01851852e+00,  0.00000000e+00,  0.00000000e+00,\n         1.72222222e+00,  8.92592593e+00,  0.00000000e+00,  2.00000000e-01,\n         5.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         1.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.74850000e+00,  2.50110000e+01,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  2.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.00000000e+00]),\n array([ 2.18750000e+00,  5.00000000e-01,  2.18750000e+00,  5.00000000e-01,\n         4.10578184e-01,  7.21510000e+01,  6.00550000e+01,  7.20939004e+01,\n         3.20000000e+01,  0.00000000e+00, -4.11015481e-02, -6.04381485e-02,\n         6.04381485e-02,  4.11015481e-02,  8.00000000e-01,  8.00000000e-01,\n         8.00000000e-01,  1.40125006e+01,  1.00124994e+01,  1.95074683e+00,\n        -2.04928653e+00,  2.07490194e+00, -1.92780194e+00,  4.46983303e+00,\n         4.69166965e-01,  3.02371578e+00,  1.55097750e+01,  4.50000000e+00,\n         4.50000000e+00,  4.50000000e+00,  2.00000000e+00,  2.00000000e+00,\n         2.00000000e+00,  3.00000000e+00,  3.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         3.60964047e+00,  5.00000000e+00,  1.00000000e+00,  0.00000000e+00,\n         3.41990195e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  2.76949488e+01,\n         5.41499047e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  5.41499047e+00,\n         2.76949488e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  5.41499047e+00,\n         2.76949488e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  5.41499047e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  2.76949488e+01,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  5.00000000e-01,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  8.75000000e+00,  0.00000000e+00,  1.00000000e+00,\n         5.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  2.05240000e+00,  2.51290000e+01,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00]),\n array([ 5.63472222e+00,  5.35879630e-01,  5.63472222e+00,  5.35879630e-01,\n         4.86084459e-01,  9.91770000e+01,  8.60730000e+01,  9.91047994e+01,\n         4.20000000e+01,  0.00000000e+00,  3.87784407e-03, -3.27711754e-01,\n         3.27711754e-01,  3.87784407e-03,  1.00000000e+00,  1.57142857e+00,\n         1.85714286e+00,  1.46197257e+01,  9.96544067e+00,  2.05734505e+00,\n        -2.15138452e+00,  2.14223026e+00, -2.21553689e+00,  4.65643370e+00,\n         4.41315396e-01,  2.12291795e+00,  4.61417095e+01,  5.11288418e+00,\n         4.69023444e+00,  4.69023444e+00,  3.39384685e+00,  3.14982991e+00,\n         3.14982991e+00,  2.39809010e+00,  2.39809010e+00,  1.64982991e+00,\n         1.64982991e+00,  1.13416679e+00,  1.13416679e+00, -4.00000000e-02,\n         4.71972526e+01,  5.10367816e+00,  2.31410722e+00,  1.47506275e+00,\n         4.48980211e+01,  5.73366748e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  1.92624649e+01,\n         1.28416432e+01,  6.04184083e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  5.73366748e+00,\n         3.81459489e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  5.73366748e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  6.04184083e+00,  0.00000000e+00,  0.00000000e+00,\n         3.21041081e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  2.60200000e+01,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  6.04184083e+00,  0.00000000e+00,\n         3.21041081e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         5.73366748e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  5.63472222e+00,  0.00000000e+00,  5.35879630e-01,\n         6.66273148e+00,  0.00000000e+00,  0.00000000e+00,  1.00000000e+00,\n         7.00000000e+00,  2.00000000e+00,  1.00000000e+00,  1.00000000e+00,\n         0.00000000e+00,  1.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.00000000e+00,  1.00000000e+00,  1.00000000e+00,\n         0.00000000e+00,  1.00000000e+00,  0.00000000e+00,  1.00000000e+00,\n         1.00000000e+00,  1.27780000e+00,  3.10604000e+01,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         1.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00]),\n array([ 8.80555556, -0.5       ,  8.80555556,  0.5       ,  0.28953844,\n        61.04      , 58.016     , 61.01637834, 24.        ,  0.        ,\n         0.19399732, -0.26483733,  0.26483733,  0.19399732,  2.        ,\n         2.        ,  2.        , 16.62493833, 11.541636  ,  1.56611378,\n        -1.62933727,  1.39275471, -1.79049213,  3.90816958, -0.44534352,\n         2.80303949, 29.01955001,  3.57735027,  2.26371018,  2.26371018,\n         1.73205081,  0.81236197,  0.81236197,  0.43968397,  0.43968397,\n         0.        ,  0.        ,  0.        ,  0.        , -0.6       ,\n         3.2451125 ,  3.4       ,  0.81666667,  0.62222222, 23.39222675,\n         0.        ,  0.        ,  7.04767198,  0.        ,  0.        ,\n         0.        , 10.11431827,  0.        ,  0.        ,  0.        ,\n         0.        ,  0.        ,  4.92331105,  0.        ,  4.92331105,\n         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n         7.04767198, 10.11431827,  0.        ,  0.        ,  0.        ,\n         0.        ,  0.        ,  0.        , 11.97098303,  0.        ,\n        10.11431827,  0.        ,  0.        ,  0.        ,  0.        ,\n         0.        , 43.14      ,  4.92331105,  0.        ,  0.        ,\n         0.        ,  0.        ,  7.04767198,  0.        ,  0.        ,\n         0.        ,  0.        , 10.11431827,  0.        ,  0.        ,\n         8.30555556,  8.80555556,  0.        ,  0.        ,  0.        ,\n         0.        ,  0.        ,  0.88888889,  1.        ,  4.        ,\n         0.        ,  3.        ,  0.        ,  0.        ,  0.        ,\n         0.        ,  0.        ,  0.        ,  2.        ,  0.        ,\n         3.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n         0.        , -0.1071    , 12.9184    ,  0.        ,  0.        ,\n         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n         0.        ,  0.        ,  0.        ,  1.        ,  0.        ,\n         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n         0.        ,  1.        ,  0.        ,  0.        ,  0.        ,\n         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n         0.        ,  0.        ,  0.        ,  2.        ]),\n array([ 1.06826885e+01, -8.25185185e-01,  1.06826885e+01,  1.86481481e-01,\n         6.42655862e-01,  2.40215000e+02,  2.28119000e+02,  2.40074621e+02,\n         9.20000000e+01,  0.00000000e+00,  3.17369672e-01, -5.01887539e-01,\n         5.01887539e-01,  3.17369672e-01,  1.29411765e+00,  1.88235294e+00,\n         2.29411765e+00,  1.66340829e+01,  9.96145206e+00,  2.25020602e+00,\n        -2.10274388e+00,  2.38426733e+00, -1.99085898e+00,  5.58242604e+00,\n        -3.94429187e-01,  3.48047054e+00,  4.72009216e+02,  1.31627722e+01,\n         9.41379154e+00,  9.41379154e+00,  7.87911652e+00,  5.03719815e+00,\n         5.03719815e+00,  3.72624513e+00,  3.72624513e+00,  2.65484868e+00,\n         2.65484868e+00,  1.46581437e+00,  1.46581437e+00, -2.18000000e+00,\n         4.45962530e+03,  1.28874764e+01,  4.77061754e+00,  2.49475984e+00,\n         9.69913568e+01,  5.10652739e+00,  0.00000000e+00,  5.74951183e+00,\n         0.00000000e+00,  5.68738627e+00,  5.68738627e+00,  2.02286365e+01,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  1.38474744e+01,\n         1.23387277e+01,  1.16298186e+01,  1.59129892e+01,  1.49531495e+01,\n         1.13747725e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         2.61862021e+01,  0.00000000e+00,  3.79248222e+01,  0.00000000e+00,\n         5.74951183e+00,  0.00000000e+00,  1.13747725e+01,  5.74951183e+00,\n         0.00000000e+00,  1.49531495e+01,  0.00000000e+00,  2.02286365e+01,\n         3.17496536e+01,  1.21327341e+01,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.06510000e+02,  2.12835202e+01,  2.53351639e+01,\n         0.00000000e+00,  1.71687438e+01,  6.42082162e+00,  6.06636707e+00,\n         6.06636707e+00,  6.92373720e+00,  6.92373720e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  1.97990259e+01,\n         3.10369133e+01, -7.84537037e-01, -6.77268519e-01,  1.94217593e+00,\n         6.16946334e-01,  3.56674414e+00,  0.00000000e+00,  4.00000000e-01,\n         1.70000000e+01,  1.00000000e+00,  7.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  1.00000000e+00,  0.00000000e+00,\n         1.00000000e+00,  5.00000000e+00,  1.00000000e+00,  7.00000000e+00,\n         4.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         1.00000000e+00,  2.72210000e+00,  6.01216000e+01,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  1.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  2.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  2.00000000e+00,  2.00000000e+00,  1.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         1.00000000e+00,  1.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         1.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  2.00000000e+00]),\n array([  9.56375   ,  -0.28819444,   9.56375   ,   0.12152778,\n          0.39568026, 103.121     ,  94.049     , 103.06332853,\n         42.        ,   0.        ,   0.20340807,  -0.26454866,\n          0.26454866,   0.20340807,   1.71428571,   2.28571429,\n          2.42857143,  16.62736398,  10.34520941,   1.89736648,\n         -1.84406503,   1.83552297,  -1.97860708,   4.26761383,\n         -0.47995693,   2.82193894,  62.71013448,   5.69867061,\n          4.38503052,   4.38503052,   3.27005561,   2.38848292,\n          2.38848292,   1.40989468,   1.40989468,   0.69424146,\n          0.69424146,   0.28721333,   0.28721333,  -0.6       ,\n         29.01955001,   6.4       ,   3.58518519,   5.4       ,\n         42.48705309,   0.        ,   0.        ,   0.        ,\n          6.54475641,   0.        ,   0.        ,  10.11431827,\n          0.        ,   0.        ,   0.        ,   6.9237372 ,\n          6.42082162,  11.34413267,   0.        ,   4.92331105,\n          0.        ,   0.        ,   0.        ,   0.        ,\n         19.76538045,   6.54475641,  10.11431827,   0.        ,\n          0.        ,   0.        ,   0.        ,   0.        ,\n          0.        ,  11.46806745,   0.        ,  10.11431827,\n         19.76538045,   0.        ,   0.        ,   0.        ,\n          0.        ,  43.14      ,   0.        ,  10.11431827,\n          0.        ,  11.46806745,   6.42082162,   6.42082162,\n          0.        ,   0.        ,   6.9237372 ,   0.        ,\n          0.        ,   0.        ,   0.        ,   9.27555556,\n          9.56375   ,   0.        ,   0.        ,   0.        ,\n          1.60513889,   2.05555556,   0.        ,   1.        ,\n          7.        ,   0.        ,   3.        ,   0.        ,\n          0.        ,   0.        ,   0.        ,   0.        ,\n          0.        ,   2.        ,   0.        ,   3.        ,\n          3.        ,   0.        ,   0.        ,   0.        ,\n          0.        ,   1.0632    ,  26.7694    ,   0.        ,\n          0.        ,   0.        ,   0.        ,   0.        ,\n          0.        ,   0.        ,   0.        ,   0.        ,\n          0.        ,   0.        ,   0.        ,   0.        ,\n          0.        ,   0.        ,   1.        ,   0.        ,\n          0.        ,   0.        ,   0.        ,   0.        ,\n          0.        ,   0.        ,   0.        ,   0.        ,\n          0.        ,   0.        ,   0.        ,   0.        ,\n          0.        ,   0.        ,   0.        ,   0.        ,\n          0.        ,   0.        ,   0.        ,   0.        ,\n          0.        ,   0.        ,   0.        ,   0.        ,\n          0.        ,   0.        ,   0.        ,   0.        ,\n          0.        ,   0.        ,   0.        ,   0.        ,\n          0.        ,   0.        ,   0.        ,   0.        ,\n          0.        ,   0.        ,   0.        ,   0.        ,\n          0.        ,   1.        ,   0.        ,   0.        ,\n          0.        ,   0.        ,   0.        ,   0.        ,\n          0.        ,   0.        ,   0.        ,   0.        ,\n          0.        ,   0.        ,   0.        ,   0.        ,\n          0.        ,   0.        ,   0.        ,   0.        ,\n          0.        ,   0.        ,   0.        ,   0.        ,\n          0.        ,   0.        ,   0.        ,   0.        ,\n          0.        ,   0.        ,   0.        ,   0.        ,\n          0.        ,   2.        ]),\n array([ 6.14602860e+00,  3.23570169e-01,  6.14602860e+00,  3.23570169e-01,\n         4.68721024e-01,  3.60882000e+02,  3.56850000e+02,  3.57844416e+02,\n         9.40000000e+01,  0.00000000e+00,  6.86226841e-02, -8.27124402e-02,\n         8.27124402e-02,  6.86226841e-02,  5.55555556e-01,  1.11111111e+00,\n         1.61111111e+00,  3.55026659e+01,  1.00571174e+01,  2.15901827e+00,\n        -2.10895007e+00,  2.43717701e+00, -1.84968171e+00,  6.49898069e+00,\n         1.61095046e+00,  2.73774837e+00,  5.94200080e+02,  1.34472293e+01,\n         8.57718791e+00,  1.31127616e+01,  8.41359136e+00,  4.69927756e+00,\n         6.96706440e+00,  3.47206526e+00,  5.85679472e+00,  2.32007115e+00,\n         4.63391149e+00,  1.47824601e+00,  2.80406069e+00,  1.80000000e-01,\n         9.83471661e+03,  1.45862278e+01,  5.66367360e+00,  2.69713876e+00,\n         1.34308095e+02,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  7.56720064e+01,\n         2.37625527e+01,  5.56345149e+00,  3.01357999e+01,  0.00000000e+00,\n         6.96056393e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  5.44012682e+01,  0.00000000e+00,\n         1.11269030e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         6.96056393e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  2.42654683e+01,  3.01357999e+01,  1.11269030e+01,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  4.12627029e+01,  0.00000000e+00,\n         6.06636707e+00,  1.81991012e+01,  0.00000000e+00,  0.00000000e+00,\n         6.96056393e+01,  0.00000000e+00,  3.60720569e+01,  0.00000000e+00,\n         2.14479104e+00,  1.23444444e+00,  0.00000000e+00,  6.54870762e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         1.80000000e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  2.00000000e+00,  0.00000000e+00,\n         2.00000000e+00,  0.00000000e+00,  0.00000000e+00,  6.00000000e+00,\n         1.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         2.00000000e+00,  7.27400000e+00,  8.19380000e+01,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  2.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  6.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.00000000e+00]),\n array([ 1.04644019e+01, -9.40277778e-02,  1.04644019e+01,  9.40277778e-02,\n         4.27719741e-01,  1.30187000e+02,  1.16075000e+02,  1.30099380e+02,\n         5.40000000e+01,  0.00000000e+00,  3.05001837e-01, -4.68995428e-01,\n         4.68995428e-01,  3.05001837e-01,  1.44444444e+00,  2.11111111e+00,\n         2.55555556e+00,  1.65229369e+01,  1.01915252e+01,  1.96031692e+00,\n        -1.95124810e+00,  1.98429677e+00, -1.98156057e+00,  5.68454740e+00,\n        -1.40242348e-01,  2.97306241e+00,  7.89853362e+01,  7.11288418e+00,\n         6.14492371e+00,  6.14492371e+00,  4.30806041e+00,  3.37715675e+00,\n         3.37715675e+00,  2.03323939e+00,  2.03323939e+00,  1.21212513e+00,\n         1.21212513e+00,  6.21399640e-01,  6.21399640e-01, -5.30000000e-01,\n         9.42673793e+01,  8.47000000e+00,  5.60386881e+00,  5.33932914e+00,\n         5.62039710e+01,  4.73686295e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  5.96930529e+00,  4.79453718e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  1.97653804e+01,\n         6.42082162e+00,  6.42082162e+00,  7.10979754e+00,  9.53140014e+00,\n         5.96930529e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         3.26070237e+01,  7.10979754e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.30791028e+01,  9.53140014e+00,  0.00000000e+00,\n         3.26070237e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  2.63000000e+01,  0.00000000e+00,  4.79453718e+00,\n         0.00000000e+00,  5.96930529e+00,  6.42082162e+00,  1.92624649e+01,\n         7.10979754e+00,  0.00000000e+00,  0.00000000e+00,  1.16606002e+01,\n         0.00000000e+00,  4.45783447e+00,  0.00000000e+00,  1.04644019e+01,\n         0.00000000e+00,  0.00000000e+00, -9.40277778e-02,  0.00000000e+00,\n         3.80516629e+00,  2.10841175e+00,  1.42488001e+00,  8.57142857e-01,\n         9.00000000e+00,  0.00000000e+00,  2.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  2.00000000e+00,  0.00000000e+00,  2.00000000e+00,\n         4.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.73970000e+00,  3.61580000e+01,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.00000000e+00,  1.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  1.00000000e+00,\n         1.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  1.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  1.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  2.00000000e+00]),\n array([ 8.42278195e+00,  3.67187500e-01,  8.42278195e+00,  3.67187500e-01,\n         5.47048370e-01,  1.30231000e+02,  1.12087000e+02,  1.30135765e+02,\n         5.60000000e+01,  0.00000000e+00,  4.30524072e-02, -3.96376569e-01,\n         3.96376569e-01,  4.30524072e-02,  8.88888889e-01,  1.44444444e+00,\n         2.00000000e+00,  1.62499245e+01,  1.01274016e+01,  1.85812684e+00,\n        -1.95290826e+00,  2.03049464e+00, -1.82100832e+00,  4.41019186e+00,\n         2.82098727e-01,  2.59508271e+00,  3.78322939e+01,  6.94974747e+00,\n         6.39696106e+00,  6.39696106e+00,  4.41421356e+00,  4.02333455e+00,\n         4.02333455e+00,  2.49137375e+00,  2.49137375e+00,  1.51166727e+00,\n         1.51166727e+00,  8.92133485e-01,  8.92133485e-01, -4.00000000e-02,\n         1.03687916e+02,  8.96000000e+00,  7.96000000e+00,  7.96000000e+00,\n         5.80880796e+01,  5.10652739e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  3.90278453e+01,\n         6.42082162e+00,  6.60688196e+00,  0.00000000e+00,  5.10652739e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         4.54486669e+01,  6.60688196e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.17134094e+01,  0.00000000e+00,  0.00000000e+00,\n         4.54486669e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  2.02300000e+01,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  6.60688196e+00,  6.42082162e+00,\n         3.21041081e+01,  0.00000000e+00,  0.00000000e+00,  6.92373720e+00,\n         5.10652739e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         8.42278195e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         7.49570224e+00,  2.58151581e+00,  0.00000000e+00,  1.00000000e+00,\n         9.00000000e+00,  1.00000000e+00,  1.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.00000000e+00,  1.00000000e+00,  1.00000000e+00,\n         6.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  2.33920000e+00,  4.04618000e+01,  0.00000000e+00,\n         1.00000000e+00,  1.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  4.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.00000000e+00]),\n array([ 4.26392668e+00,  3.16280234e-01,  4.26392668e+00,  3.16280234e-01,\n         7.48462705e-01,  2.27337000e+02,  2.10201000e+02,  2.27120467e+02,\n         8.40000000e+01,  0.00000000e+00,  2.28190235e-01, -3.54326855e-01,\n         3.54326855e-01,  2.28190235e-01,  1.20000000e+00,  1.86666667e+00,\n         2.40000000e+00,  3.21664262e+01,  1.04032973e+01,  2.05113069e+00,\n        -2.09818735e+00,  2.13264506e+00, -2.14538892e+00,  7.97990320e+00,\n         8.35412179e-01,  2.89174703e+00,  3.15371055e+02,  1.12591485e+01,\n         9.53434613e+00,  1.03508427e+01,  7.15139701e+00,  4.95804907e+00,\n         6.18279394e+00,  3.29869031e+00,  4.07208698e+00,  1.55013323e+00,\n         2.09785579e+00,  1.00770779e+00,  1.36321873e+00, -1.04000000e+00,\n         2.03614198e+03,  1.20316332e+01,  5.74717864e+00,  3.90755443e+00,\n         9.45028341e+01,  1.06335772e+01,  0.00000000e+00,  5.15643648e+00,\n         1.18966786e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.49519356e+01,  0.00000000e+00,  1.17618849e+01,\n         2.70269808e+01,  1.25865972e+01,  0.00000000e+00,  0.00000000e+00,\n         2.36585635e+01,  0.00000000e+00,  1.49519356e+01,  0.00000000e+00,\n         3.19694889e+01,  2.34341028e+01,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.06335772e+01,  1.18966786e+01,  0.00000000e+00,\n         1.17618849e+01,  3.37943020e+01,  0.00000000e+00,  0.00000000e+00,\n         2.07712116e+01,  5.15643648e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  6.27300000e+01,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  1.79385194e+01,  1.17011929e+01,\n         1.17618849e+01,  0.00000000e+00,  1.31795064e+01,  3.94329872e+01,\n         0.00000000e+00,  0.00000000e+00,  1.50785147e+00,  1.27559467e+01,\n         6.96903817e+00,  0.00000000e+00,  1.25027778e+00,  3.16280234e-01,\n         1.94862434e+00,  6.91864796e+00,  0.00000000e+00,  6.66666667e-01,\n         1.50000000e+01,  2.00000000e+00,  5.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  1.00000000e+00,\n         1.00000000e+00,  6.00000000e+00,  2.00000000e+00,  6.00000000e+00,\n         5.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         1.00000000e+00,  1.84560000e+00,  6.45304000e+01,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         3.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  3.00000000e+00,  2.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         2.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  1.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.00000000e+00]),\n array([ 3.38722222e+00,  1.20486111e+00,  3.38722222e+00,  1.20486111e+00,\n         5.41921467e-01,  1.29247000e+02,  1.10095000e+02,  1.29151750e+02,\n         5.60000000e+01,  0.00000000e+00, -4.90205333e-03, -3.16732949e-01,\n         3.16732949e-01,  4.90205333e-03,  8.88888889e-01,  1.33333333e+00,\n         1.66666667e+00,  1.48377119e+01,  1.02902339e+01,  1.82746768e+00,\n        -1.99450739e+00,  1.84653798e+00, -2.15398307e+00,  4.44752272e+00,\n         6.11411724e-01,  2.59508271e+00,  3.78322939e+01,  6.94974747e+00,\n         6.74264069e+00,  6.74264069e+00,  4.41421356e+00,  4.12132034e+00,\n         4.12132034e+00,  2.45710678e+00,  2.45710678e+00,  1.41421356e+00,\n         1.41421356e+00,  7.28553391e-01,  7.28553391e-01, -4.00000000e-02,\n         1.03687916e+02,  8.96000000e+00,  7.96000000e+00,  7.96000000e+00,\n         5.88437080e+01,  5.31678860e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  2.66891176e+01,\n         2.59311561e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  5.31678860e+00,  0.00000000e+00,\n         3.95307609e+01,  1.30895128e+01,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  5.31678860e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.30895128e+01,  0.00000000e+00,  0.00000000e+00,\n         3.95307609e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.20300000e+01,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         3.87727993e+01,  0.00000000e+00,  0.00000000e+00,  1.91642630e+01,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         3.38722222e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         5.25563350e+00,  6.85714427e+00,  0.00000000e+00,  1.00000000e+00,\n         9.00000000e+00,  1.00000000e+00,  1.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.00000000e+00,  1.00000000e+00,  1.00000000e+00,\n         6.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  2.17620000e+00,  4.26857000e+01,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  1.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  4.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.00000000e+00]),\n array([ 1.19500368e+01, -4.14822279e+00,  1.19500368e+01,  5.69282407e-01,\n         6.90910697e-01,  1.89180000e+02,  1.79100000e+02,  1.89076534e+02,\n         7.20000000e+01,  0.00000000e+00,  4.05411222e-01, -3.65719084e-01,\n         4.05411222e-01,  3.65719084e-01,  1.15384615e+00,  1.69230769e+00,\n         2.15384615e+00,  1.94131825e+01,  1.02768280e+01,  2.28684272e+00,\n        -2.19972565e+00,  2.19458325e+00, -2.30179108e+00,  5.44557677e+00,\n        -1.18593179e-01,  2.64398321e+00,  2.55312366e+02,  9.89734123e+00,\n         7.17496514e+00,  7.17496514e+00,  5.98898186e+00,  3.81823186e+00,\n         3.81823186e+00,  2.80678907e+00,  2.80678907e+00,  1.61342179e+00,\n         1.61342179e+00,  1.04268809e+00,  1.04268809e+00, -1.19000000e+00,\n         6.49102281e+02,  9.89467401e+00,  3.68152947e+00,  3.35670960e+00,\n         7.47826693e+01,  4.89990973e+00,  6.54475641e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  6.17629852e+00,  0.00000000e+00,\n         0.00000000e+00,  1.31712451e+01,  0.00000000e+00,  1.81991012e+01,\n         1.21327341e+01,  1.27350583e+01,  0.00000000e+00,  1.31712451e+01,\n         5.68738627e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         6.17629852e+00,  1.84923381e+01,  3.03318353e+01,  0.00000000e+00,\n         0.00000000e+00,  4.89990973e+00,  1.88586314e+01,  0.00000000e+00,\n         0.00000000e+00,  1.97687269e+01,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  3.03318353e+01,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  3.24000000e+00,  1.27210549e+01,  1.31712451e+01,\n         0.00000000e+00,  0.00000000e+00,  5.68738627e+00,  0.00000000e+00,\n         1.19475817e+01,  3.03318353e+01,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  3.58501105e+01,  0.00000000e+00,  1.16666667e+00,\n         0.00000000e+00,  5.69282407e-01,  0.00000000e+00,  8.47899187e+00,\n        -4.14822279e+00, -9.19629630e-01,  1.41946759e+00,  3.33333333e-01,\n         1.30000000e+01,  0.00000000e+00,  1.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  1.00000000e+00,  0.00000000e+00,\n         1.00000000e+00,  1.00000000e+00,  0.00000000e+00,  4.00000000e+00,\n         2.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         1.00000000e+00,  2.68510000e+00,  4.57670000e+01,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  1.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         3.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         1.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  3.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  1.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00]),\n array([ 9.82152778, -0.21064815,  9.82152778,  0.21064815,  0.43785088,\n        88.106     , 80.042     , 88.0524295 , 36.        ,  0.        ,\n         0.30211278, -0.46617189,  0.46617189,  0.30211278,  1.83333333,\n         2.33333333,  2.33333333, 16.53089092, 10.76990205,  1.81156719,\n        -1.88976749,  1.69139738, -1.94851721,  5.6527961 , -0.13988766,\n         2.83125711, 49.509775  ,  4.99156383,  4.02360336,  4.02360336,\n         2.77005561,  1.90403021,  1.90403021,  0.92459433,  0.92459433,\n         0.3476007 ,  0.3476007 ,  0.20326313,  0.20326313, -0.53      ,\n        14.83446686,  5.47      ,  2.69371365,  3.47      , 37.1091447 ,\n         4.73686295,  0.        ,  0.        ,  0.        ,  0.        ,\n         5.96930529,  4.79453718,  0.        ,  0.        ,  0.        ,\n         0.        ,  6.9237372 ,  6.9237372 ,  6.60688196,  9.53140014,\n         5.96930529,  0.        ,  0.        ,  0.        , 13.8474744 ,\n         6.60688196,  0.        ,  0.        ,  0.        ,  0.        ,\n         0.        ,  0.        ,  0.        , 12.57618725,  9.53140014,\n         0.        , 13.8474744 ,  0.        ,  0.        ,  0.        ,\n         0.        , 26.3       ,  0.        ,  4.79453718,  0.        ,\n         5.96930529,  6.60688196,  0.        ,  6.9237372 ,  6.9237372 ,\n         0.        ,  4.73686295,  0.        ,  4.40277778,  0.        ,\n         9.82152778,  0.        ,  0.        , -0.21064815,  0.        ,\n         0.        ,  3.65300926,  0.        ,  0.75      ,  6.        ,\n         0.        ,  2.        ,  0.        ,  0.        ,  0.        ,\n         0.        ,  0.        ,  0.        ,  2.        ,  0.        ,\n         2.        ,  1.        ,  0.        ,  0.        ,  0.        ,\n         0.        ,  0.5694    , 22.307     ,  0.        ,  0.        ,\n         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n         0.        ,  0.        ,  0.        ,  1.        ,  1.        ,\n         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n         0.        ,  0.        ,  0.        ,  1.        ,  1.        ,\n         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n         0.        ,  0.        ,  0.        ,  1.        ]),\n array([ 1.25827773e+01, -1.56259448e-01,  1.25827773e+01,  3.92941390e-02,\n         7.59916302e-01,  2.67284000e+02,  2.54180000e+02,  2.67089543e+02,\n         1.00000000e+02,  0.00000000e+00,  1.96096362e-01, -3.94546000e-01,\n         3.94546000e-01,  1.96096362e-01,  8.50000000e-01,  1.50000000e+00,\n         2.20000000e+00,  1.62510793e+01,  9.83054922e+00,  2.30492286e+00,\n        -2.19967489e+00,  2.31153200e+00, -2.22500100e+00,  6.29638424e+00,\n         9.79394864e-02,  2.17634434e+00,  7.06618215e+02,  1.41125197e+01,\n         1.07193756e+01,  1.07193756e+01,  9.73638211e+00,  6.39939665e+00,\n         6.39939665e+00,  4.58234926e+00,  4.58234926e+00,  3.37971604e+00,\n         3.37971604e+00,  2.48291682e+00,  2.48291682e+00, -2.46000000e+00,\n         5.16067674e+04,  1.25675749e+01,  4.90376440e+00,  1.81545236e+00,\n         1.15609575e+02,  1.04233160e+01,  0.00000000e+00,  1.15664899e+01,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  9.58907437e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  3.63982024e+01,\n         6.06636707e+00,  2.89224972e+01,  1.21703335e+01,  1.46956018e+01,\n         1.72538762e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.84684270e+01,  6.47183754e+01,  0.00000000e+00,\n         0.00000000e+00,  5.31678860e+00,  5.68738627e+00,  0.00000000e+00,\n         0.00000000e+00,  2.98246557e+01,  0.00000000e+00,  0.00000000e+00,\n         3.18428803e+01,  4.24645695e+01,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  6.64000000e+01,  0.00000000e+00,  9.58907437e+00,\n         0.00000000e+00,  1.81733719e+01,  3.44859486e+01,  0.00000000e+00,\n         0.00000000e+00,  4.24645695e+01,  0.00000000e+00,  5.31678860e+00,\n         5.10652739e+00,  0.00000000e+00,  0.00000000e+00,  2.50329350e+01,\n         1.18741363e+01,  2.27615696e+00, -2.92510865e-01,  1.19823360e+01,\n         0.00000000e+00,  2.93613237e-01,  0.00000000e+00,  1.25000000e-01,\n         2.00000000e+01,  2.00000000e+00,  4.00000000e+00,  1.00000000e+00,\n         0.00000000e+00,  1.00000000e+00,  2.00000000e+00,  0.00000000e+00,\n         2.00000000e+00,  4.00000000e+00,  2.00000000e+00,  4.00000000e+00,\n         3.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         3.00000000e+00,  1.86620000e+00,  7.53245000e+01,  0.00000000e+00,\n         1.00000000e+00,  1.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  2.00000000e+00,  2.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  1.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         1.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  2.00000000e+00,  0.00000000e+00,  2.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  2.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00]),\n array([ 8.69802469e+00,  2.44814815e-01,  8.69802469e+00,  2.44814815e-01,\n         5.67107755e-01,  1.28558000e+02,  1.23518000e+02,  1.28002892e+02,\n         4.20000000e+01,  0.00000000e+00,  1.15179760e-01, -5.07965186e-01,\n         5.07965186e-01,  1.15179760e-01,  1.12500000e+00,  1.62500000e+00,\n         2.00000000e+00,  3.54956907e+01,  1.03403000e+01,  1.83508040e+00,\n        -1.87015207e+00,  2.12257070e+00, -1.60639279e+00,  6.30098910e+00,\n         4.75121741e-01,  3.03245553e+00,  1.47388339e+02,  5.98312766e+00,\n         4.13457915e+00,  4.89050809e+00,  3.78769370e+00,  2.23395624e+00,\n         2.61192071e+00,  1.47641678e+00,  1.91285256e+00,  8.26626202e-01,\n         1.07860252e+00,  4.41090879e-01,  5.67079037e-01, -6.90000000e-01,\n         7.07989238e+01,  5.44679891e+00,  2.05266955e+00,  1.13801949e+00,\n         5.25289031e+01,  5.10652739e+00,  5.74951183e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  1.16009399e+01,\n         2.42654683e+01,  5.02263331e+00,  0.00000000e+00,  5.10652739e+00,\n         1.16009399e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  2.92881016e+01,  0.00000000e+00,\n         5.74951183e+00,  0.00000000e+00,  0.00000000e+00,  5.74951183e+00,\n         1.16009399e+01,  5.10652739e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  2.42654683e+01,  5.02263331e+00,  0.00000000e+00,\n         0.00000000e+00,  2.02300000e+01,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  5.74951183e+00,  5.02263331e+00,  0.00000000e+00,\n         0.00000000e+00,  2.42654683e+01,  0.00000000e+00,  0.00000000e+00,\n         1.67074673e+01,  0.00000000e+00,  5.50055556e+00,  0.00000000e+00,\n         9.33950617e+00,  0.00000000e+00,  2.44814815e-01,  6.35956790e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         8.00000000e+00,  1.00000000e+00,  1.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  1.00000000e+00,  0.00000000e+00,\n         1.00000000e+00,  1.00000000e+00,  1.00000000e+00,  2.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         1.00000000e+00,  2.04560000e+00,  3.31168000e+01,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  1.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  1.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         1.00000000e+00,  1.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00]),\n array([ 9.18263889e+00,  4.30555556e-01,  9.18263889e+00,  4.30555556e-01,\n         4.36564550e-01,  7.40790000e+01,  6.80310000e+01,  7.40367794e+01,\n         3.00000000e+01,  0.00000000e+00,  2.92565420e-01, -4.68195182e-01,\n         4.68195182e-01,  2.92565420e-01,  2.00000000e+00,  2.60000000e+00,\n         2.60000000e+00,  1.65163093e+01,  1.08833850e+01,  1.60397184e+00,\n        -1.79433486e+00,  1.54919663e+00, -1.80395101e+00,  5.36153889e+00,\n        -1.27693588e-01,  2.40171522e+00,  2.60740339e+01,  4.12132034e+00,\n         3.10095363e+00,  3.10095363e+00,  2.41421356e+00,  1.46718644e+00,\n         1.46718644e+00,  5.51566846e-01,  5.51566846e-01,  2.34708048e-01,\n         2.34708048e-01,  6.80413817e-02,  6.80413817e-02, -5.30000000e-01,\n         1.12451125e+01,  4.47000000e+00,  3.47000000e+00,  3.47000000e+00,\n         3.07442026e+01,  4.73686295e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  6.47222086e+00,  0.00000000e+00,  4.79453718e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         6.92373720e+00,  0.00000000e+00,  6.60688196e+00,  9.53140014e+00,\n         6.47222086e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         6.92373720e+00,  6.60688196e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.30791028e+01,  9.53140014e+00,  0.00000000e+00,\n         6.92373720e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  2.63000000e+01,  0.00000000e+00,  4.79453718e+00,\n         0.00000000e+00,  0.00000000e+00,  1.30791028e+01,  0.00000000e+00,\n         0.00000000e+00,  6.92373720e+00,  0.00000000e+00,  4.73686295e+00,\n         0.00000000e+00,  4.15277778e+00,  0.00000000e+00,  9.18263889e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  2.66458333e+00,  0.00000000e+00,  6.66666667e-01,\n         5.00000000e+00,  0.00000000e+00,  2.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  2.00000000e+00,  0.00000000e+00,  2.00000000e+00,\n         2.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.79300000e-01,  1.76900000e+01,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.00000000e+00,  1.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         1.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.00000000e+00]),\n array([ 3.47916667e+00,  1.08333333e+00,  3.47916667e+00,  1.08333333e+00,\n         3.99986689e-01,  5.61080000e+01,  4.80440000e+01,  5.60626003e+01,\n         2.40000000e+01,  0.00000000e+00, -3.82003936e-02, -1.03093227e-01,\n         1.03093227e-01,  3.82003936e-02,  2.00000000e+00,  2.25000000e+00,\n         2.25000000e+00,  1.35222797e+01,  1.05013770e+01,  1.44785427e+00,\n        -1.57387812e+00,  1.65957123e+00, -1.36138061e+00,  4.59578008e+00,\n         1.23201663e+00,  2.29683526e+00,  1.40000000e+01,  3.41421356e+00,\n         2.99156383e+00,  2.99156383e+00,  1.91421356e+00,  1.52360336e+00,\n         1.52360336e+00,  6.96923425e-01,  6.96923425e-01,  2.88675135e-01,\n         2.88675135e-01,  0.00000000e+00,  0.00000000e+00, -2.60000000e-01,\n         6.85475297e+00,  3.74000000e+00,  2.74000000e+00,  1.74000000e+00,\n         2.71444743e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  6.57893568e+00,  1.29997573e+01,\n         6.42082162e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         1.33445588e+01,  0.00000000e+00,  1.26549558e+01,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         1.33445588e+01,  1.26549558e+01,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  6.42082162e+00,\n         0.00000000e+00,  0.00000000e+00,  6.07602011e+00,  1.35026729e+01,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         2.95833333e+00,  5.54166667e+00,  0.00000000e+00,  5.00000000e-01,\n         4.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         1.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.58240000e+00,  2.04880000e+01,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.00000000e+00]),\n array([ 9.92361111e+00, -3.65740741e+00,  9.92361111e+00,  1.02662037e+00,\n         5.01308312e-01,  1.26133000e+02,  1.20085000e+02,  1.25998680e+02,\n         4.40000000e+01,  0.00000000e+00,  3.98816484e-01, -2.51550189e-01,\n         3.98816484e-01,  2.51550189e-01,  1.14285714e+00,  1.42857143e+00,\n         1.42857143e+00,  3.22520035e+01,  1.17694693e+01,  2.00809110e+00,\n        -1.91019407e+00,  1.85377570e+00, -2.01990332e+00,  7.81370390e+00,\n         2.85670858e-01,  3.88560464e+00,  1.12625221e+02,  5.91421356e+00,\n         4.04124145e+00,  4.85773803e+00,  3.12132034e+00,  1.48316325e+00,\n         2.81649658e+00,  7.41581624e-01,  2.22474487e+00,  4.08248290e-01,\n         1.22474487e+00,  6.80413817e-02,  2.04124145e-01, -1.30000000e-01,\n         2.68387405e+01,  6.87000000e+00,  2.24774251e+00,  2.55143101e+00,\n         4.23746897e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  1.03990006e+01,  8.36617087e+00,\n         0.00000000e+00,  8.41779698e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  1.42195951e+01,  1.67839678e+01,\n         1.03990006e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.42195951e+01,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  2.26373921e+01,  1.87651714e+01,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  5.26000000e+01,  1.03990006e+01,  8.41779698e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  1.42195951e+01,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  8.36617087e+00,\n         0.00000000e+00,  2.75208333e+01,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00, -1.60416667e+00,  1.00000000e+00,\n         7.00000000e+00,  0.00000000e+00,  4.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  4.00000000e+00,  0.00000000e+00,  5.00000000e+00,\n         2.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00, -4.76000000e-01,  2.29378000e+01,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00]),\n array([ 9.63194444e+00, -2.66666667e+00,  9.63194444e+00,  1.15972222e+00,\n         4.11301212e-01,  9.41350000e+01,  8.80870000e+01,  9.40088504e+01,\n         3.20000000e+01,  0.00000000e+00,  1.44104177e-01, -2.29414459e-01,\n         2.29414459e-01,  1.44104177e-01,  1.20000000e+00,  1.20000000e+00,\n         1.20000000e+00,  3.22275744e+01,  1.19116204e+01,  1.78667520e+00,\n        -1.69199352e+00,  1.61392353e+00, -1.86076181e+00,  7.89472668e+00,\n         6.07210639e-01,  4.06294230e+00,  9.08163583e+01,  4.50000000e+00,\n         3.22474487e+00,  4.04124145e+00,  2.00000000e+00,  1.14982991e+00,\n         3.44948974e+00,  1.14295634e+00,  3.42886902e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00, -5.00000000e-02,\n         3.60964047e+00,  4.95000000e+00,  9.70973095e-01,  6.00795000e+03,\n         3.17295915e+01,  0.00000000e+00,  9.83725314e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         8.41779698e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.25115384e+01,  0.00000000e+00,  8.41779698e+00,\n         9.83725314e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.25115384e+01,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  2.09293354e+01,  9.83725314e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  3.41400000e+01,  9.83725314e+00,  8.41779698e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  1.25115384e+01,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.92638889e+01,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         2.31944444e+00,  0.00000000e+00, -2.66666667e+00,  1.00000000e+00,\n         5.00000000e+00,  0.00000000e+00,  2.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  2.00000000e+00,  0.00000000e+00,  3.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00, -3.39200000e-01,  2.07678000e+01,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         1.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00]),\n array([ 5.68481481e+00, -2.76810469e+00,  5.68481481e+00,  2.21566463e-01,\n         7.17615875e-01,  3.04352000e+02,  2.83184000e+02,  3.04101050e+02,\n         1.08000000e+02,  0.00000000e+00,  3.81304133e-01, -4.05536755e-01,\n         4.05536755e-01,  3.81304133e-01,  1.21052632e+00,  1.78947368e+00,\n         2.26315789e+00,  3.24529920e+01,  1.01848757e+01,  2.22300676e+00,\n        -2.20486396e+00,  2.48829944e+00, -2.05859184e+00,  8.07294141e+00,\n         2.15441642e-01,  2.99037656e+00,  4.58287760e+02,  1.44662553e+01,\n         1.20435480e+01,  1.37544718e+01,  8.89799591e+00,  6.34113785e+00,\n         8.89717645e+00,  4.23451269e+00,  7.16955263e+00,  2.14416570e+00,\n         4.55974706e+00,  1.38754345e+00,  3.38412771e+00, -5.50000000e-01,\n         1.09595485e+04,  1.65042005e+01,  7.29040512e+00,  5.14621418e+00,\n         1.19510800e+02,  4.52374716e+00,  5.82440450e+00,  0.00000000e+00,\n         5.87998834e+00,  0.00000000e+00,  6.71860723e+00,  9.04749432e+00,\n         4.98397852e+00,  4.98397852e+00,  0.00000000e+00,  1.38474744e+01,\n         2.07712116e+01,  2.94850572e+01,  1.32137639e+01,  1.35712415e+01,\n         1.85254633e+01,  0.00000000e+00,  9.96795704e+00,  0.00000000e+00,\n         4.05365920e+01,  1.32137639e+01,  1.75846996e+01,  0.00000000e+00,\n         5.87998834e+00,  4.52374716e+00,  0.00000000e+00,  5.87998834e+00,\n         6.71860723e+00,  2.31817210e+01,  2.08543504e+01,  6.92373720e+00,\n         4.51311873e+01,  6.06636707e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  5.34700000e+01,  6.71860723e+00,  0.00000000e+00,\n         0.00000000e+00,  5.91790605e+00,  1.90937523e+01,  1.15183325e+01,\n         0.00000000e+00,  6.06636707e+00,  3.46186860e+01,  9.96795704e+00,\n         2.53780976e+01,  1.65550217e+01,  5.31843254e+00,  8.71129346e+00,\n         0.00000000e+00,  8.36339758e-01,  1.36599264e+00,  1.74104167e+00,\n         0.00000000e+00,  7.77743376e+00,  0.00000000e+00,  6.66666667e-01,\n         1.90000000e+01,  0.00000000e+00,  5.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  1.00000000e+00,\n         1.00000000e+00,  6.00000000e+00,  0.00000000e+00,  7.00000000e+00,\n         7.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         1.00000000e+00,  3.58472000e+00,  7.90230000e+01,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         2.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  2.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.00000000e+00]),\n array([ 5.45416667e+00,  7.30879630e-01,  5.45416667e+00,  7.30879630e-01,\n         5.70691385e-01,  1.23155000e+02,  1.14083000e+02,  1.23068414e+02,\n         4.80000000e+01,  0.00000000e+00,  1.20411933e-01, -4.96688078e-01,\n         4.96688078e-01,  1.20411933e-01,  1.44444444e+00,  2.22222222e+00,\n         2.66666667e+00,  1.64652905e+01,  1.02943934e+01,  1.86719259e+00,\n        -1.97340105e+00,  2.12178446e+00, -1.85575435e+00,  5.42872495e+00,\n         4.14817124e-01,  2.93686610e+00,  1.97862569e+02,  6.69023444e+00,\n         5.29499964e+00,  5.29499964e+00,  4.32569850e+00,  2.72241478e+00,\n         2.72241478e+00,  1.77661406e+00,  1.77661406e+00,  1.09379443e+00,\n         1.09379443e+00,  6.41521317e-01,  6.41521317e-01, -1.18000000e+00,\n         1.26054357e+02,  5.94787724e+00,  2.39556174e+00,  1.35339301e+00,\n         5.42497812e+01,  1.04705304e+01,  5.74951183e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  6.06636707e+00,\n         1.21327341e+01,  1.17537533e+01,  7.10979754e+00,  4.73686295e+00,\n         5.68738627e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.28434650e+01,  2.42654683e+01,  0.00000000e+00,\n         5.74951183e+00,  1.04705304e+01,  5.68738627e+00,  5.74951183e+00,\n         0.00000000e+00,  7.10979754e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  2.42654683e+01,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  3.52500000e+01,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  1.14368981e+01,\n         0.00000000e+00,  1.31761646e+01,  1.81991012e+01,  0.00000000e+00,\n         1.04705304e+01,  4.91500000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  6.18504630e+00,  8.00925926e-01,  7.31254630e+00,\n         0.00000000e+00,  0.00000000e+00,  1.61981481e+00,  1.42857143e-01,\n         9.00000000e+00,  2.00000000e+00,  2.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  1.00000000e+00,  0.00000000e+00,\n         1.00000000e+00,  2.00000000e+00,  1.00000000e+00,  2.00000000e+00,\n         1.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         1.00000000e+00,  1.27740000e+00,  3.74064000e+01,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  1.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         1.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         1.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         1.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  1.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.00000000e+00]),\n array([ 2.16203704e+00,  1.13972222e+00,  2.16203704e+00,  1.13972222e+00,\n         5.14757822e-01,  1.06168000e+02,  9.60880000e+01,  1.06078250e+02,\n         4.20000000e+01,  0.00000000e+00, -3.07440828e-02, -6.22487417e-02,\n         6.22487417e-02,  3.07440828e-02,  1.12500000e+00,  1.75000000e+00,\n         2.12500000e+00,  1.38565969e+01,  1.01707103e+01,  1.79435775e+00,\n        -1.89175125e+00,  1.96314056e+00, -1.73342650e+00,  5.13313817e+00,\n         1.14041522e+00,  2.83208584e+00,  1.41384299e+02,  5.81999096e+00,\n         5.09385813e+00,  5.09385813e+00,  3.93185165e+00,  2.97134377e+00,\n         2.97134377e+00,  1.83915195e+00,  1.83915195e+00,  1.25107295e+00,\n         1.25107295e+00,  7.13712832e-01,  7.13712832e-01, -7.80000000e-01,\n         9.13675773e+01,  5.35850416e+00,  2.50834781e+00,  1.09353720e+00,\n         5.01612873e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  3.72555725e+01,\n         1.19842731e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         1.33445588e+01,  0.00000000e+00,  3.58952868e+01,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  6.42082162e+00,  0.00000000e+00,\n         1.24871887e+01,  3.03318353e+01,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  6.42082162e+00,\n         5.56345149e+00,  0.00000000e+00,  6.06636707e+00,  3.11892055e+01,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.40972222e+00,  0.00000000e+00,  1.04551852e+01,\n         1.13972222e+00,  2.16203704e+00,  0.00000000e+00,  2.50000000e-01,\n         8.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  1.00000000e+00,  0.00000000e+00,\n         1.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         1.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         1.00000000e+00,  2.24900000e+00,  3.58200000e+01,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00]),\n array([ 3.11111111e+00,  1.25000000e+00,  3.11111111e+00,  1.25000000e+00,\n         4.11745612e-01,  5.70960000e+01,  5.00400000e+01,  5.70578492e+01,\n         2.40000000e+01,  0.00000000e+00, -3.68109213e-03, -3.16635084e-01,\n         3.16635084e-01,  3.68109213e-03,  1.25000000e+00,  1.50000000e+00,\n         1.50000000e+00,  1.49122409e+01,  1.03022980e+01,  1.91953465e+00,\n        -2.09444453e+00,  1.80156577e+00, -2.28935539e+00,  4.56272928e+00,\n         5.27451933e-01,  2.00000000e+00,  1.12451125e+01,  2.82842712e+00,\n         2.62132034e+00,  2.62132034e+00,  2.00000000e+00,  1.70710678e+00,\n         1.70710678e+00,  1.10355339e+00,  1.10355339e+00,  7.07106781e-01,\n         7.07106781e-01,  1.76776695e-01,  1.76776695e-01, -4.00000000e-02,\n         3.60964047e+00,  2.21252525e+00,  7.25126008e-01,  1.15188246e-01,\n         2.60131663e+01,  5.31678860e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         1.95103344e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  5.31678860e+00,  0.00000000e+00,\n         6.42082162e+00,  1.30895128e+01,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  5.31678860e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.30895128e+01,  0.00000000e+00,  0.00000000e+00,\n         6.42082162e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.20300000e+01,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         1.95103344e+01,  0.00000000e+00,  0.00000000e+00,  5.31678860e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         3.11111111e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         1.38888889e+00,  2.50000000e+00,  0.00000000e+00,  1.00000000e+00,\n         4.00000000e+00,  1.00000000e+00,  1.00000000e+00,  0.00000000e+00,\n         1.00000000e+00,  1.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.00000000e+00,  1.00000000e+00,  1.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  1.00000000e+00,  1.00000000e+00,\n         1.00000000e+00, -2.03000000e-02,  1.74867000e+01,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  1.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00]),\n array([ 1.00064815e+01, -4.16666667e-01,  1.00064815e+01,  1.36574074e-01,\n         4.20075745e-01,  1.23111000e+02,  1.18071000e+02,  1.23032028e+02,\n         4.60000000e+01,  0.00000000e+00,  2.68921627e-01, -2.58309638e-01,\n         2.68921627e-01,  2.58309638e-01,  1.22222222e+00,  1.77777778e+00,\n         2.11111111e+00,  1.66281986e+01,  1.03208088e+01,  1.98047494e+00,\n        -1.84788908e+00,  2.06236085e+00, -1.84265378e+00,  5.27471208e+00,\n        -3.84437905e-01,  2.98145461e+00,  2.07557662e+02,  6.69023444e+00,\n         4.65046152e+00,  4.65046152e+00,  4.30453045e+00,  2.49943877e+00,\n         2.49943877e+00,  1.59265894e+00,  1.59265894e+00,  9.67012111e-01,\n         9.67012111e-01,  5.49710228e-01,  5.49710228e-01, -1.38000000e+00,\n         1.29225339e+02,  5.75123360e+00,  2.25933420e+00,  1.25283220e+00,\n         5.20843788e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  5.68738627e+00,  0.00000000e+00,  1.01143183e+01,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  1.81991012e+01,\n         0.00000000e+00,  1.21327341e+01,  4.92331105e+00,  4.92331105e+00,\n         5.68738627e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  4.04461536e+01,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  5.68738627e+00,  0.00000000e+00,\n         0.00000000e+00,  4.92331105e+00,  0.00000000e+00,  1.01143183e+01,\n         0.00000000e+00,  3.03318353e+01,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  4.31400000e+01,  4.92331105e+00,  1.01143183e+01,\n         0.00000000e+00,  5.68738627e+00,  0.00000000e+00,  0.00000000e+00,\n         1.21327341e+01,  1.81991012e+01,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  9.58981481e+00,\n         1.00064815e+01,  1.36574074e-01,  0.00000000e+00,  7.93379630e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         9.00000000e+00,  0.00000000e+00,  3.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  1.00000000e+00,  0.00000000e+00,\n         1.00000000e+00,  2.00000000e+00,  0.00000000e+00,  3.00000000e+00,\n         1.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         1.00000000e+00,  1.59480000e+00,  3.30964000e+01,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  1.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.00000000e+00,  1.00000000e+00,  1.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  1.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  2.00000000e+00]),\n array([ 6.05876291e+00,  7.99722222e-01,  6.05876291e+00,  7.99722222e-01,\n         6.34617243e-01,  1.88657000e+02,  1.79585000e+02,  1.88039278e+02,\n         6.40000000e+01,  0.00000000e+00,  4.83886875e-02, -8.36642214e-02,\n         8.36642214e-02,  4.83886875e-02,  6.92307692e-01,  1.30769231e+00,\n         2.00000000e+00,  3.54956912e+01,  1.00655351e+01,  1.99080537e+00,\n        -2.02009465e+00,  2.26090595e+00, -1.76508460e+00,  6.32831267e+00,\n         1.61812771e+00,  2.53607045e+00,  3.92879048e+02,  9.09601184e+00,\n         7.07411690e+00,  7.83004584e+00,  6.37701010e+00,  4.17701611e+00,\n         4.55498058e+00,  2.84587168e+00,  3.25307181e+00,  1.95865073e+00,\n         2.28823895e+00,  1.31303116e+00,  1.55787348e+00, -1.27000000e+00,\n         1.45975693e+03,  8.33375347e+00,  3.62938902e+00,  1.73184395e+00,\n         8.27917636e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  6.01318764e+01,\n         1.16298186e+01,  1.05860848e+01,  0.00000000e+00,  0.00000000e+00,\n         1.16009399e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  5.96199369e+01,  0.00000000e+00,\n         1.11269030e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         1.16009399e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  5.45973036e+01,  5.02263331e+00,  1.11269030e+01,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  1.61495363e+01,\n         0.00000000e+00,  0.00000000e+00,  4.24645695e+01,  1.21327341e+01,\n         1.16009399e+01,  0.00000000e+00,  6.05876291e+00,  0.00000000e+00,\n         7.99722222e-01,  2.24802469e+00,  0.00000000e+00,  1.80046013e+01,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         1.30000000e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  2.00000000e+00,  0.00000000e+00,\n         2.00000000e+00,  0.00000000e+00,  0.00000000e+00,  1.00000000e+00,\n         1.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         2.00000000e+00,  4.00700000e+00,  5.68880000e+01,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  2.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  1.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00]),\n array([10.20601852,  0.37037037, 10.20601852,  0.37037037,  0.46262984,\n        84.118     , 76.054     , 84.05751488, 34.        ,  0.        ,\n         0.13240548, -0.2997168 ,  0.2997168 ,  0.13240548,  1.66666667,\n         2.16666667,  2.16666667, 16.13826181, 10.30494373,  2.24842727,\n        -1.75188818,  2.2853269 , -1.88017545,  5.79888559, -0.11763132,\n         2.30760985, 72.00763014,  4.5689141 ,  3.89981212,  3.89981212,\n         2.80453045,  2.30929586,  2.30929586,  1.8849241 ,  1.8849241 ,\n         1.15226523,  1.15226523,  0.4898596 ,  0.4898596 , -0.33      ,\n        41.27730244,  3.84636684,  1.06919835,  0.58808069, 37.35471043,\n         0.        ,  5.78324495,  0.        ,  0.        ,  0.        ,\n         0.        ,  4.79453718,  0.        ,  0.        ,  0.        ,\n         0.        , 19.76538045,  5.91790605,  0.        ,  4.79453718,\n         5.78324495,  0.        ,  0.        ,  5.91790605, 19.76538045,\n         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n         0.        ,  0.        ,  0.        ,  5.78324495,  4.79453718,\n         5.91790605, 19.76538045,  0.        ,  0.        ,  0.        ,\n         0.        , 17.07      ,  0.        ,  4.79453718,  0.        ,\n         0.        , 11.70115099, 12.84164325,  0.        ,  6.9237372 ,\n         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n        10.20601852,  0.        ,  0.        ,  0.83333333,  0.        ,\n         2.2962963 ,  1.66435185,  0.        ,  0.8       ,  6.        ,\n         0.        ,  1.        ,  1.        ,  0.        ,  1.        ,\n         0.        ,  0.        ,  0.        ,  1.        ,  0.        ,\n         1.        ,  1.        ,  1.        ,  0.        ,  1.        ,\n         1.        ,  0.9854    , 23.405     ,  0.        ,  0.        ,\n         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n         0.        ,  0.        ,  0.        ,  1.        ,  1.        ,\n         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n         0.        ,  0.        ,  0.        ,  0.        ,  1.        ,\n         1.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n         0.        ,  0.        ,  0.        ,  0.        ]),\n array([ 1.02273148e+01,  7.75462963e-01,  1.02273148e+01,  7.75462963e-01,\n         5.16363515e-01,  1.20151000e+02,  1.12087000e+02,  1.20057515e+02,\n         4.60000000e+01,  0.00000000e+00,  1.49815095e-01, -2.97885540e-01,\n         2.97885540e-01,  1.49815095e-01,  1.33333333e+00,  2.00000000e+00,\n         2.44444444e+00,  1.61289534e+01,  1.01255174e+01,  1.89539783e+00,\n        -1.91983339e+00,  2.01514468e+00, -1.81725518e+00,  5.76279383e+00,\n         1.11786356e-01,  3.14797913e+00,  2.15562550e+02,  6.69023444e+00,\n         5.29499964e+00,  5.29499964e+00,  4.34253526e+00,  2.85172766e+00,\n         2.85172766e+00,  1.97443915e+00,  1.97443915e+00,  1.31542833e+00,\n         1.31542833e+00,  7.19017623e-01,  7.19017623e-01, -1.11000000e+00,\n         1.30651025e+02,  6.01674271e+00,  2.44375255e+00,  1.16539522e+00,\n         5.43228094e+01,  0.00000000e+00,  6.28616052e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  4.79453718e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  2.42654683e+01,\n         1.24871887e+01,  5.56345149e+00,  0.00000000e+00,  4.79453718e+00,\n         6.28616052e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         6.92373720e+00,  0.00000000e+00,  3.53923713e+01,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  6.28616052e+00,  0.00000000e+00,  6.92373720e+00,\n         1.59214402e+01,  2.42654683e+01,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.70700000e+01,  0.00000000e+00,  4.79453718e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  1.74130635e+01,\n         0.00000000e+00,  0.00000000e+00,  3.11892055e+01,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  1.02273148e+01,\n         0.00000000e+00,  1.81018519e+00,  0.00000000e+00,  7.50509259e+00,\n         8.70370370e-01,  1.92037037e+00,  0.00000000e+00,  1.25000000e-01,\n         9.00000000e+00,  0.00000000e+00,  1.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  1.00000000e+00,  0.00000000e+00,\n         1.00000000e+00,  1.00000000e+00,  0.00000000e+00,  1.00000000e+00,\n         1.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         1.00000000e+00,  1.80752000e+00,  3.65665000e+01,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.00000000e+00,  1.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  1.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.00000000e+00]),\n array([ 9.04370370e+00,  3.75555556e-01,  9.04370370e+00,  3.75555556e-01,\n         5.57704396e-01,  1.22167000e+02,  1.12087000e+02,  1.22073165e+02,\n         4.80000000e+01,  0.00000000e+00,  1.17999323e-01, -5.07686937e-01,\n         5.07686937e-01,  1.17999323e-01,  1.22222222e+00,  1.88888889e+00,\n         2.33333333e+00,  1.62552832e+01,  1.01410140e+01,  1.91210122e+00,\n        -1.96628026e+00,  2.15036766e+00, -1.74789087e+00,  5.33534323e+00,\n         4.70722043e-01,  3.17167803e+00,  2.15807662e+02,  6.85337115e+00,\n         5.67926440e+00,  5.67926440e+00,  4.19837730e+00,  2.96164067e+00,\n         2.96164067e+00,  2.28994095e+00,  2.28994095e+00,  1.35229525e+00,\n         1.35229525e+00,  8.05386579e-01,  8.05386579e-01, -9.80000000e-01,\n         1.04200919e+02,  6.14468828e+00,  2.09491741e+00,  1.22443465e+00,\n         5.49555211e+01,  5.10652739e+00,  5.74951183e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  1.76961856e+01,\n         2.54772930e+01,  0.00000000e+00,  0.00000000e+00,  5.10652739e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         1.38474744e+01,  0.00000000e+00,  2.93260042e+01,  0.00000000e+00,\n         5.74951183e+00,  0.00000000e+00,  0.00000000e+00,  5.74951183e+00,\n         0.00000000e+00,  5.10652739e+00,  0.00000000e+00,  1.38474744e+01,\n         1.11269030e+01,  1.81991012e+01,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  2.02300000e+01,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  5.74951183e+00,  5.56345149e+00,\n         5.56345149e+00,  6.06636707e+00,  2.59802085e+01,  0.00000000e+00,\n         5.10652739e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         9.04370370e+00,  2.12527778e+00,  3.75555556e-01,  5.55787037e+00,\n         0.00000000e+00,  3.89759259e+00,  0.00000000e+00,  2.50000000e-01,\n         9.00000000e+00,  1.00000000e+00,  1.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  1.00000000e+00,  0.00000000e+00,\n         1.00000000e+00,  1.00000000e+00,  1.00000000e+00,  1.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         1.00000000e+00,  2.00904000e+00,  3.75808000e+01,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  1.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  2.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         1.00000000e+00,  1.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00]),\n array([ 10.09876543,  -2.69444444,  10.09876543,   2.69444444,\n          0.39155167,  86.468     ,  85.46      ,  85.97348415,\n         26.        ,   0.        ,   0.31189298,  -0.19195453,\n          0.31189298,   0.19195453,   1.5       ,   1.5       ,\n          1.5       ,  35.49581217,  11.69510527,   1.83245423,\n         -1.66396911,   1.92949556,  -1.61823787,   6.18056805,\n          0.24329753,   2.32379001,  10.7548875 ,   3.57735027,\n          1.71124369,   2.46717263,   1.73205081,   0.65465367,\n          1.09108945,   0.24743583,   0.57735027,   0.        ,\n          0.        ,   0.        ,   0.        ,   0.15      ,\n          3.2451125 ,   4.15      ,   1.46746032, 126.37222222,\n         27.37358806,   0.        ,   0.        ,   0.        ,\n          0.        ,   0.        ,   5.88462657,   0.        ,\n          0.        ,   8.7808301 ,   0.        ,  11.60093989,\n          0.        ,   0.        ,   0.        ,   8.7808301 ,\n         11.60093989,   0.        ,   0.        ,   0.        ,\n          5.88462657,   0.        ,   0.        ,   0.        ,\n          0.        ,   0.        ,   8.7808301 ,   0.        ,\n         11.60093989,   5.88462657,   0.        ,   0.        ,\n          0.        ,   0.        ,   0.        ,   0.        ,\n          0.        ,   0.        ,   5.88462657,   8.7808301 ,\n          0.        ,   0.        ,   0.        ,   0.        ,\n          0.        ,   0.        ,   0.        ,  11.60093989,\n          0.        ,  20.19753086,   3.94135802,   0.        ,\n          0.        ,   0.        ,  -2.69444444,   0.        ,\n          0.        ,   0.        ,   0.        ,   1.        ,\n          4.        ,   0.        ,   0.        ,   0.        ,\n          0.        ,   0.        ,   0.        ,   0.        ,\n          0.        ,   0.        ,   0.        ,   3.        ,\n          0.        ,   0.        ,   0.        ,   0.        ,\n          0.        ,   1.4478    ,  11.857     ,   0.        ,\n          0.        ,   0.        ,   0.        ,   0.        ,\n          0.        ,   0.        ,   0.        ,   0.        ,\n          0.        ,   0.        ,   0.        ,   0.        ,\n          0.        ,   0.        ,   0.        ,   0.        ,\n          0.        ,   0.        ,   0.        ,   0.        ,\n          0.        ,   0.        ,   0.        ,   0.        ,\n          3.        ,   0.        ,   0.        ,   0.        ,\n          0.        ,   0.        ,   0.        ,   0.        ,\n          0.        ,   0.        ,   0.        ,   0.        ,\n          0.        ,   0.        ,   0.        ,   0.        ,\n          0.        ,   0.        ,   0.        ,   3.        ,\n          0.        ,   0.        ,   0.        ,   0.        ,\n          0.        ,   0.        ,   0.        ,   0.        ,\n          0.        ,   0.        ,   0.        ,   0.        ,\n          0.        ,   0.        ,   0.        ,   0.        ,\n          0.        ,   0.        ,   0.        ,   0.        ,\n          0.        ,   0.        ,   0.        ,   0.        ,\n          0.        ,   0.        ,   0.        ,   0.        ,\n          0.        ,   0.        ,   0.        ,   0.        ,\n          0.        ,   0.        ,   0.        ,   0.        ,\n          0.        ,   0.        ,   0.        ,   0.        ,\n          0.        ,   0.        ,   0.        ,   0.        ,\n          0.        ,   1.        ]),\n array([ 9.77777778e+00, -3.16203704e+00,  9.77777778e+00,  9.93055556e-01,\n         4.30939190e-01,  1.10134000e+02,  1.04086000e+02,  1.10003765e+02,\n         3.80000000e+01,  0.00000000e+00,  2.63622800e-01, -2.73672938e-01,\n         2.73672938e-01,  2.63622800e-01,  1.50000000e+00,  1.66666667e+00,\n         1.66666667e+00,  3.22398053e+01,  1.17708428e+01,  1.90072460e+00,\n        -1.83660581e+00,  1.75414163e+00, -1.95180405e+00,  7.85473147e+00,\n         4.02951721e-01,  3.85062164e+00,  1.10754888e+02,  5.20710678e+00,\n         3.63299316e+00,  4.44948974e+00,  2.56066017e+00,  1.31649658e+00,\n         3.13299316e+00,  8.70790812e-01,  2.61237244e+00,  3.02749430e-01,\n         9.08248290e-01,  0.00000000e+00,  0.00000000e+00, -9.00000000e-02,\n         1.21647970e+01,  5.91000000e+00,  1.57209546e+00,  3.91000000e+00,\n         3.70521406e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.01181269e+01,  0.00000000e+00,  4.18308543e+00,\n         0.00000000e+00,  8.41779698e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  1.33655667e+01,  1.26008824e+01,\n         1.01181269e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.33655667e+01,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  2.17833637e+01,  1.43012123e+01,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  4.33700000e+01,  1.01181269e+01,  8.41779698e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  1.33655667e+01,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  4.18308543e+00,\n         0.00000000e+00,  2.34652778e+01,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         9.93055556e-01,  0.00000000e+00, -2.04166667e+00,  1.00000000e+00,\n         6.00000000e+00,  0.00000000e+00,  3.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  3.00000000e+00,  0.00000000e+00,  4.00000000e+00,\n         1.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00, -4.07600000e-01,  2.18528000e+01,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.00000000e+00]),\n array([ 8.95662037e+00, -1.66930556e+00,  8.95662037e+00,  7.25818216e-01,\n         2.61262653e-01,  1.82172000e+02,  1.68060000e+02,  1.82079038e+02,\n         7.40000000e+01,  0.00000000e+00,  1.10578607e-01, -3.93579135e-01,\n         3.93579135e-01,  1.10578607e-01,  6.66666667e-01,  9.16666667e-01,\n         1.08333333e+00,  1.63947549e+01,  1.00422937e+01,  2.28707281e+00,\n        -2.23679597e+00,  2.03470430e+00, -2.46498196e+00,  4.79256212e+00,\n        -1.22994405e-01,  3.98516445e+00,  1.04605938e+02,  9.72361464e+00,\n         6.40689621e+00,  6.40689621e+00,  5.54011122e+00,  3.48174767e+00,\n         3.48174767e+00,  2.48102863e+00,  2.48102863e+00,  1.51247816e+00,\n         1.51247816e+00,  6.71208827e-01,  6.71208827e-01, -2.40000000e-01,\n         3.58753230e+02,  1.17600000e+01,  5.41346133e+00,  3.01540467e+00,\n         6.93293641e+01,  3.06391644e+01,  2.44158656e+01,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  1.32137639e+01,  3.06391644e+01,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         2.44158656e+01,  1.32137639e+01,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  6.82687938e+01,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.21380000e+02,  3.76296295e+01,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         3.06391644e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         5.21769142e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n        -6.39194444e+00, -1.45163643e+00,  0.00000000e+00,  1.00000000e+00,\n         1.20000000e+01,  6.00000000e+00,  6.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  6.00000000e+00,  6.00000000e+00,  6.00000000e+00,\n         5.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00, -3.58540000e+00,  3.81988000e+01,  0.00000000e+00,\n         6.00000000e+00,  6.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         4.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00]),\n array([ 9.37120370e+00,  3.50092593e-01,  9.37120370e+00,  3.50092593e-01,\n         6.02016070e-01,  1.44173000e+02,  1.36109000e+02,  1.44057515e+02,\n         5.40000000e+01,  0.00000000e+00,  1.22898728e-01, -5.07311517e-01,\n         5.07311517e-01,  1.22898728e-01,  8.18181818e-01,  1.54545455e+00,\n         2.36363636e+00,  1.62551099e+01,  1.01149813e+01,  1.93965426e+00,\n        -1.97215725e+00,  2.22377723e+00, -1.70306746e+00,  5.87219934e+00,\n         4.81446303e-01,  2.91316116e+00,  3.74034490e+02,  7.68179828e+00,\n         5.98866548e+00,  5.98866548e+00,  5.37701010e+00,  3.54497400e+00,\n         3.54497400e+00,  2.49827428e+00,  2.49827428e+00,  1.76662142e+00,\n         1.76662142e+00,  1.20831205e+00,  1.20831205e+00, -1.50000000e+00,\n         5.05763735e+02,  6.22562358e+00,  2.27407848e+00,  9.44444444e-01,\n         6.49073014e+01,  5.10652739e+00,  5.74951183e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  3.63982024e+01,\n         1.14525913e+01,  5.38622421e+00,  0.00000000e+00,  5.10652739e+00,\n         1.07724484e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  4.24645695e+01,  0.00000000e+00,\n         5.74951183e+00,  0.00000000e+00,  0.00000000e+00,  5.74951183e+00,\n         0.00000000e+00,  5.10652739e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  4.24645695e+01,  0.00000000e+00,  1.07724484e+01,\n         0.00000000e+00,  2.02300000e+01,  0.00000000e+00,  5.10652739e+00,\n         0.00000000e+00,  0.00000000e+00,  5.74951183e+00,  1.07724484e+01,\n         0.00000000e+00,  6.06636707e+00,  3.63982024e+01,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         1.13596296e+01,  0.00000000e+00,  3.50092593e-01,  1.32902778e+01,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         1.10000000e+01,  1.00000000e+00,  1.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  2.00000000e+00,  0.00000000e+00,\n         2.00000000e+00,  1.00000000e+00,  1.00000000e+00,  1.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         2.00000000e+00,  2.54540000e+00,  4.56128000e+01,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  1.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  2.00000000e+00,  0.00000000e+00,  1.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         1.00000000e+00,  1.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00]),\n array([  9.48708333,  -0.77777778,   9.48708333,   0.1875    ,\n          0.40846577, 119.12      , 110.048     , 119.05824315,\n         48.        ,   0.        ,   0.29400465,  -0.3136379 ,\n          0.3136379 ,   0.29400465,   1.75      ,   2.25      ,\n          2.375     ,  16.94916701,  10.24690601,   1.95724811,\n         -1.98516118,   1.90291201,  -2.06258328,   4.3380381 ,\n         -0.75865075,   3.05007829,  81.35260811,   6.5689141 ,\n          4.95641552,   4.95641552,   3.62589766,   2.39934652,\n          2.39934652,   1.91321976,   1.91321976,   0.51327819,\n          0.51327819,   0.20992926,   0.20992926,  -0.8       ,\n         40.33920395,   7.2       ,   3.23395062,   5.2       ,\n         47.55463682,   4.83758858,   0.        ,   0.        ,\n          0.        ,   5.08661904,   0.        ,   0.        ,\n          0.        ,   0.        ,  10.11431827,  13.8474744 ,\n          5.91790605,   0.        ,   6.60688196,   9.92420763,\n          0.        ,   0.        ,   0.        ,   5.91790605,\n         13.8474744 ,   6.60688196,  10.11431827,   0.        ,\n          0.        ,   0.        ,   0.        ,   0.        ,\n          0.        ,  11.69350101,   4.83758858,  16.03222431,\n         13.8474744 ,   0.        ,   0.        ,   0.        ,\n          0.        ,  52.37      ,   5.08661904,  10.11431827,\n          0.        ,  12.52478801,   0.        ,   0.        ,\n          0.        ,   0.        ,  13.8474744 ,   4.83758858,\n          0.        ,   0.        ,   0.        ,  13.5125463 ,\n          8.70930556,   0.        ,   0.22259259,   0.        ,\n          0.        ,   3.88888889,   0.        ,   1.        ,\n          8.        ,   0.        ,   4.        ,   0.        ,\n          0.        ,   0.        ,   0.        ,   0.        ,\n          0.        ,   3.        ,   0.        ,   4.        ,\n          3.        ,   0.        ,   0.        ,   0.        ,\n          0.        ,   0.8507    ,  27.7844    ,   0.        ,\n          0.        ,   0.        ,   0.        ,   0.        ,\n          0.        ,   0.        ,   0.        ,   0.        ,\n          0.        ,   0.        ,   0.        ,   0.        ,\n          0.        ,   0.        ,   1.        ,   0.        ,\n          0.        ,   0.        ,   0.        ,   0.        ,\n          0.        ,   0.        ,   0.        ,   0.        ,\n          0.        ,   0.        ,   0.        ,   0.        ,\n          0.        ,   0.        ,   0.        ,   0.        ,\n          0.        ,   0.        ,   0.        ,   0.        ,\n          0.        ,   0.        ,   0.        ,   0.        ,\n          0.        ,   0.        ,   0.        ,   0.        ,\n          0.        ,   0.        ,   0.        ,   0.        ,\n          0.        ,   0.        ,   0.        ,   0.        ,\n          0.        ,   0.        ,   0.        ,   0.        ,\n          0.        ,   0.        ,   0.        ,   0.        ,\n          0.        ,   0.        ,   0.        ,   0.        ,\n          0.        ,   0.        ,   0.        ,   0.        ,\n          0.        ,   0.        ,   0.        ,   0.        ,\n          0.        ,   0.        ,   0.        ,   0.        ,\n          0.        ,   0.        ,   0.        ,   0.        ,\n          0.        ,   0.        ,   0.        ,   0.        ,\n          0.        ,   0.        ,   0.        ,   0.        ,\n          0.        ,   2.        ]),\n array([ 8.73583333e+00,  2.99259259e-01,  8.73583333e+00,  2.99259259e-01,\n         6.36683481e-01,  1.73009000e+02,  1.67969000e+02,  1.71952377e+02,\n         4.20000000e+01,  0.00000000e+00,  1.15154154e-01, -5.07965629e-01,\n         5.07965629e-01,  1.15154154e-01,  1.12500000e+00,  1.62500000e+00,\n         2.00000000e+00,  7.99187309e+01,  1.03441263e+01,  1.83108589e+00,\n        -1.87338331e+00,  2.13070712e+00, -1.60972372e+00,  9.10299010e+00,\n         4.74988807e-01,  3.03245553e+00,  1.47388339e+02,  5.98312766e+00,\n         4.13457915e+00,  5.72057568e+00,  3.78769370e+00,  2.23395624e+00,\n         3.02695451e+00,  1.47641678e+00,  2.39209231e+00,  8.26626202e-01,\n         1.35529172e+00,  4.41090879e-01,  7.05423635e-01, -5.00000000e-01,\n         7.07989238e+01,  5.63333333e+00,  2.17867036e+00,  1.23407202e+00,\n         5.60931845e+01,  5.10652739e+00,  5.74951183e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  1.59299439e+01,\n         2.42654683e+01,  4.47271952e+00,  0.00000000e+00,  5.10652739e+00,\n         1.59299439e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  2.87381878e+01,  0.00000000e+00,\n         5.74951183e+00,  0.00000000e+00,  0.00000000e+00,  5.74951183e+00,\n         1.59299439e+01,  5.10652739e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  2.87381878e+01,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  2.02300000e+01,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  5.74951183e+00,  4.47271952e+00,\n         0.00000000e+00,  2.42654683e+01,  0.00000000e+00,  1.59299439e+01,\n         5.10652739e+00,  9.81759259e-01,  3.23430556e+00,  0.00000000e+00,\n         8.73583333e+00,  0.00000000e+00,  2.99259259e-01,  6.83217593e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         8.00000000e+00,  1.00000000e+00,  1.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  1.00000000e+00,  0.00000000e+00,\n         1.00000000e+00,  1.00000000e+00,  1.00000000e+00,  2.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         1.00000000e+00,  2.15470000e+00,  3.58068000e+01,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  1.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  1.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         1.00000000e+00,  1.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00]),\n array([ 2.08333333e+00,  1.24768519e+00,  2.08333333e+00,  1.24768519e+00,\n         5.46827449e-01,  1.21183000e+02,  1.10095000e+02,  1.21089149e+02,\n         4.80000000e+01,  0.00000000e+00,  3.60487258e-02, -3.77661479e-01,\n         3.77661479e-01,  3.60487258e-02,  1.00000000e+00,  1.55555556e+00,\n         1.88888889e+00,  1.50554998e+01,  1.02956314e+01,  1.87159749e+00,\n        -2.09936136e+00,  2.06750474e+00, -2.07058951e+00,  5.43278760e+00,\n         1.13195039e+00,  2.84823405e+00,  1.67182326e+02,  6.69023444e+00,\n         5.83396494e+00,  5.83396494e+00,  4.30453045e+00,  3.02871759e+00,\n         3.02871759e+00,  2.22997635e+00,  2.22997635e+00,  1.27259138e+00,\n         1.27259138e+00,  7.26136501e-01,  7.26136501e-01, -9.80000000e-01,\n         1.29225339e+02,  6.14468828e+00,  2.53393022e+00,  1.45673769e+00,\n         5.59211210e+01,  4.89990973e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  1.81991012e+01,\n         1.21327341e+01,  1.97827302e+01,  0.00000000e+00,  0.00000000e+00,\n         5.68738627e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.89952537e+01,  3.03318353e+01,  0.00000000e+00,\n         0.00000000e+00,  4.89990973e+00,  5.68738627e+00,  0.00000000e+00,\n         0.00000000e+00,  1.40953440e+01,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  3.03318353e+01,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  3.24000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         5.68738627e+00,  0.00000000e+00,  3.22944452e+01,  1.70326439e+01,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  2.08333333e+00,\n         0.00000000e+00,  1.24768519e+00,  0.00000000e+00,  1.02615741e+01,\n         0.00000000e+00,  0.00000000e+00,  4.07407407e+00,  2.50000000e-01,\n         9.00000000e+00,  0.00000000e+00,  1.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  1.00000000e+00,  0.00000000e+00,\n         1.00000000e+00,  1.00000000e+00,  0.00000000e+00,  1.00000000e+00,\n         1.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         1.00000000e+00,  1.75260000e+00,  4.07690000e+01,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  1.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         1.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  1.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00]),\n array([ 6.82415895e+00, -1.37469136e+00,  6.82415895e+00,  4.66820988e-02,\n         3.42677786e-01,  3.80913000e+02,  3.72849000e+02,  3.77870631e+02,\n         1.04000000e+02,  0.00000000e+00,  1.66359048e-01, -3.68961262e-01,\n         3.68961262e-01,  1.66359048e-01,  8.42105263e-01,  1.26315789e+00,\n         1.68421053e+00,  3.55403087e+01,  9.72507001e+00,  2.88933239e+00,\n        -2.37510397e+00,  2.83642388e+00, -2.46007974e+00,  6.65321233e+00,\n         2.37343859e-01,  1.80290746e+00,  5.16422862e+02,  1.35330157e+01,\n         9.34724352e+00,  1.38828172e+01,  8.77572757e+00,  6.24914479e+00,\n         8.51693163e+00,  6.30618247e+00,  9.58183366e+00,  5.92329358e+00,\n         1.02157933e+01,  5.29820921e+00,  8.43442227e+00,  1.44000000e+00,\n         3.87785664e+04,  1.29321582e+01,  3.20141112e+00,  9.85958268e-01,\n         1.39967998e+02,  4.73686295e+00,  9.74834458e+00,  4.33335411e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  2.32018798e+01,  4.64037596e+01,\n         3.00924458e+01,  0.00000000e+00,  2.22725055e+01,  4.73686295e+00,\n         6.96056393e+01,  0.00000000e+00,  0.00000000e+00,  2.36716242e+01,\n         3.27104531e+01,  0.00000000e+00,  1.00645727e+01,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         6.96056393e+01,  2.62896315e+01,  4.73686295e+00,  2.36716242e+01,\n         6.42082162e+00,  1.00645727e+01,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.25300000e+01,  1.40816987e+01,  0.00000000e+00,\n         0.00000000e+00,  2.40437449e+01,  2.19003848e+01,  6.42082162e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         7.43425023e+01,  4.34647140e+00,  3.95237746e+01, -2.17162037e+00,\n         6.42283951e-01,  0.00000000e+00,  7.75802469e-01,  0.00000000e+00,\n         1.63328798e+00,  0.00000000e+00,  0.00000000e+00,  8.33333333e-01,\n         1.90000000e+01,  0.00000000e+00,  1.00000000e+00,  4.00000000e+00,\n         1.00000000e+00,  5.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.00000000e+00,  0.00000000e+00,  7.00000000e+00,\n         0.00000000e+00,  3.00000000e+00,  1.00000000e+00,  4.00000000e+00,\n         5.00000000e+00,  4.48140000e+00,  7.75750000e+01,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         4.00000000e+00,  2.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  1.20000000e+01,\n         0.00000000e+00,  0.00000000e+00,  1.00000000e+00,  0.00000000e+00,\n         1.00000000e+00,  0.00000000e+00,  0.00000000e+00,  6.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         8.00000000e+00,  0.00000000e+00,  4.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  3.00000000e+00]),\n array([ 8.98550926e+00,  1.80555556e-01,  8.98550926e+00,  1.80555556e-01,\n         6.12772549e-01,  1.24139000e+02,  1.16075000e+02,  1.24052429e+02,\n         4.80000000e+01,  0.00000000e+00,  1.59973721e-01, -5.04254836e-01,\n         5.04254836e-01,  1.59973721e-01,  1.33333333e+00,  2.00000000e+00,\n         2.44444444e+00,  1.64739590e+01,  1.03089529e+01,  1.93571386e+00,\n        -1.98729807e+00,  2.22467353e+00, -1.80311026e+00,  5.37072084e+00,\n         3.73271281e-01,  3.00652401e+00,  1.95862569e+02,  6.69023444e+00,\n         5.16486296e+00,  5.16486296e+00,  4.34253526e+00,  2.66332950e+00,\n         2.66332950e+00,  1.67184884e+00,  1.67184884e+00,  1.08517022e+00,\n         1.08517022e+00,  6.29777043e-01,  6.29777043e-01, -1.18000000e+00,\n         1.30651025e+02,  5.94787724e+00,  2.39556174e+00,  1.13407949e+00,\n         5.37041242e+01,  9.84339035e+00,  0.00000000e+00,  1.14990237e+01,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  1.21327341e+01,\n         1.21327341e+01,  0.00000000e+00,  7.10979754e+00,  9.84339035e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  7.10979754e+00,  2.42654683e+01,  0.00000000e+00,\n         1.14990237e+01,  4.73686295e+00,  0.00000000e+00,  1.14990237e+01,\n         0.00000000e+00,  1.22163249e+01,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  2.42654683e+01,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  2.94600000e+01,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  5.74951183e+00,  5.74951183e+00,  0.00000000e+00,\n         7.10979754e+00,  2.42654683e+01,  0.00000000e+00,  0.00000000e+00,\n         9.84339035e+00,  4.79495370e+00,  0.00000000e+00,  0.00000000e+00,\n         8.98550926e+00,  0.00000000e+00,  6.92129630e-01,  6.83787037e+00,\n         0.00000000e+00,  0.00000000e+00,  1.52287037e+00,  1.42857143e-01,\n         9.00000000e+00,  1.00000000e+00,  2.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  1.00000000e+00,  0.00000000e+00,\n         1.00000000e+00,  2.00000000e+00,  1.00000000e+00,  2.00000000e+00,\n         1.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         1.00000000e+00,  1.40080000e+00,  3.46588000e+01,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  1.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         1.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  1.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  2.00000000e+00,\n         1.00000000e+00,  1.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00]),\n array([ 7.81625000e+00,  6.94444444e-01,  7.81625000e+00,  6.94444444e-01,\n         4.55069880e-01,  6.91070000e+01,  6.20510000e+01,  6.90578492e+01,\n         2.80000000e+01,  0.00000000e+00,  6.21137429e-02, -1.98347574e-01,\n         1.98347574e-01,  6.21137429e-02,  1.80000000e+00,  2.40000000e+00,\n         2.40000000e+00,  1.42170185e+01,  1.03802390e+01,  1.65019557e+00,\n        -1.65400024e+00,  1.77045265e+00, -1.53443224e+00,  4.64880467e+00,\n         9.68670505e-01,  2.48369957e+00,  4.20998655e+01,  4.12132034e+00,\n         3.36142716e+00,  3.36142716e+00,  2.41421356e+00,  1.78426697e+00,\n         1.78426697e+00,  9.08113883e-01,  9.08113883e-01,  3.61803399e-01,\n         3.61803399e-01,  1.11803399e-01,  1.11803399e-01, -5.10000000e-01,\n         1.12451125e+01,  4.49000000e+00,  3.49000000e+00,  3.49000000e+00,\n         3.22266571e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  5.26189155e+00,  0.00000000e+00,  6.92373720e+00,\n         6.42082162e+00,  6.42082162e+00,  6.06922131e+00,  0.00000000e+00,\n         0.00000000e+00,  5.26189155e+00,  0.00000000e+00,  0.00000000e+00,\n         1.97653804e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         6.06922131e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  1.13311129e+01,\n         1.97653804e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  2.37900000e+01,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  6.42082162e+00,  6.42082162e+00,\n         0.00000000e+00,  0.00000000e+00,  1.29929585e+01,  0.00000000e+00,\n         5.26189155e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         7.81625000e+00,  0.00000000e+00,  0.00000000e+00,  2.01736111e+00,\n         1.67708333e+00,  1.98930556e+00,  0.00000000e+00,  7.50000000e-01,\n         5.00000000e+00,  0.00000000e+00,  1.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.00000000e+00,  0.00000000e+00,  1.00000000e+00,\n         1.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.31008000e+00,  2.05210000e+01,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  1.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         1.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00]),\n array([ 3.32458333e+00,  1.11175926e+00,  3.32458333e+00,  1.11175926e+00,\n         6.48140806e-01,  2.35906000e+02,  2.31874000e+02,  2.33867974e+02,\n         4.20000000e+01,  0.00000000e+00,  1.75540651e-02, -5.08383299e-02,\n         5.08383299e-02,  1.75540651e-02,  7.50000000e-01,  1.00000000e+00,\n         1.25000000e+00,  7.99197612e+01,  1.03742035e+01,  1.82508628e+00,\n        -1.86376467e+00,  2.13497578e+00, -1.60897496e+00,  9.10546450e+00,\n         1.60702449e+00,  3.03245553e+00,  1.45388339e+02,  5.98312766e+00,\n         4.06533002e+00,  7.23732310e+00,  3.78769370e+00,  2.19933168e+00,\n         3.78532822e+00,  1.43643578e+00,  3.26778684e+00,  8.03543161e-01,\n         1.86087419e+00,  4.29549359e-01,  9.58214872e-01,  1.80000000e-01,\n         7.07989238e+01,  6.30224939e+00,  2.64609748e+00,  1.60011958e+00,\n         6.51664983e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  3.18598878e+01,\n         2.42654683e+01,  8.94543903e+00,  0.00000000e+00,  0.00000000e+00,\n         3.18598878e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  3.32109073e+01,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         3.18598878e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  3.32109073e+01,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  8.94543903e+00,\n         0.00000000e+00,  0.00000000e+00,  2.42654683e+01,  3.18598878e+01,\n         0.00000000e+00,  2.22351852e+00,  6.64916667e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  7.96064815e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         8.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  1.00000000e+00,  0.00000000e+00,\n         1.00000000e+00,  0.00000000e+00,  0.00000000e+00,  2.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         1.00000000e+00,  3.21160000e+00,  4.18420000e+01,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  2.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00]),\n array([ 3.24826389e+00,  1.13194444e+00,  3.24826389e+00,  1.13194444e+00,\n         4.65988151e-01,  1.22993000e+02,  1.15937000e+02,  1.21973112e+02,\n         2.60000000e+01,  0.00000000e+00,  2.86279724e-03, -9.28186496e-02,\n         9.28186496e-02,  2.86279724e-03,  1.75000000e+00,  2.00000000e+00,\n         2.00000000e+00,  7.99187295e+01,  1.05936606e+01,  1.58214535e+00,\n        -1.65537131e+00,  1.79976156e+00, -1.53932990e+00,  9.08886046e+00,\n         1.11819715e+00,  1.97474487e+00,  5.24511250e+00,  3.41421356e+00,\n         2.79217804e+00,  4.37817457e+00,  1.91421356e+00,  1.47436802e+00,\n         2.59583693e+00,  6.88982237e-01,  1.48198051e+00,  1.88982237e-01,\n         9.81980506e-01,  0.00000000e+00,  0.00000000e+00,  4.80000000e-01,\n         6.85475297e+00,  4.48000000e+00,  3.48000000e+00,  2.48000000e+00,\n         3.53366829e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  2.28536811e+01,\n         6.42082162e+00,  5.33008965e+00,  0.00000000e+00,  0.00000000e+00,\n         1.59299439e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         1.33445588e+01,  5.33008965e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         1.59299439e+01,  5.33008965e+00,  0.00000000e+00,  0.00000000e+00,\n         1.33445588e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  5.33008965e+00,\n         6.42082162e+00,  0.00000000e+00,  0.00000000e+00,  2.28536811e+01,\n         0.00000000e+00,  0.00000000e+00,  3.24826389e+00,  0.00000000e+00,\n         1.13194444e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         1.23611111e+00,  2.13368056e+00,  0.00000000e+00,  1.00000000e+00,\n         4.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  1.00000000e+00,\n         1.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.79130000e+00,  2.40850000e+01,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         1.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  1.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.00000000e+00]),\n array([ 8.82638889e+00, -4.58333333e-01,  8.82638889e+00,  4.58333333e-01,\n         5.09763466e-01,  8.81500000e+01,  7.60540000e+01,  8.80888150e+01,\n         3.80000000e+01,  0.00000000e+00,  5.88698615e-02, -3.90482852e-01,\n         3.90482852e-01,  5.88698615e-02,  1.50000000e+00,  1.66666667e+00,\n         1.66666667e+00,  1.62808759e+01,  1.00895685e+01,  2.05234778e+00,\n        -2.11058625e+00,  2.02994404e+00, -2.14992559e+00,  4.58533490e+00,\n         7.64698173e-02,  3.16848987e+00,  3.36933284e+01,  5.20710678e+00,\n         4.65432038e+00,  4.65432038e+00,  2.56066017e+00,  2.28426697e+00,\n         2.28426697e+00,  2.16598765e+00,  2.16598765e+00,  8.65220664e-01,\n         8.65220664e-01,  0.00000000e+00,  0.00000000e+00, -4.00000000e-02,\n         1.21647970e+01,  5.96000000e+00,  1.60565993e+00,  3.96000000e+00,\n         3.89932532e+01,  5.10652739e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  6.92373720e+00,\n         2.02682960e+01,  0.00000000e+00,  5.60105081e+00,  5.10652739e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         3.27930840e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.07075782e+01,  0.00000000e+00,  0.00000000e+00,\n         2.71920332e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  2.02300000e+01,  5.60105081e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  6.42082162e+00,\n         0.00000000e+00,  1.38474744e+01,  6.92373720e+00,  0.00000000e+00,\n         5.10652739e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         8.82638889e+00, -4.58333333e-01,  0.00000000e+00,  0.00000000e+00,\n         8.26388889e-01,  5.55555556e+00,  0.00000000e+00,  1.00000000e+00,\n         6.00000000e+00,  1.00000000e+00,  1.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.00000000e+00,  1.00000000e+00,  1.00000000e+00,\n         1.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.16730000e+00,  2.65888000e+01,  0.00000000e+00,\n         1.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00]),\n array([ 9.02239796e+00,  1.74305556e-01,  9.02239796e+00,  1.74305556e-01,\n         6.02501219e-01,  1.50221000e+02,  1.36109000e+02,  1.50104465e+02,\n         6.00000000e+01,  0.00000000e+00,  1.15095543e-01, -5.07966639e-01,\n         5.07966639e-01,  1.15095543e-01,  1.00000000e+00,  1.45454545e+00,\n         1.81818182e+00,  1.62546352e+01,  9.87114752e+00,  2.11679059e+00,\n        -2.17873012e+00,  2.22853371e+00, -2.09596061e+00,  5.29373431e+00,\n         4.73796926e-01,  2.99375479e+00,  2.28044844e+02,  8.48312766e+00,\n         7.25661467e+00,  7.25661467e+00,  4.99901857e+00,  3.79497400e+00,\n         3.79497400e+00,  3.79687402e+00,  3.79687402e+00,  1.73333012e+00,\n         1.73333012e+00,  9.61430133e-01,  9.61430133e-01, -9.80000000e-01,\n         2.30734720e+02,  8.11980040e+00,  2.57167101e+00,  1.97033874e+00,\n         6.76854053e+01,  5.10652739e+00,  5.74951183e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  3.29039457e+01,\n         2.31111761e+01,  0.00000000e+00,  0.00000000e+00,  5.10652739e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         2.61862021e+01,  0.00000000e+00,  2.98289198e+01,  0.00000000e+00,\n         5.74951183e+00,  0.00000000e+00,  0.00000000e+00,  5.74951183e+00,\n         0.00000000e+00,  5.10652739e+00,  5.41499047e+00,  0.00000000e+00,\n         2.63346631e+01,  2.42654683e+01,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  2.02300000e+01,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  5.41499047e+00,  5.74951183e+00,  0.00000000e+00,\n         5.56345149e+00,  1.21327341e+01,  1.21327341e+01,  2.07712116e+01,\n         5.10652739e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         9.02239796e+00,  1.41995370e+00,  3.31481481e-01,  7.35300926e+00,\n         0.00000000e+00,  6.45649093e+00,  0.00000000e+00,  4.00000000e-01,\n         1.10000000e+01,  1.00000000e+00,  1.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  1.00000000e+00,  0.00000000e+00,\n         1.00000000e+00,  1.00000000e+00,  1.00000000e+00,  1.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         1.00000000e+00,  2.68970000e+00,  4.68068000e+01,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  1.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         1.00000000e+00,  1.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00]),\n array([ 2.20370370e+00,  6.58518519e-01,  2.20370370e+00,  6.58518519e-01,\n         5.34261738e-01,  1.20195000e+02,  1.08099000e+02,  1.20093900e+02,\n         4.80000000e+01,  0.00000000e+00, -2.18823856e-02, -6.22483947e-02,\n         6.22483947e-02,  2.18823856e-02,  1.00000000e+00,  1.55555556e+00,\n         1.88888889e+00,  1.39837989e+01,  1.00437962e+01,  1.92865706e+00,\n        -2.01164330e+00,  2.11123832e+00, -1.82933446e+00,  5.17038683e+00,\n         8.66630375e-01,  2.84823405e+00,  1.62653001e+02,  6.69023444e+00,\n         5.96410162e+00,  5.96410162e+00,  4.30453045e+00,  3.35405928e+00,\n         3.35405928e+00,  2.56538414e+00,  2.56538414e+00,  1.46623916e+00,\n         1.46623916e+00,  8.37939098e-01,  8.37939098e-01, -7.80000000e-01,\n         1.29225339e+02,  6.34165450e+00,  2.67433726e+00,  1.56276073e+00,\n         5.65262295e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  4.41793097e+01,\n         1.14813575e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         1.97653804e+01,  0.00000000e+00,  3.58952868e+01,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         2.53288319e+01,  3.03318353e+01,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  5.91790605e+00,  0.00000000e+00,\n         5.56345149e+00,  0.00000000e+00,  6.06636707e+00,  3.81129427e+01,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.41435185e+00,  6.58518519e-01,  1.05197222e+01,\n         0.00000000e+00,  4.40740741e+00,  0.00000000e+00,  3.33333333e-01,\n         9.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  1.00000000e+00,  0.00000000e+00,\n         1.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         1.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         1.00000000e+00,  2.81000000e+00,  4.05310000e+01,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00]),\n array([ 5.21720679e+00,  6.84027778e-01,  5.21720679e+00,  6.84027778e-01,\n         4.79095430e-01,  1.12987000e+02,  1.06939000e+02,  1.11984656e+02,\n         3.20000000e+01,  0.00000000e+00,  2.34294910e-02, -1.26671743e-01,\n         1.26671743e-01,  2.34294910e-02,  1.00000000e+00,  1.40000000e+00,\n         1.40000000e+00,  3.54968285e+01,  1.05770678e+01,  1.71697106e+00,\n        -1.75051780e+00,  1.84430449e+00, -1.70300434e+00,  6.19937863e+00,\n         1.10886240e+00,  2.19060969e+00,  1.23645280e+01,  4.12132034e+00,\n         2.87724929e+00,  4.38910718e+00,  2.41421356e+00,  1.53452248e+00,\n         2.60356745e+00,  7.31517864e-01,  1.48744681e+00,  2.67261242e-01,\n         8.01783726e-01,  5.05076272e-02,  4.54568645e-01,  5.80000000e-01,\n         1.12451125e+01,  5.58000000e+00,  4.58000000e+00,  4.58000000e+00,\n         4.20756677e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  2.32018798e+01,  0.00000000e+00,\n         6.42082162e+00,  1.17600069e+01,  0.00000000e+00,  0.00000000e+00,\n         2.32018798e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         6.42082162e+00,  1.17600069e+01,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         2.32018798e+01,  1.17600069e+01,  0.00000000e+00,  0.00000000e+00,\n         6.42082162e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  1.17600069e+01,  6.42082162e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         2.32018798e+01,  0.00000000e+00,  1.04344136e+01,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  1.36805556e+00,  0.00000000e+00,\n         9.19753086e-01,  0.00000000e+00,  0.00000000e+00,  1.00000000e+00,\n         5.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  2.00000000e+00,\n         2.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.85410000e+00,  2.60570000e+01,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         2.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  2.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.00000000e+00]),\n array([ 4.54166667e+00,  8.19444444e-01,  4.54166667e+00,  8.19444444e-01,\n         4.31500998e-01,  6.00960000e+01,  5.20320000e+01,  6.00575149e+01,\n         2.60000000e+01,  0.00000000e+00,  4.33453891e-02, -3.84976893e-01,\n         3.84976893e-01,  4.33453891e-02,  1.75000000e+00,  2.00000000e+00,\n         2.00000000e+00,  1.64606636e+01,  1.08859166e+01,  1.51106866e+00,\n        -1.75969693e+00,  1.51951398e+00, -1.72961327e+00,  3.94414069e+00,\n         2.15447624e-01,  1.97474487e+00,  5.24511250e+00,  3.41421356e+00,\n         3.11535507e+00,  3.11535507e+00,  1.91421356e+00,  1.40403021e+00,\n         1.40403021e+00,  5.77350269e-01,  5.77350269e-01,  2.88675135e-01,\n         2.88675135e-01,  0.00000000e+00,  0.00000000e+00, -4.00000000e-02,\n         6.85475297e+00,  3.96000000e+00,  2.96000000e+00,  1.96000000e+00,\n         2.65826805e+01,  4.73686295e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         6.92373720e+00,  1.37166795e+01,  0.00000000e+00,  4.73686295e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         6.92373720e+00,  1.37166795e+01,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.37166795e+01,  4.73686295e+00,  0.00000000e+00,\n         6.92373720e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  9.23000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  6.60688196e+00,\n         0.00000000e+00,  7.10979754e+00,  6.92373720e+00,  4.73686295e+00,\n         0.00000000e+00,  4.54166667e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  2.77777778e+00,  1.68055556e+00,  1.00000000e+00,\n         4.00000000e+00,  0.00000000e+00,  1.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.00000000e+00,  0.00000000e+00,  1.00000000e+00,\n         1.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  6.52700000e-01,  1.75500000e+01,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         1.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  1.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00]),\n array([ 1.00475926e+01,  1.24629630e-01,  1.00475926e+01,  1.24629630e-01,\n         5.68137403e-01,  1.22123000e+02,  1.16075000e+02,  1.22036779e+02,\n         4.60000000e+01,  0.00000000e+00,  1.49685193e-01, -5.07942239e-01,\n         5.07942239e-01,  1.49685193e-01,  1.44444444e+00,  2.22222222e+00,\n         2.66666667e+00,  1.62547496e+01,  1.02167238e+01,  1.87769653e+00,\n        -1.88719541e+00,  2.07465416e+00, -1.74742067e+00,  5.74759478e+00,\n         1.11799038e-01,  3.07076068e+00,  2.17911065e+02,  6.69023444e+00,\n         4.74221323e+00,  4.74221323e+00,  4.32569850e+00,  2.56935140e+00,\n         2.56935140e+00,  1.71283768e+00,  1.71283768e+00,  1.00629331e+00,\n         1.00629331e+00,  5.98102427e-01,  5.98102427e-01, -1.31000000e+00,\n         1.26054357e+02,  5.82003901e+00,  2.30676364e+00,  1.28770503e+00,\n         5.27521011e+01,  5.10652739e+00,  1.20356724e+01,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  4.79453718e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  1.21327341e+01,\n         1.21327341e+01,  5.56345149e+00,  0.00000000e+00,  9.90106458e+00,\n         6.28616052e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  2.98289198e+01,  0.00000000e+00,\n         5.74951183e+00,  0.00000000e+00,  0.00000000e+00,  5.74951183e+00,\n         0.00000000e+00,  1.13926879e+01,  0.00000000e+00,  0.00000000e+00,\n         1.03579887e+01,  2.42654683e+01,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  3.73000000e+01,  0.00000000e+00,  4.79453718e+00,\n         0.00000000e+00,  5.74951183e+00,  1.18496120e+01,  0.00000000e+00,\n         1.21327341e+01,  1.21327341e+01,  0.00000000e+00,  0.00000000e+00,\n         5.10652739e+00,  0.00000000e+00,  0.00000000e+00,  1.00475926e+01,\n         8.78527778e+00,  4.95370370e-01,  1.24629630e-01,  6.18629630e+00,\n         6.94166667e-01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         9.00000000e+00,  1.00000000e+00,  2.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  1.00000000e+00,  0.00000000e+00,\n         1.00000000e+00,  2.00000000e+00,  1.00000000e+00,  2.00000000e+00,\n         1.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         1.00000000e+00,  1.20470000e+00,  3.34943000e+01,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  1.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.00000000e+00,  1.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  1.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         1.00000000e+00,  1.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.00000000e+00]),\n array([ 1.05346359e+01, -7.79012346e-01,  1.05346359e+01,  1.02839506e-01,\n         3.21157481e-01,  2.95336000e+02,  2.95336000e+02,  2.92837167e+02,\n         7.60000000e+01,  0.00000000e+00,  3.08987844e-01, -2.58215125e-01,\n         3.08987844e-01,  2.58215125e-01,  7.85714286e-01,  1.07142857e+00,\n         1.35714286e+00,  3.55025687e+01,  1.02908990e+01,  2.26526197e+00,\n        -2.04562872e+00,  2.47028686e+00, -1.92278632e+00,  6.55697196e+00,\n        -3.84140931e-01,  3.68246331e+00,  3.90168270e+02,  1.10414519e+01,\n         6.15353254e+00,  9.93317727e+00,  6.37478522e+00,  3.03366635e+00,\n         4.92348872e+00,  2.17562777e+00,  4.06545013e+00,  1.36920574e+00,\n         3.62600492e+00,  7.53609428e-01,  2.02002213e+00,  7.00000000e-02,\n         9.71550388e+02,  1.21410732e+01,  4.28904948e+00,  1.87723087e+00,\n         1.03600710e+02,  0.00000000e+00,  1.00452666e+01,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  5.68738627e+00,  1.01143183e+01,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  5.80046995e+01,\n         0.00000000e+00,  0.00000000e+00,  1.99912110e+01,  4.92331105e+00,\n         6.36920857e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  3.52274848e+01,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  5.68738627e+00,  0.00000000e+00,\n         5.80046995e+01,  4.92331105e+00,  0.00000000e+00,  1.01143183e+01,\n         0.00000000e+00,  0.00000000e+00,  2.51131666e+01,  0.00000000e+00,\n         0.00000000e+00,  4.31400000e+01,  1.06106973e+01,  1.01143183e+01,\n         0.00000000e+00,  2.51131666e+01,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         5.80046995e+01,  0.00000000e+00,  2.79341232e+01,  9.75562358e+00,\n         9.41420383e+00, -5.48395062e-01,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         1.40000000e+01,  0.00000000e+00,  3.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  1.00000000e+00,  0.00000000e+00,\n         1.00000000e+00,  2.00000000e+00,  0.00000000e+00,  8.00000000e+00,\n         1.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         1.00000000e+00,  4.86180000e+00,  5.81464000e+01,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  1.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  5.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.00000000e+00,  1.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  4.00000000e+00]),\n array([ 2.12037037e+00,  1.32925926e+00,  2.12037037e+00,  1.32925926e+00,\n         4.75757685e-01,  1.06168000e+02,  9.60880000e+01,  1.06078250e+02,\n         4.20000000e+01,  0.00000000e+00, -3.97741941e-02, -5.90625792e-02,\n         5.90625792e-02,  3.97741941e-02,  7.50000000e-01,  1.00000000e+00,\n         1.25000000e+00,  1.38579263e+01,  1.01697465e+01,  1.79321802e+00,\n        -1.89501912e+00,  1.98824061e+00, -1.70059564e+00,  5.18939181e+00,\n         1.39853637e+00,  3.03245553e+00,  1.38898114e+02,  5.98312766e+00,\n         5.30940108e+00,  5.30940108e+00,  3.78769370e+00,  2.82136721e+00,\n         2.82136721e+00,  2.15470054e+00,  2.15470054e+00,  1.21823351e+00,\n         1.21823351e+00,  6.36894534e-01,  6.36894534e-01, -7.80000000e-01,\n         7.07989238e+01,  5.35850416e+00,  1.99374471e+00,  1.09353720e+00,\n         5.01612873e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  3.53923713e+01,\n         1.38474744e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         1.38474744e+01,  0.00000000e+00,  3.53923713e+01,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  1.38474744e+01,\n         1.11269030e+01,  2.42654683e+01,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         1.11269030e+01,  0.00000000e+00,  0.00000000e+00,  3.81129427e+01,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  2.65851852e+00,  0.00000000e+00,  8.48148148e+00,\n         0.00000000e+00,  4.19333333e+00,  0.00000000e+00,  2.50000000e-01,\n         8.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  1.00000000e+00,  0.00000000e+00,\n         1.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         1.00000000e+00,  2.30344000e+00,  3.59160000e+01,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  2.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00]),\n array([ 2.12037037e+00,  1.27601852e+00,  2.12037037e+00,  1.27601852e+00,\n         5.90501888e-01,  1.54212000e+02,  1.44132000e+02,  1.54078250e+02,\n         5.80000000e+01,  0.00000000e+00, -1.84042561e-02, -6.22253949e-02,\n         6.22253949e-02,  1.84042561e-02,  4.16666667e-01,  7.50000000e-01,\n         1.08333333e+00,  1.39613316e+01,  1.00688193e+01,  1.91230067e+00,\n        -1.98070714e+00,  2.16566886e+00, -1.73125790e+00,  5.62192401e+00,\n         1.62006332e+00,  2.45714948e+00,  2.97431320e+02,  8.22576835e+00,\n         6.77350269e+00,  6.77350269e+00,  5.96632650e+00,  4.07136721e+00,\n         4.07136721e+00,  2.73205081e+00,  2.73205081e+00,  1.88091147e+00,\n         1.88091147e+00,  1.26120588e+00,  1.26120588e+00, -1.56000000e+00,\n         1.02395273e+03,  7.10873686e+00,  3.22494640e+00,  1.37393594e+00,\n         7.24884973e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  6.06636707e+01,\n         1.11269030e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  6.06636707e+01,  0.00000000e+00,\n         1.11269030e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  6.06636707e+01,  0.00000000e+00,  1.11269030e+01,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         1.11269030e+01,  0.00000000e+00,  1.21327341e+01,  4.85309365e+01,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  2.55203704e+00,  0.00000000e+00,  2.07812963e+01,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         1.20000000e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  2.00000000e+00,  0.00000000e+00,\n         2.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         1.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         2.00000000e+00,  3.35360000e+00,  5.18780000e+01,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  2.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00]),\n array([ 6.12996662e+00,  2.85198570e-01,  6.12996662e+00,  2.85198570e-01,\n         4.48582720e-01,  2.91992000e+02,  2.85944000e+02,  2.89922361e+02,\n         8.20000000e+01,  0.00000000e+00,  7.99562034e-02, -8.26304861e-02,\n         8.26304861e-02,  7.99562034e-02,  6.87500000e-01,  1.31250000e+00,\n         1.93750000e+00,  3.55013093e+01,  1.00616123e+01,  2.13408008e+00,\n        -2.08610672e+00,  2.41626464e+00, -1.82609671e+00,  6.52271784e+00,\n         1.61397772e+00,  2.67707234e+00,  5.20287124e+02,  1.17067423e+01,\n         7.97595951e+00,  1.09996753e+01,  7.60906091e+00,  4.49396282e+00,\n         6.00582071e+00,  3.21392245e+00,  4.75501599e+00,  2.18741685e+00,\n         3.93883325e+00,  1.40064299e+00,  2.31177530e+00, -4.00000000e-01,\n         4.89325789e+03,  1.20674118e+01,  4.84849181e+00,  2.16224964e+00,\n         1.13701562e+02,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  7.67355949e+01,\n         1.16298186e+01,  5.56345149e+00,  2.00905333e+01,  0.00000000e+00,\n         4.64037596e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  5.64887357e+01,  0.00000000e+00,\n         1.11269030e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         4.64037596e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  3.63982024e+01,  2.00905333e+01,  1.11269030e+01,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.00452666e+01,  1.00452666e+01,  1.11269030e+01,\n         0.00000000e+00,  6.06636707e+00,  3.03318353e+01,  0.00000000e+00,\n         4.64037596e+01,  0.00000000e+00,  2.39795948e+01,  0.00000000e+00,\n         1.38878449e+00,  1.73114198e+00,  0.00000000e+00,  1.13449231e+01,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         1.60000000e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  2.00000000e+00,  0.00000000e+00,\n         2.00000000e+00,  0.00000000e+00,  0.00000000e+00,  4.00000000e+00,\n         1.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         2.00000000e+00,  5.96720000e+00,  7.19180000e+01,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  2.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  4.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  2.00000000e+00]),\n array([ 1.07306173e+01, -1.16263889e+00,  1.07306173e+01,  8.48765432e-02,\n         8.34380531e-01,  2.21039000e+02,  2.14991000e+02,  2.19969399e+02,\n         7.00000000e+01,  0.00000000e+00,  3.40579814e-01, -4.94224951e-01,\n         4.94224951e-01,  3.40579814e-01,  1.38461538e+00,  1.92307692e+00,\n         2.30769231e+00,  3.54967871e+01,  1.01749501e+01,  2.17441887e+00,\n        -2.07174281e+00,  2.32951862e+00, -2.01381894e+00,  6.36467914e+00,\n         6.93317362e-02,  3.43320920e+00,  3.49487530e+02,  1.00080717e+01,\n         6.67433966e+00,  8.18619755e+00,  6.07458606e+00,  3.32875145e+00,\n         4.08468040e+00,  2.24260945e+00,  3.05700970e+00,  1.47678428e+00,\n         2.08938562e+00,  9.32059687e-01,  1.39634558e+00, -9.30000000e-01,\n         7.11396473e+02,  1.01528500e+01,  3.85247226e+00,  1.86963801e+00,\n         8.48371209e+01,  9.84339035e+00,  5.56345149e+00,  5.74951183e+00,\n         0.00000000e+00,  0.00000000e+00,  5.96930529e+00,  0.00000000e+00,\n         4.79453718e+00,  0.00000000e+00,  0.00000000e+00,  2.32018798e+01,\n         1.21327341e+01,  0.00000000e+00,  1.71550642e+01,  1.46379275e+01,\n         2.91711851e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  7.10979754e+00,  2.77414523e+01,  0.00000000e+00,\n         5.74951183e+00,  4.73686295e+00,  0.00000000e+00,  5.74951183e+00,\n         2.32018798e+01,  1.81856302e+01,  0.00000000e+00,  0.00000000e+00,\n         1.03579887e+01,  1.21327341e+01,  1.00452666e+01,  0.00000000e+00,\n         0.00000000e+00,  4.65300000e+01,  5.96930529e+00,  4.79453718e+00,\n         0.00000000e+00,  2.13582300e+01,  0.00000000e+00,  0.00000000e+00,\n         1.92425317e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         3.30452701e+01,  4.82101852e+00,  1.13542438e+01,  1.07306173e+01,\n         9.11047840e+00, -1.14197531e-01, -1.07776235e+00,  2.89387346e+00,\n         0.00000000e+00,  0.00000000e+00,  1.33728395e+00,  1.25000000e-01,\n         1.30000000e+01,  1.00000000e+00,  3.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  1.00000000e+00,  0.00000000e+00,\n         1.00000000e+00,  2.00000000e+00,  1.00000000e+00,  5.00000000e+00,\n         2.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         1.00000000e+00,  2.70020000e+00,  4.99733000e+01,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  1.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  1.00000000e+00,\n         1.00000000e+00,  1.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         1.00000000e+00,  0.00000000e+00,  0.00000000e+00,  2.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  1.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00]),\n array([ 8.36558673e+00,  3.64795918e-01,  8.36558673e+00,  3.64795918e-01,\n         5.44191494e-01,  1.16204000e+02,  1.00076000e+02,  1.16120115e+02,\n         5.00000000e+01,  0.00000000e+00,  4.30524072e-02, -3.96376569e-01,\n         3.96376569e-01,  4.30524072e-02,  1.00000000e+00,  1.62500000e+00,\n         2.12500000e+00,  1.62499237e+01,  1.01569274e+01,  1.83554939e+00,\n        -1.93020102e+00,  1.99929192e+00, -1.81237192e+00,  4.38629622e+00,\n         2.82260801e-01,  2.53006046e+00,  2.93680656e+01,  6.24264069e+00,\n         5.68985428e+00,  5.68985428e+00,  3.91421356e+00,  3.52333455e+00,\n         3.52333455e+00,  2.13782036e+00,  2.13782036e+00,  1.26166727e+00,\n         1.26166727e+00,  7.15356789e-01,  7.15356789e-01, -4.00000000e-02,\n         6.14996123e+01,  7.96000000e+00,  6.96000000e+00,  5.96000000e+00,\n         5.17231375e+01,  5.10652739e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  3.26070237e+01,\n         6.42082162e+00,  6.60688196e+00,  0.00000000e+00,  5.10652739e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         3.90278453e+01,  6.60688196e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.17134094e+01,  0.00000000e+00,  0.00000000e+00,\n         3.90278453e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  2.02300000e+01,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  6.60688196e+00,  6.42082162e+00,\n         2.56832865e+01,  0.00000000e+00,  0.00000000e+00,  6.92373720e+00,\n         5.10652739e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         8.36558673e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         6.07621882e+00,  2.55819444e+00,  0.00000000e+00,  1.00000000e+00,\n         8.00000000e+00,  1.00000000e+00,  1.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.00000000e+00,  1.00000000e+00,  1.00000000e+00,\n         5.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.94910000e+00,  3.58448000e+01,  0.00000000e+00,\n         1.00000000e+00,  1.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  3.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.00000000e+00]),\n array([ 5.06944444e+00,  1.00000000e+00,  5.06944444e+00,  1.00000000e+00,\n         4.29940022e-01,  8.61340000e+01,  7.60540000e+01,  8.60731649e+01,\n         3.60000000e+01,  0.00000000e+00,  4.65548551e-02, -3.81452424e-01,\n         3.81452424e-01,  4.65548551e-02,  8.33333333e-01,  1.50000000e+00,\n         1.66666667e+00,  1.64740974e+01,  1.02125031e+01,  1.94481988e+00,\n        -2.07541994e+00,  2.01498424e+00, -2.02506915e+00,  4.44771810e+00,\n         9.68255992e-02,  2.00000000e+00,  1.94099095e+01,  4.24264069e+00,\n         3.94378220e+00,  3.94378220e+00,  3.00000000e+00,  2.57735027e+00,\n         2.57735027e+00,  1.67303261e+00,  1.67303261e+00,  1.07735027e+00,\n         1.07735027e+00,  6.87087058e-01,  6.87087058e-01, -4.00000000e-02,\n         3.43994619e+01,  4.12778523e+00,  2.18967434e+00,  9.76756002e-01,\n         3.83067336e+01,  4.73686295e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         1.92624649e+01,  1.32137639e+01,  0.00000000e+00,  4.73686295e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         1.92624649e+01,  1.32137639e+01,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.32137639e+01,  4.73686295e+00,  0.00000000e+00,\n         1.92624649e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  9.23000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  1.32137639e+01,\n         1.92624649e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         4.73686295e+00,  5.06944444e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         3.93055556e+00,  2.00000000e+00,  0.00000000e+00,  1.00000000e+00,\n         6.00000000e+00,  0.00000000e+00,  1.00000000e+00,  0.00000000e+00,\n         1.00000000e+00,  1.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.00000000e+00,  0.00000000e+00,  1.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  1.00000000e+00,  1.00000000e+00,\n         1.00000000e+00,  1.18690000e+00,  2.46700000e+01,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         1.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00]),\n array([ 6.20278786e+00, -1.19800328e-02,  6.20278786e+00,  4.49665463e-04,\n         2.71030965e-01,  4.98662000e+02,  4.98662000e+02,  4.93688527e+02,\n         1.18000000e+02,  0.00000000e+00,  8.08916956e-02, -8.19117561e-02,\n         8.19117561e-02,  8.08916956e-02,  2.27272727e-01,  3.63636364e-01,\n         5.45454545e-01,  3.55080060e+01,  1.00484218e+01,  2.27133398e+00,\n        -2.17105133e+00,  2.54614536e+00, -1.91286225e+00,  6.59359059e+00,\n         1.60494610e+00,  3.02691407e+00,  6.69959814e+02,  1.69282032e+01,\n         9.77964473e+00,  1.73389342e+01,  1.01068360e+01,  5.13982237e+00,\n         8.91946710e+00,  3.88982237e+00,  7.66946710e+00,  2.66960770e+00,\n         7.22310883e+00,  1.64878609e+00,  4.30350112e+00,  1.34000000e+00,\n         5.44938821e+04,  1.96619253e+01,  7.29664760e+00,  3.10306083e+00,\n         1.75521160e+02,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  1.16009399e+02,\n         0.00000000e+00,  1.11269030e+01,  5.02263331e+01,  0.00000000e+00,\n         1.16009399e+02,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  5.02263331e+01,  0.00000000e+00,\n         1.11269030e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         1.16009399e+02,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  5.02263331e+01,  1.11269030e+01,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  6.13532361e+01,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         1.16009399e+02,  0.00000000e+00,  6.08584191e+01,  0.00000000e+00,\n        -4.95302483e-02,  3.02222222e-01,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         2.20000000e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  2.00000000e+00,  0.00000000e+00,\n         2.00000000e+00,  0.00000000e+00,  0.00000000e+00,  1.00000000e+01,\n         1.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         2.00000000e+00,  9.88760000e+00,  1.01978000e+02,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  2.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  1.00000000e+01,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  2.00000000e+00]),\n array([ 1.06222719e+01, -8.19458617e-02,  1.06222719e+01,  8.19458617e-02,\n         4.38315070e-01,  1.58241000e+02,  1.40097000e+02,  1.58130680e+02,\n         6.60000000e+01,  0.00000000e+00,  3.05001839e-01, -4.68995428e-01,\n         4.68995428e-01,  3.05001839e-01,  1.18181818e+00,  1.81818182e+00,\n         2.36363636e+00,  1.65229397e+01,  1.01235564e+01,  1.97349318e+00,\n        -1.97891576e+00,  2.04463421e+00, -1.98441371e+00,  5.68457189e+00,\n        -1.40248611e-01,  2.95498743e+00,  9.97358555e+01,  8.52709774e+00,\n         7.55913727e+00,  7.55913727e+00,  5.30806041e+00,  4.37715675e+00,\n         4.37715675e+00,  2.74034618e+00,  2.74034618e+00,  1.71212513e+00,\n         1.71212513e+00,  9.74953031e-01,  9.74953031e-01, -5.30000000e-01,\n         2.66849445e+02,  1.04700000e+01,  7.57559662e+00,  7.36587530e+00,\n         6.89338553e+01,  4.73686295e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  5.96930529e+00,  4.79453718e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  3.26070237e+01,\n         6.42082162e+00,  6.42082162e+00,  7.10979754e+00,  9.53140014e+00,\n         5.96930529e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         4.54486669e+01,  7.10979754e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.30791028e+01,  9.53140014e+00,  0.00000000e+00,\n         4.54486669e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  2.63000000e+01,  0.00000000e+00,  4.79453718e+00,\n         0.00000000e+00,  5.96930529e+00,  6.42082162e+00,  1.28416432e+01,\n         2.63722624e+01,  0.00000000e+00,  0.00000000e+00,  1.16606002e+01,\n         0.00000000e+00,  4.51780707e+00,  0.00000000e+00,  1.06222719e+01,\n         0.00000000e+00,  0.00000000e+00, -8.19458617e-02,  0.00000000e+00,\n         6.48880826e+00,  2.18085995e+00,  1.43886535e+00,  8.88888889e-01,\n         1.10000000e+01,  0.00000000e+00,  2.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  2.00000000e+00,  0.00000000e+00,  2.00000000e+00,\n         6.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  2.51990000e+00,  4.53920000e+01,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.00000000e+00,  1.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  1.00000000e+00,\n         1.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  1.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  3.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  2.00000000e+00]),\n array([ 4.17361111e+00,  1.08796296e+00,  4.17361111e+00,  1.08796296e+00,\n         4.91387777e-01,  1.07156000e+02,  9.80840000e+01,  1.07073499e+02,\n         4.20000000e+01,  0.00000000e+00,  3.75360118e-02, -2.58488086e-01,\n         2.58488086e-01,  3.75360118e-02,  1.12500000e+00,  1.62500000e+00,\n         1.87500000e+00,  1.46805559e+01,  1.03208654e+01,  1.81621336e+00,\n        -1.89653542e+00,  1.93183692e+00, -1.80687040e+00,  5.07131084e+00,\n         1.12278571e+00,  3.07766044e+00,  1.64246629e+02,  5.98312766e+00,\n         5.17926440e+00,  5.17926440e+00,  3.78769370e+00,  2.69123053e+00,\n         2.69123053e+00,  1.92034958e+00,  1.92034958e+00,  1.02756086e+00,\n         1.02756086e+00,  6.79335151e-01,  6.79335151e-01, -8.50000000e-01,\n         6.40524865e+01,  5.28986014e+00,  1.94826212e+00,  1.05940309e+00,\n         4.93809353e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  4.98397852e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  6.06636707e+00,\n         2.59802085e+01,  1.13878560e+01,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  4.98397852e+00,  0.00000000e+00,\n         1.38474744e+01,  0.00000000e+00,  2.95869572e+01,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  4.98397852e+00,  0.00000000e+00,  1.38474744e+01,\n         1.13878560e+01,  1.81991012e+01,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.28900000e+01,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  1.13878560e+01,\n         0.00000000e+00,  0.00000000e+00,  3.20465756e+01,  4.98397852e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  4.17361111e+00,\n         0.00000000e+00,  2.17592593e+00,  0.00000000e+00,  5.99768519e+00,\n         0.00000000e+00,  3.98611111e+00,  0.00000000e+00,  2.85714286e-01,\n         8.00000000e+00,  0.00000000e+00,  1.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  1.00000000e+00,\n         1.00000000e+00,  1.00000000e+00,  0.00000000e+00,  1.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         1.00000000e+00,  1.69844000e+00,  3.37110000e+01,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         1.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  1.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  2.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         1.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00]),\n array([ 4.87345679e+00,  1.23765432e+00,  4.87345679e+00,  1.23765432e+00,\n         4.32798364e-01,  9.69440000e+01,  9.49280000e+01,  9.59533554e+01,\n         2.40000000e+01,  0.00000000e+00,  1.55633256e-02, -9.20041756e-02,\n         9.20041756e-02,  1.55633256e-02,  1.00000000e+00,  1.25000000e+00,\n         1.25000000e+00,  3.54979862e+01,  1.12626354e+01,  1.39635018e+00,\n        -1.43513685e+00,  1.78102837e+00, -1.10764253e+00,  6.32910709e+00,\n         2.50749317e+00,  2.54919334e+00,  1.92192809e+01,  3.41421356e+00,\n         1.91062948e+00,  3.42248738e+00,  1.91421356e+00,  7.69769114e-01,\n         1.64264067e+00,  2.51976315e-01,  7.55928946e-01,  4.76190476e-02,\n         4.28571429e-01,  0.00000000e+00,  0.00000000e+00,  3.20000000e-01,\n         6.85475297e+00,  4.32000000e+00,  3.32000000e+00,  2.32000000e+00,\n         3.50211226e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  2.32018798e+01,\n         0.00000000e+00,  1.10704039e+01,  0.00000000e+00,  0.00000000e+00,\n         2.32018798e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  1.10704039e+01,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         2.32018798e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.10704039e+01,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         1.10704039e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         2.32018798e+01,  0.00000000e+00,  9.74691358e+00,  0.00000000e+00,\n         0.00000000e+00,  2.47530864e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         4.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  2.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.93520000e+00,  2.08460000e+01,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  2.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00]),\n array([ 2.26371103e+00,  1.36718750e+00,  2.26371103e+00,  1.36718750e+00,\n         4.77724380e-01,  1.28259000e+02,  1.08099000e+02,  1.28156501e+02,\n         5.60000000e+01,  0.00000000e+00, -5.33063173e-02, -6.53823832e-02,\n         6.53823832e-02,  5.33063173e-02,  5.55555556e-01,  8.88888889e-01,\n         1.22222222e+00,  1.39181930e+01,  1.01097941e+01,  1.85294837e+00,\n        -1.95544754e+00,  2.05129297e+00, -1.75710592e+00,  4.41019297e+00,\n         6.01794085e-01,  2.59508271e+00,  3.33029689e+01,  6.94974747e+00,\n         6.94974747e+00,  6.94974747e+00,  4.41421356e+00,  4.41421356e+00,\n         4.41421356e+00,  2.76776695e+00,  2.76776695e+00,  1.70710678e+00,\n         1.70710678e+00,  1.03033009e+00,  1.03033009e+00,  0.00000000e+00,\n         1.03687916e+02,  9.00000000e+00,  8.00000000e+00,  8.00000000e+00,\n         5.96587879e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  5.87932258e+01,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         5.87932258e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         5.87932258e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         4.49457514e+01,  0.00000000e+00,  0.00000000e+00,  1.38474744e+01,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         9.97257795e+00,  4.52742205e+00,  0.00000000e+00,  1.00000000e+00,\n         9.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         6.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  3.75690000e+00,  4.36670000e+01,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  4.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.00000000e+00]),\n array([ 9.33879630e+00,  3.93518519e-02,  9.33879630e+00,  3.93518519e-02,\n         6.99496591e-01,  1.54165000e+02,  1.44085000e+02,  1.54062994e+02,\n         6.00000000e+01,  0.00000000e+00,  2.00229457e-01, -5.01699726e-01,\n         5.01699726e-01,  2.00229457e-01,  1.09090909e+00,  1.54545455e+00,\n         1.90909091e+00,  1.64912784e+01,  1.02758031e+01,  2.04966230e+00,\n        -2.05652728e+00,  2.34174797e+00, -1.86821299e+00,  5.49097859e+00,\n         3.39672590e-01,  3.09519825e+00,  2.22842528e+02,  8.26758471e+00,\n         6.49576098e+00,  6.49576098e+00,  5.29122366e+00,  3.19236860e+00,\n         3.19236860e+00,  2.01114005e+00,  2.01114005e+00,  1.40181210e+00,\n         1.40181210e+00,  8.31631414e-01,  8.31631414e-01, -1.38000000e+00,\n         3.48570462e+02,  7.72395010e+00,  3.14266797e+00,  1.36760666e+00,\n         6.51826116e+01,  1.45802533e+01,  0.00000000e+00,  1.14990237e+01,\n         5.74951183e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  6.06636707e+00,\n         1.21327341e+01,  0.00000000e+00,  1.42195951e+01,  1.45802533e+01,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.42195951e+01,  1.81991012e+01,  0.00000000e+00,\n         1.72485355e+01,  9.47372591e+00,  0.00000000e+00,  1.72485355e+01,\n         0.00000000e+00,  1.93261225e+01,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.81991012e+01,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  3.86900000e+01,  0.00000000e+00,  5.10652739e+00,\n         0.00000000e+00,  5.74951183e+00,  1.14990237e+01,  0.00000000e+00,\n         1.42195951e+01,  1.81991012e+01,  0.00000000e+00,  0.00000000e+00,\n         9.47372591e+00,  9.71490741e+00,  0.00000000e+00,  0.00000000e+00,\n         9.33879630e+00,  0.00000000e+00,  8.80740741e-01,  5.07648148e+00,\n         0.00000000e+00,  0.00000000e+00,  2.98907407e+00,  2.50000000e-01,\n         1.10000000e+01,  1.00000000e+00,  3.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  1.00000000e+00,  0.00000000e+00,\n         1.00000000e+00,  3.00000000e+00,  1.00000000e+00,  3.00000000e+00,\n         2.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         1.00000000e+00,  1.40940000e+00,  4.12108000e+01,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  1.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         2.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  2.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  1.00000000e+00,\n         1.00000000e+00,  1.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00]),\n array([ 1.07624251e+01, -7.71657796e-01,  1.07624251e+01,  4.18425926e-01,\n         8.21599549e-01,  2.06285000e+02,  1.88141000e+02,  2.06130680e+02,\n         8.20000000e+01,  0.00000000e+00,  3.10185352e-01, -4.80788502e-01,\n         4.80788502e-01,  3.10185352e-01,  1.20000000e+00,  1.73333333e+00,\n         2.13333333e+00,  1.63664048e+01,  9.96847176e+00,  2.12354011e+00,\n        -2.08575797e+00,  2.16889351e+00, -2.06880047e+00,  5.74976818e+00,\n        -1.37862069e-01,  2.75903713e+00,  3.24894119e+02,  1.14222853e+01,\n         9.52667028e+00,  9.52667028e+00,  7.00290776e+00,  5.32030091e+00,\n         5.32030091e+00,  4.39947812e+00,  4.39947812e+00,  2.49409561e+00,\n         2.49409561e+00,  1.55637678e+00,  1.55637678e+00, -1.31000000e+00,\n         1.86233597e+03,  1.17630460e+01,  4.96446030e+00,  3.38763063e+00,\n         9.09417538e+01,  5.10652739e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  5.96930529e+00,  4.79453718e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  3.81129427e+01,\n         3.03893679e+01,  0.00000000e+00,  5.91790605e+00,  9.90106458e+00,\n         5.96930529e+00,  0.00000000e+00,  0.00000000e+00,  5.91790605e+00,\n         3.31099393e+01,  0.00000000e+00,  3.53923713e+01,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.10758327e+01,  1.12153588e+01,  5.91790605e+00,\n         3.78160206e+01,  2.42654683e+01,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  3.73000000e+01,  1.18872113e+01,  4.79453718e+00,\n         0.00000000e+00,  0.00000000e+00,  5.91790605e+00,  1.19842731e+01,\n         5.56345149e+00,  6.92373720e+00,  2.42654683e+01,  1.38474744e+01,\n         5.10652739e+00,  0.00000000e+00,  0.00000000e+00,  1.07624251e+01,\n         8.85015734e+00,  2.14013416e+00, -5.57910368e-01,  7.87157407e+00,\n         1.04338530e+00,  6.05690109e+00,  0.00000000e+00,  4.61538462e-01,\n         1.50000000e+01,  1.00000000e+00,  2.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  1.00000000e+00,  0.00000000e+00,\n         1.00000000e+00,  1.00000000e+00,  1.00000000e+00,  2.00000000e+00,\n         4.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         1.00000000e+00,  3.07320000e+00,  6.10348000e+01,  1.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  1.00000000e+00,\n         1.00000000e+00,  1.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         1.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00]),\n array([ 1.04115295e+01, -2.77840034e+00,  1.04115295e+01,  1.80690980e-02,\n         4.61463132e-01,  2.63211000e+02,  2.53131000e+02,  2.63001730e+02,\n         8.80000000e+01,  0.00000000e+00,  3.79519486e-01, -4.24133019e-01,\n         4.24133019e-01,  3.79519486e-01,  1.25000000e+00,  1.75000000e+00,\n         2.12500000e+00,  3.24529910e+01,  1.02950154e+01,  2.18193413e+00,\n        -2.17270339e+00,  2.47670969e+00, -1.96544201e+00,  8.07279608e+00,\n        -3.84448295e-01,  2.83268137e+00,  4.12941776e+02,  1.21817983e+01,\n         8.65331801e+00,  1.03642418e+01,  7.50414906e+00,  4.16103984e+00,\n         6.71707845e+00,  2.65466000e+00,  5.80359890e+00,  1.71196557e+00,\n         4.15885206e+00,  9.06883011e-01,  1.84313931e+00, -1.01000000e+00,\n         3.26582809e+03,  1.30567111e+01,  5.35810401e+00,  3.24479319e+00,\n         9.75348269e+01,  1.35712415e+01,  5.74951183e+00,  0.00000000e+00,\n         0.00000000e+00,  5.68738627e+00,  6.71860723e+00,  1.01143183e+01,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         1.21327341e+01,  3.81591853e+01,  4.92331105e+00,  1.84945525e+01,\n         2.42128496e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.42195951e+01,  3.43797865e+01,  0.00000000e+00,\n         5.74951183e+00,  4.52374716e+00,  5.68738627e+00,  5.74951183e+00,\n         6.71860723e+00,  1.91429061e+01,  2.08543504e+01,  1.01143183e+01,\n         0.00000000e+00,  2.42654683e+01,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  7.08300000e+01,  1.16419183e+01,  1.01143183e+01,\n         0.00000000e+00,  5.68738627e+00,  5.74951183e+00,  0.00000000e+00,\n         3.84850634e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         2.53780976e+01,  1.51262861e+01,  4.98131273e+00,  9.91798927e+00,\n         1.04115295e+01, -1.80690980e-02,  3.72808642e-01,  5.52291667e+00,\n         0.00000000e+00, -2.77840034e+00,  2.76918210e+00,  2.50000000e-01,\n         1.60000000e+01,  0.00000000e+00,  6.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  1.00000000e+00,  0.00000000e+00,\n         1.00000000e+00,  6.00000000e+00,  0.00000000e+00,  8.00000000e+00,\n         5.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         1.00000000e+00,  2.49090000e+00,  6.20274000e+01,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  1.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.00000000e+00,  1.00000000e+00,  1.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  3.00000000e+00]),\n array([ 9.17361111,  0.63888889,  9.17361111,  0.63888889,  0.4032599 ,\n        58.08      , 52.032     , 58.04186481, 24.        ,  0.        ,\n         0.11921494, -0.30341423,  0.30341423,  0.11921494,  2.        ,\n         2.25      ,  2.25      , 16.12866987, 10.57332152,  1.52151025,\n        -1.51025789,  1.52966691, -1.54603373,  5.4776694 , -0.1070887 ,\n         2.29683526, 17.2451125 ,  3.41421356,  2.69270534,  2.69270534,\n         1.91421356,  1.35105733,  1.35105733,  0.57491496,  0.57491496,\n         0.16666667,  0.16666667,  0.        ,  0.        , -0.33      ,\n         6.85475297,  3.67      ,  2.67      ,  1.67      , 25.63065736,\n         4.79453718,  6.28616052,  0.        ,  0.        ,  0.        ,\n         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n         6.9237372 ,  0.        ,  6.42082162,  0.        ,  4.79453718,\n         6.28616052,  0.        ,  0.        ,  0.        , 13.34455882,\n         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n         0.        ,  0.        ,  0.        ,  6.28616052,  4.79453718,\n         0.        , 13.34455882,  0.        ,  0.        ,  0.        ,\n         0.        , 17.07      ,  0.        ,  4.79453718,  0.        ,\n         0.        ,  6.42082162,  6.28616052,  0.        ,  0.        ,\n         6.9237372 ,  0.        ,  0.        ,  0.        ,  0.        ,\n         9.17361111,  0.        ,  0.        ,  0.        ,  0.        ,\n         1.51388889,  1.8125    ,  0.        ,  0.66666667,  4.        ,\n         0.        ,  1.        ,  0.        ,  0.        ,  0.        ,\n         0.        ,  0.        ,  0.        ,  1.        ,  0.        ,\n         1.        ,  1.        ,  0.        ,  0.        ,  0.        ,\n         0.        ,  0.5953    , 16.355     ,  0.        ,  0.        ,\n         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n         0.        ,  0.        ,  0.        ,  1.        ,  1.        ,\n         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n         0.        ,  1.        ,  0.        ,  0.        ,  0.        ,\n         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n         0.        ,  0.        ,  0.        ,  1.        ]),\n array([ 9.59930556, -0.71064815,  9.59930556,  0.29166667,  0.54344075,\n        88.106     , 80.042     , 88.0524295 , 36.        ,  0.        ,\n         0.30282894, -0.48123052,  0.48123052,  0.30282894,  1.83333333,\n         2.33333333,  2.33333333, 16.36510567, 10.35073867,  1.87010827,\n        -1.79428997,  1.81544074, -1.89862307,  5.65949254, -0.13652883,\n         2.83125711, 49.509775  ,  4.99156383,  3.76967545,  3.76967545,\n         2.77005561,  1.98839111,  1.98839111,  1.14373854,  1.14373854,\n         0.46386547,  0.46386547,  0.21386547,  0.21386547, -0.53      ,\n        14.83446686,  5.47      ,  2.69371365,  3.47      , 36.78983322,\n         5.10652739,  0.        ,  0.        ,  0.        ,  0.        ,\n         5.96930529,  4.79453718,  0.        ,  0.        ,  0.        ,\n         6.9237372 ,  6.42082162,  6.42082162,  0.        ,  9.90106458,\n         5.96930529,  0.        ,  0.        ,  0.        , 19.76538045,\n         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n         0.        ,  0.        ,  0.        , 11.07583268,  4.79453718,\n         0.        , 19.76538045,  0.        ,  0.        ,  0.        ,\n         0.        , 37.3       ,  5.96930529,  4.79453718,  0.        ,\n         0.        ,  6.42082162,  6.42082162,  0.        ,  0.        ,\n         6.9237372 ,  0.        ,  5.10652739,  0.        ,  0.        ,\n         9.59930556,  7.91347222,  0.        , -0.71064815,  0.        ,\n         1.02314815,  1.84138889,  0.        ,  0.75      ,  6.        ,\n         1.        ,  2.        ,  0.        ,  0.        ,  0.        ,\n         0.        ,  0.        ,  0.        ,  1.        ,  1.        ,\n         2.        ,  2.        ,  0.        ,  0.        ,  0.        ,\n         0.        ,  0.8711    , 22.5438    ,  1.        ,  0.        ,\n         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n         0.        ,  1.        ,  1.        ,  1.        ,  0.        ,\n         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n         0.        ,  0.        ,  0.        ,  0.        ]),\n array([ 3.78472222e+00,  1.75000000e+00,  3.78472222e+00,  1.75000000e+00,\n         4.43215670e-01,  8.21060000e+01,  7.60580000e+01,  8.20530982e+01,\n         3.20000000e+01,  0.00000000e+00,  9.42793306e-02, -3.40567857e-01,\n         3.40567857e-01,  9.42793306e-02,  1.66666667e+00,  2.50000000e+00,\n         2.66666667e+00,  1.49815612e+01,  1.09207787e+01,  1.68830066e+00,\n        -1.76274754e+00,  1.72955831e+00, -1.75753865e+00,  4.69817676e+00,\n         9.13254199e-01,  3.04964832e+00,  1.09108506e+02,  4.40577739e+00,\n         3.62647800e+00,  3.62647800e+00,  2.89384685e+00,  1.81334249e+00,\n         1.81334249e+00,  1.22815263e+00,  1.22815263e+00,  6.36673846e-01,\n         6.36673846e-01,  3.25783423e-01,  3.25783423e-01, -7.90000000e-01,\n         3.35488750e+01,  3.40193858e+00,  1.12488716e+00,  4.06542899e-01,\n         3.64351251e+01,  4.56709965e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         4.98397852e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.94413591e+01,  6.32732007e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  9.55107817e+00,  7.04767198e+00,\n         0.00000000e+00,  0.00000000e+00,  1.87210072e+01,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  9.55107817e+00,  7.04767198e+00,  0.00000000e+00,\n         0.00000000e+00,  1.87210072e+01,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.78200000e+01,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.25241636e+01,  1.78116152e+01,  4.98397852e+00,\n         0.00000000e+00,  1.88888889e+00,  0.00000000e+00,  3.78472222e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         5.38888889e+00,  0.00000000e+00,  1.93750000e+00,  2.50000000e-01,\n         6.00000000e+00,  0.00000000e+00,  2.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  1.00000000e+00,\n         1.00000000e+00,  2.00000000e+00,  0.00000000e+00,  2.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         1.00000000e+00,  4.20100000e-01,  2.32080000e+01,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         2.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  2.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  1.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00])]</pre> In\u00a0[12]: Copied! <pre>## To make this interesting let combine some descriptors that could give nan results that we might want to remove\n</pre> ## To make this interesting let combine some descriptors that could give nan results that we might want to remove In\u00a0[13]: Copied! <pre>from molfeat.trans.concat import FeatConcat\nfrom molfeat.trans.fp import FPVecTransformer, FPVecFilteredTransformer\nfrom molfeat.trans.base import BaseFeaturizer\n\ndesc = FPVecTransformer(\"desc3D\", callbacks=cb)\necfp = FPVecTransformer(\"ecfp:4\")\nmord = FPVecFilteredTransformer(\"mordred\", del_invariant=True, ignore_3D=True)\n</pre> from molfeat.trans.concat import FeatConcat from molfeat.trans.fp import FPVecTransformer, FPVecFilteredTransformer from molfeat.trans.base import BaseFeaturizer  desc = FPVecTransformer(\"desc3D\", callbacks=cb) ecfp = FPVecTransformer(\"ecfp:4\") mord = FPVecFilteredTransformer(\"mordred\", del_invariant=True, ignore_3D=True) In\u00a0[14]: Copied! <pre># use a dataframe as the datatype\ncat_fp = FeatConcat([desc, ecfp], dtype=\"pandas\")\ncat_fp.append(mord)\n</pre> # use a dataframe as the datatype cat_fp = FeatConcat([desc, ecfp], dtype=\"pandas\") cat_fp.append(mord) In\u00a0[15]: Copied! <pre># print initial columns\nlen(cat_fp.columns)\n</pre> # print initial columns len(cat_fp.columns) Out[15]: <pre>4252</pre> In\u00a0[16]: Copied! <pre>cat_fp.fit(data[\"smiles\"])\n</pre> cat_fp.fit(data[\"smiles\"]) Out[16]: <pre>[FPVecTransformer(kind=\"desc3D\", length=2000, dtype=np.float32),\n FPVecTransformer(kind=\"ecfp:4\", length=2000, dtype=np.float32),\n FPVecFilteredTransformer (kind=\"mordred\", length=2000, occ_threshold=0, del_invariant=True, dtype=np.float32)]</pre> In\u00a0[17]: Copied! <pre># print columns after fitting\nlen(cat_fp.columns)\n</pre> # print columns after fitting len(cat_fp.columns) Out[17]: <pre>3404</pre> In\u00a0[18]: Copied! <pre>df, idx = cat_fp(data[\"smiles\"], ignore_errors=True, enforce_dtype=True)\n</pre> df, idx = cat_fp(data[\"smiles\"], ignore_errors=True, enforce_dtype=True) In\u00a0[19]: Copied! <pre>df\n</pre> df Out[19]: CalcAsphericity CalcEccentricity CalcInertialShapeFactor CalcNPR1 CalcNPR2 CalcPMI1 CalcPMI2 CalcPMI3 CalcRadiusOfGyration CalcSpherocityIndex ... SRW09 SRW10 TSRW10 MW AMW WPath WPol Zagreb1 Zagreb2 mZagreb2 0 0.811071 0.997717 0.086153 0.067538 0.932462 10.823307 149.432492 160.255798 1.390225 3.734071e-18 ... 0.0 4.174387 17.310771 83.953355 16.790671 4.0 0.0 6.0 4.0 1.000000 1 0.339734 0.947944 0.008826 0.318438 0.716364 81.165741 182.591842 254.887112 1.716004 5.546652e-02 ... 0.0 8.124151 33.544698 100.088815 5.267832 42.0 5.0 30.0 31.0 1.666667 2 0.644469 0.990454 0.007675 0.137845 0.945576 123.196831 845.096157 893.736562 2.615380 1.288769e-01 ... 0.0 8.906935 40.567492 150.104465 6.004179 162.0 13.0 50.0 55.0 2.611111 3 0.807545 0.997624 0.011258 0.068898 0.931123 82.709180 1117.766940 1200.450706 2.970339 3.110447e-05 ... 0.0 7.933438 36.894490 146.057909 7.302895 151.0 7.0 38.0 36.0 2.416667 4 0.760002 0.996152 0.012188 0.087638 0.933331 76.580622 815.569036 873.826546 2.758088 3.157529e-02 ... 0.0 7.609367 34.745525 130.099380 5.656495 114.0 6.0 32.0 30.0 2.333333 ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... 95 0.415542 0.965014 0.012094 0.262197 0.940776 77.785722 279.099207 296.669007 1.971456 2.764084e-01 ... 0.0 7.655864 32.211905 100.125201 4.353270 48.0 4.0 26.0 24.0 1.666667 96 0.499001 0.977626 0.002435 0.210349 0.814517 334.468670 1295.135895 1590.066114 2.909762 3.092651e-02 ... 0.0 9.496496 46.853672 201.078979 7.733807 362.0 21.0 74.0 85.0 3.472222 97 0.824747 0.998055 0.032237 0.062334 0.958168 29.723052 456.888388 476.835478 2.365731 3.014104e-02 ... 0.0 6.900731 30.257210 101.120449 4.596384 56.0 4.0 22.0 20.0 2.000000 98 0.619703 0.988923 0.010568 0.148433 0.903536 85.497555 520.438738 576.001906 2.296174 8.252447e-02 ... 0.0 8.379998 36.722228 122.073165 6.424903 94.0 8.0 38.0 40.0 2.250000 99 0.836296 0.998321 0.136345 0.057922 0.942348 6.911506 112.445303 119.324543 1.459562 4.551005e-04 ... 0.0 5.509388 22.328143 62.036779 6.203678 10.0 1.0 10.0 8.0 1.250000 <p>100 rows \u00d7 3404 columns</p> In\u00a0[20]: Copied! <pre>import torch\nfrom molfeat.trans.graph.adj import AdjGraphTransformer\n</pre> import torch from molfeat.trans.graph.adj import AdjGraphTransformer In\u00a0[25]: Copied! <pre>trans = AdjGraphTransformer(explicit_hydrogens=False, self_loop=True, dtype=torch.float)\ngraphs, ids = trans(data[\"smiles\"], ignore_errors=True)\n</pre> trans = AdjGraphTransformer(explicit_hydrogens=False, self_loop=True, dtype=torch.float) graphs, ids = trans(data[\"smiles\"], ignore_errors=True) In\u00a0[67]: Copied! <pre>graphs[0]\n</pre> graphs[0] Out[67]: <pre>(tensor([[1., 1., 1.],\n         [1., 1., 0.],\n         [1., 0., 1.]]),\n tensor([[1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n          0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,\n          0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n          0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n          0., 0., 0., 0., 0., 0., 0., 1., 0., 0.],\n         [1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n          0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n          0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n          0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n          0., 0., 0., 0., 0., 1., 0., 0., 0., 0.],\n         [1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n          0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n          0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n          0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n          0., 0., 0., 0., 0., 1., 0., 0., 0., 0.]]))</pre> In\u00a0[68]: Copied! <pre>from torch.utils.data import DataLoader\n</pre> from torch.utils.data import DataLoader <p>Batching using padding to a maximum values. When the maximum size is not provided, it's determined by the batch largest molecule</p> In\u00a0[72]: Copied! <pre>trans.get_collate_fn()([graphs[i] for i in range(5)])\n</pre> trans.get_collate_fn()([graphs[i] for i in range(5)]) <pre>\n---------------------------------------------------------------------------\nValueError                                Traceback (most recent call last)\n&lt;ipython-input-72-30025f60a5fe&gt; in &lt;module&gt;\n----&gt; 1 trans.get_collate_fn()([graphs[i] for i in range(5)])\n\n~/Code/molfeat/molfeat/trans/graph/adj.py in _collate_batch(batch, max_n_atoms, pack)\n    254         \"\"\"\n    255         if isinstance(batch[0], (list, tuple)):\n--&gt; 256             graphs, feats, labels = map(list, zip(*batch))\n    257             batched_graph = AdjGraphTransformer._collate_graphs(\n    258                 zip(graphs, feats), max_n_atoms=max_n_atoms, pack=pack\n\nValueError: not enough values to unpack (expected 3, got 2)</pre> In\u00a0[80]: Copied! <pre>loader = DataLoader(graphs, batch_size=32, collate_fn=trans.get_collate_fn())\nfor i, batch in enumerate(loader):\n    g_batch, f_batch = batch\n    if i &gt; 1:\n        break\n    print(i, g_batch.shape, f_batch.shape)\n</pre> loader = DataLoader(graphs, batch_size=32, collate_fn=trans.get_collate_fn()) for i, batch in enumerate(loader):     g_batch, f_batch = batch     if i &gt; 1:         break     print(i, g_batch.shape, f_batch.shape) <pre>0 torch.Size([32, 19, 19]) torch.Size([32, 19, 82])\n1 torch.Size([32, 24, 24]) torch.Size([32, 24, 82])\n</pre> <p>If instead we choose to pack the graphs, we get a single giant super graph</p> In\u00a0[81]: Copied! <pre>loader = DataLoader(graphs, batch_size=64, collate_fn=trans.get_collate_fn(pack=True))\nfor i, batch in enumerate(loader):\n    g_batch, f_batch = batch\n    if i &gt; 1:\n        break\n    print(i, g_batch.shape, f_batch.shape)\n</pre> loader = DataLoader(graphs, batch_size=64, collate_fn=trans.get_collate_fn(pack=True)) for i, batch in enumerate(loader):     g_batch, f_batch = batch     if i &gt; 1:         break     print(i, g_batch.shape, f_batch.shape) <pre>0 torch.Size([582, 582]) torch.Size([582, 82])\n1 torch.Size([310, 310]) torch.Size([310, 82])\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"tutorials/advanced.html#Advanced-features","title":"Advanced features\u00b6","text":"<p>Here we will discuss some of the more advanced features offered in the <code>molfeat</code> package. In the following <code>transformer</code> refers to a subclass of <code>MoleculeTransformer</code>.</p>"},{"location":"tutorials/advanced.html#Processing","title":"Processing\u00b6","text":"<p>All molecule transformers in <code>molfeat</code> support <code>pre-processing</code> and <code>post-processing</code> of a list of molecule. This allows for example to implement new transformers without needing to change a large part of the code. We demonstrate this with a toy transformer model that compute the <code>rdkit3D</code> descriptors, which will require conformers in input, but also applies a power transformer to make the data more gaussian like.</p>"},{"location":"tutorials/advanced.html#Callbacks","title":"Callbacks\u00b6","text":"<p>As you may have noted the above process is tedious and require defining a novel class. Moreover, if the same molecule is passed, the conformer are regenerated again.</p> <p>To address this, transformers in <code>molfeat</code> supports a callback option that is used to defined behaviour of <code>preprocess</code>, <code>postprocess</code> and even <code>get_collate_fn</code>.</p> <p>The base callback class is available at <code>molfeat.utils.callbacks.FeatCallback</code>. You can also chain a list of callbacks through <code>molfeat.utils.callbacks.FeatCallbackList</code>.</p> <p>The default behaviour of this callbacks are to do nothing. However for convenience a <code>ConformerCallback</code> is also provided. This latter callback is effiently implemented allowing to cache conformer computation of previously seen molecules on disk.</p>"},{"location":"tutorials/advanced.html#Caching-feature-computation","title":"Caching feature computation\u00b6","text":"<p>It's possible to cache feature calculation natively in order to speed up featurization on the same dataset. <code>molfeat</code> provides a wrapper class for that purpose.</p> <p>The internal cache can either be an instance of DataCache or a dict mapping each molecules to its features.</p> <p>Note that it's possible to first compute the information in the cache then used the pre-filled cached to instanciate a new transformer</p>"},{"location":"tutorials/advanced.html#Transformer-concatenation","title":"Transformer concatenation\u00b6","text":"<p>Another interesting features offered in  <code>molfeat</code> is the ability to concatenate multiple featurizers together. Feature concatenation has some limitations, the most major being the inability to set the parameters of all transformers in a single call. Thus it is not compatible with the scikit learn grid search cv  API and you will need to handle the update of the parameters of the concatenated featurizer yourself.</p>"},{"location":"tutorials/advanced.html#Collate-function","title":"Collate function\u00b6","text":"<p>Most molecule transformer also provides their own collate function for pytorch dataloader.</p> <p>In this example, we will use the default collate function of an adjacency graph transformer and show how the features are collated based on the provided arguments</p>"},{"location":"tutorials/calculator.html","title":"Exploring Calculator","text":"In\u00a0[1]: Copied! <pre>%load_ext autoreload\n%autoreload 2\n</pre> %load_ext autoreload %autoreload 2 In\u00a0[2]: Copied! <pre>import datamol as dm\nimport random\nimport numpy as np\nfrom loguru import logger\n\n# set printing option\nnp.set_printoptions(threshold=10)\n\n# set random list\nnp.random.seed(10)\nrandom.seed(10)\n\n\ndef check_value_error(fn, mol):\n    value_error = False\n    try:\n        fn(mol)\n    except ValueError as e:\n        logger.error(e)\n        value_error = True\n    finally:\n        if not value_error:\n            raise AssertionError(\"Error not raised\")\n    return value_error\n\n\n#### 2D Pharmacophores\n\ndata = dm.data.freesolv().sample(500).smiles.values\nmol2d = data[83]\nmol3d = dm.conformers.generate(dm.to_mol(mol2d))\n</pre> import datamol as dm import random import numpy as np from loguru import logger  # set printing option np.set_printoptions(threshold=10)  # set random list np.random.seed(10) random.seed(10)   def check_value_error(fn, mol):     value_error = False     try:         fn(mol)     except ValueError as e:         logger.error(e)         value_error = True     finally:         if not value_error:             raise AssertionError(\"Error not raised\")     return value_error   #### 2D Pharmacophores  data = dm.data.freesolv().sample(500).smiles.values mol2d = data[83] mol3d = dm.conformers.generate(dm.to_mol(mol2d)) In\u00a0[3]: Copied! <pre>from molfeat.calc import get_calculator\nfrom molfeat.calc import CATS2D\nfrom molfeat.calc import CATS3D\nfrom molfeat.calc import RDKitDescriptors2D\nfrom molfeat.calc import RDKitDescriptors3D\nfrom molfeat.calc import MordredDescriptors\nfrom molfeat.calc import FPCalculator\nfrom molfeat.calc import Pharmacophore\nfrom molfeat.calc import PMapper3D\nfrom molfeat.calc import ScaffoldKeyCalculator\n</pre> from molfeat.calc import get_calculator from molfeat.calc import CATS2D from molfeat.calc import CATS3D from molfeat.calc import RDKitDescriptors2D from molfeat.calc import RDKitDescriptors3D from molfeat.calc import MordredDescriptors from molfeat.calc import FPCalculator from molfeat.calc import Pharmacophore from molfeat.calc import PMapper3D from molfeat.calc import ScaffoldKeyCalculator <pre>Using backend: pytorch\n</pre> In\u00a0[4]: Copied! <pre>cats_calc = CATS2D(scale=\"num\", max_dist=5, bins=[0, 3, 5, 7])\n</pre> cats_calc = CATS2D(scale=\"num\", max_dist=5, bins=[0, 3, 5, 7]) In\u00a0[5]: Copied! <pre>print(len(cats_calc))\ncats_calc(mol2d)\n</pre> print(len(cats_calc)) cats_calc(mol2d) <pre>63\n</pre> Out[5]: <pre>array([0., 0., 0., ..., 0., 0., 0.])</pre> In\u00a0[6]: Copied! <pre>cats3d_calc = CATS3D(scale=\"num\", max_dist=5, bins=[0, 3, 5, 7])\n</pre> cats3d_calc = CATS3D(scale=\"num\", max_dist=5, bins=[0, 3, 5, 7]) In\u00a0[7]: Copied! <pre># we expect and error on molecules without conformer\ncheck_value_error(cats3d_calc, mol2d)\n</pre> # we expect and error on molecules without conformer check_value_error(cats3d_calc, mol2d) <pre>2021-07-16 17:54:05.911 | ERROR    | __main__:check_value_error:18 - Expected a molecule with conformers information.\n</pre> Out[7]: <pre>True</pre> In\u00a0[8]: Copied! <pre># should work if we compute the conformer\ncats3d_calc(mol3d)\n</pre> # should work if we compute the conformer cats3d_calc(mol3d) Out[8]: <pre>array([0., 0., 0., ..., 0., 0., 0.])</pre> In\u00a0[9]: Copied! <pre>rdkit_desc = RDKitDescriptors2D(replace_nan=False, augment=True)\nrdkit_desc(mol2d)\n</pre> rdkit_desc = RDKitDescriptors2D(replace_nan=False, augment=True) rdkit_desc(mol2d) Out[9]: <pre>array([ 6.82415895, -1.37469136,  6.82415895, ...,  0.        ,\n        0.        ,  3.        ])</pre> In\u00a0[10]: Copied! <pre>rdkit3d_desc = RDKitDescriptors3D(replace_nan=False)\n# check that we get different vector for different conformers\nconf1_out = rdkit3d_desc(mol3d, conformer_id=2)\nconf_out = rdkit3d_desc(mol3d, conformer_id=-1)\nassert np.any(conf1_out != conf_out)\n</pre> rdkit3d_desc = RDKitDescriptors3D(replace_nan=False) # check that we get different vector for different conformers conf1_out = rdkit3d_desc(mol3d, conformer_id=2) conf_out = rdkit3d_desc(mol3d, conformer_id=-1) assert np.any(conf1_out != conf_out) In\u00a0[11]: Copied! <pre># show the name of the descriptors\n# Most calculators have the columns attributes\nprint(rdkit3d_desc.columns[:10])\n</pre> # show the name of the descriptors # Most calculators have the columns attributes print(rdkit3d_desc.columns[:10]) <pre>['CalcAsphericity', 'CalcEccentricity', 'CalcInertialShapeFactor', 'CalcNPR1', 'CalcNPR2', 'CalcPMI1', 'CalcPMI2', 'CalcPMI3', 'CalcRadiusOfGyration', 'CalcSpherocityIndex']\n</pre> In\u00a0[12]: Copied! <pre>mrd_desc = MordredDescriptors(ignore_3D=True, replace_nan=True)\nmrd3d_desc = MordredDescriptors(ignore_3D=False, replace_nan=False)\nprint(\"2D only\", len(mrd_desc), \"2D+3D\", len(mrd3d_desc))\n</pre> mrd_desc = MordredDescriptors(ignore_3D=True, replace_nan=True) mrd3d_desc = MordredDescriptors(ignore_3D=False, replace_nan=False) print(\"2D only\", len(mrd_desc), \"2D+3D\", len(mrd3d_desc)) <pre>2D only 1613 2D+3D 1826\n</pre> In\u00a0[13]: Copied! <pre># 2D descriptors should not differentiate between presence of conformers\nnp.all(mrd_desc(mol2d) == mrd_desc(mol3d))\n</pre> # 2D descriptors should not differentiate between presence of conformers np.all(mrd_desc(mol2d) == mrd_desc(mol3d)) Out[13]: <pre>True</pre> In\u00a0[14]: Copied! <pre># we expect to have more nan values on the mol2d with 3D descriptors\nassert np.isnan(mrd3d_desc(mol2d)).sum() &gt;= np.isnan(mrd3d_desc(mol3d)).sum()\n</pre> # we expect to have more nan values on the mol2d with 3D descriptors assert np.isnan(mrd3d_desc(mol2d)).sum() &gt;= np.isnan(mrd3d_desc(mol3d)).sum() In\u00a0[15]: Copied! <pre>maccs_calc = FPCalculator(\"maccs\")\nmaccs_calc(mol2d)\n</pre> maccs_calc = FPCalculator(\"maccs\") maccs_calc(mol2d) Out[15]: <pre>array([0, 0, 0, ..., 1, 1, 0], dtype=uint8)</pre> In\u00a0[16]: Copied! <pre>secfp_cal = FPCalculator(\"secfp\", length=1024)\n# check that we have activated bits\nnp.sum(secfp_cal(mol2d))\n</pre> secfp_cal = FPCalculator(\"secfp\", length=1024) # check that we have activated bits np.sum(secfp_cal(mol2d)) Out[16]: <pre>33</pre> In\u00a0[17]: Copied! <pre># check the fingerprinter length\nprint(len(secfp_cal))\n</pre> # check the fingerprinter length print(len(secfp_cal)) <pre>1024\n</pre> In\u00a0[18]: Copied! <pre># count vector are folded to the desired length\nmorgan_count_calc = FPCalculator(\n    \"ecfp-count\", length=256, radius=3, useChirality=True, includeRedundantEnvironments=True\n)\nval = morgan_count_calc(mol2d)\nval\n</pre> # count vector are folded to the desired length morgan_count_calc = FPCalculator(     \"ecfp-count\", length=256, radius=3, useChirality=True, includeRedundantEnvironments=True ) val = morgan_count_calc(mol2d) val Out[18]: <pre>array([0, 0, 0, ..., 1, 0, 0])</pre> In\u00a0[19]: Copied! <pre># checking that changing the parameters does change the fingerprint\nmorgan_count_calc2 = FPCalculator(\"ecfp-count\", length=256, radius=2)\nnp.any(morgan_count_calc2(mol2d) != val)\n</pre> # checking that changing the parameters does change the fingerprint morgan_count_calc2 = FPCalculator(\"ecfp-count\", length=256, radius=2) np.any(morgan_count_calc2(mol2d) != val) Out[19]: <pre>True</pre> In\u00a0[20]: Copied! <pre># checking that we can return the original vector type\nrdkit_calc = FPCalculator(\"rdkit-count\", length=512)\nnp.asarray(list(rdkit_calc(mol2d, raw=False))).max()\n</pre> # checking that we can return the original vector type rdkit_calc = FPCalculator(\"rdkit-count\", length=512) np.asarray(list(rdkit_calc(mol2d, raw=False))).max() Out[20]: <pre>138</pre> In\u00a0[21]: Copied! <pre>pharm_calc = Pharmacophore(factory=\"pmapper\")\nprint(len(pharm_calc))\n</pre> pharm_calc = Pharmacophore(factory=\"pmapper\") print(len(pharm_calc)) <pre>19355\n</pre> In\u00a0[22]: Copied! <pre># check case where we provide a max length\npharm_calc_1024 = Pharmacophore(factory=\"pmapper\", max_length=1024, useCounts=True)\nprint(len(pharm_calc_1024))\n</pre> # check case where we provide a max length pharm_calc_1024 = Pharmacophore(factory=\"pmapper\", max_length=1024, useCounts=True) print(len(pharm_calc_1024)) <pre>1024\n</pre> In\u00a0[23]: Copied! <pre># check the folding into 1024 bits and count info used\narr = pharm_calc_1024(mol2d)\nprint(arr.nonzero())\n</pre> # check the folding into 1024 bits and count info used arr = pharm_calc_1024(mol2d) print(arr.nonzero()) <pre>(array([  14,   15,   16, ...,  995, 1016, 1018]),)\n</pre> In\u00a0[24]: Copied! <pre>arr = pharm_calc(mol2d)\nprint(arr.nonzero())\n</pre> arr = pharm_calc(mol2d) print(arr.nonzero()) <pre>(array([   14,    15,    16, ..., 12600, 12601, 12608]),)\n</pre> In\u00a0[25]: Copied! <pre>pmap_calc = PMapper3D(min_features=2, max_features=3, length=512, tol=5, use_modulo=False)\n</pre> pmap_calc = PMapper3D(min_features=2, max_features=3, length=512, tol=5, use_modulo=False) In\u00a0[26]: Copied! <pre># Expect error here\ncheck_value_error(pmap_calc, mol2d)\n</pre> # Expect error here check_value_error(pmap_calc, mol2d) <pre>2021-07-16 17:54:08.550 | ERROR    | __main__:check_value_error:18 - Expected a molecule with conformers information.\n</pre> Out[26]: <pre>True</pre> In\u00a0[27]: Copied! <pre>val = pmap_calc(mol3d, conformer_id=0)\nprint(val.nonzero())\n</pre> val = pmap_calc(mol3d, conformer_id=0) print(val.nonzero()) <pre>(array([ 16,  24,  32, ..., 482, 483, 492]),)\n</pre> In\u00a0[28]: Copied! <pre>## check that the new fingerprint is the same as the original pmapper get_fp\nfrom pmapper.pharmacophore import Pharmacophore as P\n\np = P()\np.load_from_mol(mol3d)\n# generate 3D pharmacophore fingerprint which takes into account stereoconfiguration\nb = p.get_fp(min_features=2, max_features=3, tol=5, nbits=512)  # set of activated bits\nassert set(val.nonzero()[0]) == b\n</pre> ## check that the new fingerprint is the same as the original pmapper get_fp from pmapper.pharmacophore import Pharmacophore as P  p = P() p.load_from_mol(mol3d) # generate 3D pharmacophore fingerprint which takes into account stereoconfiguration b = p.get_fp(min_features=2, max_features=3, tol=5, nbits=512)  # set of activated bits assert set(val.nonzero()[0]) == b In\u00a0[29]: Copied! <pre>skey = ScaffoldKeyCalculator()\nskey(mol2d)\n</pre> skey = ScaffoldKeyCalculator() skey(mol2d) Out[29]: <pre>array([13,  0, 23, ...,  0,  0,  0])</pre> In\u00a0[30]: Copied! <pre>calc = get_calculator(\"pmapper\", min_features=1)\ncalc(mol3d)\n</pre> calc = get_calculator(\"pmapper\", min_features=1) calc(mol3d) Out[30]: <pre>array([0., 0., 0., ..., 0., 0., 0.])</pre>"},{"location":"tutorials/calculator.html#Setup","title":"Setup\u00b6","text":""},{"location":"tutorials/calculator.html#Dealing-the-calc-module-of-molfeat","title":"Dealing the calc module of <code>molfeat</code>\u00b6","text":""},{"location":"tutorials/calculator.html#CATS-Descriptors","title":"CATS Descriptors\u00b6","text":""},{"location":"tutorials/calculator.html#RDKit-molecule-descriptors","title":"RDKit molecule descriptors\u00b6","text":""},{"location":"tutorials/calculator.html#Mordred-descriptors","title":"Mordred descriptors\u00b6","text":"<p>Mordred descriptors can results in nan values. The default behaviour is to keep the nan values as is. If you do no plan to perform imputation, specify <code>replace_nan=True</code>.</p>"},{"location":"tutorials/calculator.html#Fingerprints","title":"Fingerprints\u00b6","text":""},{"location":"tutorials/calculator.html#2D-Pharmacophores","title":"2D Pharmacophores\u00b6","text":""},{"location":"tutorials/calculator.html#3D-Pharmacophores-aka-PMapper3D","title":"3D Pharmacophores aka PMapper3D\u00b6","text":""},{"location":"tutorials/calculator.html#Scaffold-keys","title":"Scaffold keys\u00b6","text":""},{"location":"tutorials/calculator.html#Test-get_calculator","title":"Test <code>get_calculator</code>\u00b6","text":""},{"location":"tutorials/datacache.html","title":"Using Datacache","text":"In\u00a0[1]: Copied! <pre>%load_ext autoreload\n%autoreload 2\n</pre> %load_ext autoreload %autoreload 2 In\u00a0[2]: Copied! <pre>import transformers\ntransformers.__version__\n</pre> import transformers transformers.__version__ Out[2]: <pre>'4.27.1'</pre> In\u00a0[3]: Copied! <pre>import datamol as dm\n\nimport numpy as np\nimport torch\n\nfrom molfeat.trans.base import PrecomputedMolTransformer\nfrom molfeat.utils.cache import DataCache, FileCache\nfrom molfeat.trans.pretrained import FCDTransformer\n</pre> import datamol as dm  import numpy as np import torch  from molfeat.trans.base import PrecomputedMolTransformer from molfeat.utils.cache import DataCache, FileCache from molfeat.trans.pretrained import FCDTransformer In\u00a0[4]: Copied! <pre>data = dm.data.freesolv().sample(500)\nsmiles_col = \"smiles\"\nmolecules = data[\"smiles\"].values\ntargets = data[\"expt\"].values\n</pre> data = dm.data.freesolv().sample(500) smiles_col = \"smiles\" molecules = data[\"smiles\"].values targets = data[\"expt\"].values In\u00a0[22]: Copied! <pre># Defile cache and transformer. It can be any types of featurizer\n\ncache = FileCache(\n    name=\"fcd_cache_test\",\n    cache_file=f\"fcd_cache.parquet\",\n    file_type=\"parquet\",\n    mol_hasher=\"dm.unique_id\",\n)\n\n\ntransformer = FCDTransformer()\n</pre> # Defile cache and transformer. It can be any types of featurizer  cache = FileCache(     name=\"fcd_cache_test\",     cache_file=f\"fcd_cache.parquet\",     file_type=\"parquet\",     mol_hasher=\"dm.unique_id\", )   transformer = FCDTransformer() In\u00a0[23]: Copied! <pre># # pregenerate the features and store in cache files\n_ = cache(molecules, transformer)\ncache.save_to_file(filepath=cache.name)\n</pre> # # pregenerate the features and store in cache files _ = cache(molecules, transformer) cache.save_to_file(filepath=cache.name) <p>You can check whether a cache contains a molecule or not</p> In\u00a0[24]: Copied! <pre># benzene\nbenzene = dm.to_mol('c1ccccc1')\nbenzene in cache\n</pre> # benzene benzene = dm.to_mol('c1ccccc1') benzene in cache Out[24]: <pre>True</pre> In\u00a0[25]: Copied! <pre># paracetamol\nparacetamol = dm.to_mol('CC(=O)Nc1ccc(cc1)O')\nparacetamol in cache\n</pre> # paracetamol paracetamol = dm.to_mol('CC(=O)Nc1ccc(cc1)O') paracetamol in cache Out[25]: <pre>False</pre> <p>You can fetch the information of a molecule from the cache</p> In\u00a0[26]: Copied! <pre>fps = cache.get(benzene)\nfps.shape\n</pre> fps = cache.get(benzene) fps.shape Out[26]: <pre>(512,)</pre> <p>Obviously you can serialize a cache by converting it to a state dict</p> In\u00a0[27]: Copied! <pre>cache.to_state_dict()\n</pre> cache.to_state_dict() Out[27]: <pre>{'_cache_name': 'FileCache',\n 'cache_file': 'fcd_cache.parquet',\n 'name': 'fcd_cache_test',\n 'n_jobs': None,\n 'verbose': False,\n 'file_type': 'parquet',\n 'clear_on_exit': True,\n 'parquet_kwargs': {},\n 'mol_hasher': {'hash_name': 'dm.unique_id'}}</pre> <p>You can load a new cache from the serialized state dict or another cache. Or even load a cache from the cache file directly.</p> In\u00a0[29]: Copied! <pre>reload_cache = FileCache.load_from_file(\"fcd_cache.parquet\",\n    file_type=\"parquet\",\n    mol_hasher=\"dm.unique_id\",\n)\nlen(reload_cache)\n</pre> reload_cache = FileCache.load_from_file(\"fcd_cache.parquet\",     file_type=\"parquet\",     mol_hasher=\"dm.unique_id\", ) len(reload_cache)  Out[29]: <pre>500</pre> In\u00a0[30]: Copied! <pre>reload_state_dict_cache = FileCache.from_state_dict(cache.to_state_dict())\nlen(reload_state_dict_cache)\n</pre> reload_state_dict_cache = FileCache.from_state_dict(cache.to_state_dict()) len(reload_state_dict_cache)  Out[30]: <pre>500</pre> <p>You can copy the content of a cache file into another cache file. Regardless of the type of cache.</p> In\u00a0[31]: Copied! <pre># load pregenerated features from files\nmemorycache = DataCache(\n    name=\"fcd_cache_memory\",\n    n_jobs=-1,\n    mol_hasher=dm.unique_id,\n    delete_on_exit=True # we delete anything related to the cache at py exit\n)\nmemorycache.update(cache)\nlen(memorycache)\n</pre> # load pregenerated features from files memorycache = DataCache(     name=\"fcd_cache_memory\",     n_jobs=-1,     mol_hasher=dm.unique_id,     delete_on_exit=True # we delete anything related to the cache at py exit ) memorycache.update(cache) len(memorycache) Out[31]: <pre>500</pre> In\u00a0[37]: Copied! <pre>%%timeit -n 1 -r 3\ntrans = PrecomputedMolTransformer(cache=cache, featurizer=FCDTransformer())\ntrans(molecules)\n</pre> %%timeit -n 1 -r 3 trans = PrecomputedMolTransformer(cache=cache, featurizer=FCDTransformer()) trans(molecules) <pre>895 ms \u00b1 148 ms per loop (mean \u00b1 std. dev. of 3 runs, 1 loop each)\n</pre> In\u00a0[38]: Copied! <pre>%%timeit -n 1 -r 3\ntrans = FCDTransformer()\ntrans(molecules)\n</pre> %%timeit -n 1 -r 3 trans = FCDTransformer() trans(molecules) <pre>14.4 s \u00b1 1.9 s per loop (mean \u00b1 std. dev. of 3 runs, 1 loop each)\n</pre> <p>By computing the features once on you dataset, you can gain astonishing speed on featurization later.</p> <p>Even better, the <code>PrecomputedMolTransformer</code> class provide a <code>batch_transform</code> function that can leverage parallel computing with shared memory for further performance gain. The <code>batch_transform</code> method allows you to both compute features and cache them in a parallel setting, the most efficient way. This could be relevant for featurizer that accepts batch of molecules, since the normal caching system compute the feature one molecule at a time.</p> In\u00a0[46]: Copied! <pre>from copy import deepcopy\ncache_empty = deepcopy(cache)\n# clear the empty cache\ncache_empty.clear()\nlen(cache_empty)\n</pre> from copy import deepcopy cache_empty = deepcopy(cache) # clear the empty cache cache_empty.clear() len(cache_empty) Out[46]: <pre>0</pre> In\u00a0[47]: Copied! <pre>%%timeit -n 1 -r 1\ntrans = PrecomputedMolTransformer(cache=cache_empty, featurizer=FCDTransformer())\ntrans.batch_transform(trans, molecules, n_jobs=-1, batch_size=50)\n</pre> %%timeit -n 1 -r 1 trans = PrecomputedMolTransformer(cache=cache_empty, featurizer=FCDTransformer()) trans.batch_transform(trans, molecules, n_jobs=-1, batch_size=50) <pre>Batch compute::   0%|          | 0/10 [00:00&lt;?, ?it/s]</pre> <pre>17.3 s \u00b1 0 ns per loop (mean \u00b1 std. dev. of 1 run, 1 loop each)\n</pre> In\u00a0[48]: Copied! <pre># now we have all 500 molecules cached \nlen(cache_empty)\n</pre> # now we have all 500 molecules cached  len(cache_empty) Out[48]: <pre>500</pre>"},{"location":"tutorials/datacache.html#Caching-features","title":"Caching features\u00b6","text":"<p>Molfeat offers a caching system to accelerate molecular featurization during model building. There are two main type of caching system offered in molfeat.</p>"},{"location":"tutorials/datacache.html#DataCache","title":"DataCache\u00b6","text":"<p><code>DataCache</code> is the default, mostly in memory caching system of <code>molfeat</code>. The underlying cache system of <code>DataCache</code> is simply a dictionary. To improve efficiency, <code>DataCache</code> also supports shelf for object persistence.  See the relevant documentation to learn more about <code>DataCache</code></p>"},{"location":"tutorials/datacache.html#FileCache","title":"FileCache\u00b6","text":"<p><code>FileCache</code> takes a file-based serialization approach to setup the underlying caching system. <code>FileCache</code> supports <code>pickle</code>, <code>parquet</code> and <code>csv</code> formats. We recommend the <code>parquet</code> file format for its effiency and lightweightness.</p> <p>For both <code>FileCache</code> and <code>DataCache</code>, the key used to save and retrieve a molecule representation is <code>datamol.unique_id</code>. You can alternatively use inchikey, which is less robust (e.g does not differentiate tautomers) or event setup you own molecular hashing function that you can pass as input to the cache object.</p>"},{"location":"tutorials/datacache.html#Cache-properties","title":"Cache properties\u00b6","text":""},{"location":"tutorials/datacache.html#Using-a-cache-with-a-precomputed-transformer","title":"Using a cache with a precomputed transformer\u00b6","text":"<p>Some molecule transformers natively supports a <code>precompute_cache</code> attribute that can be used to cache featurization or load cache state into a new featurizer.</p> <p>Molfeat also provide a <code>PrecomputedMolTransformer</code> class that makes the process easier which allows you quickly build a new transformer from an existing cache. Similar to any <code>MoleculeTransformer</code>, you can serialize the state of a <code>PrecomputedMolTransformer</code> and reload it easily.</p>"},{"location":"tutorials/fpvector.html","title":"Common Featurizers","text":"In\u00a0[1]: Copied! <pre>%load_ext autoreload\n%autoreload 2\n</pre> %load_ext autoreload %autoreload 2 In\u00a0[2]: Copied! <pre>import datamol as dm\nimport random\nimport numpy as np\nfrom loguru import logger\n\n# set printing option\nnp.set_printoptions(threshold=10)\n\n# set random list\nnp.random.seed(10)\nrandom.seed(10)\n\ndata = dm.data.freesolv().sample(500)\n</pre> import datamol as dm import random import numpy as np from loguru import logger  # set printing option np.set_printoptions(threshold=10)  # set random list np.random.seed(10) random.seed(10)  data = dm.data.freesolv().sample(500) In\u00a0[3]: Copied! <pre>from molfeat.trans.fp import FPVecTransformer\nfrom molfeat.trans.fp import FPVecFilteredTransformer\n\ntrans1 = FPVecTransformer(kind=\"fcfp:6\", length=1024, useBondTypes=False)\ntrans1.featurizer.params\n</pre> from molfeat.trans.fp import FPVecTransformer from molfeat.trans.fp import FPVecFilteredTransformer  trans1 = FPVecTransformer(kind=\"fcfp:6\", length=1024, useBondTypes=False) trans1.featurizer.params <pre>Using backend: pytorch\n</pre> Out[3]: <pre>{'radius': 3,\n 'nBits': 1024,\n 'invariants': [],\n 'fromAtoms': [],\n 'useChirality': False,\n 'useBondTypes': False,\n 'useFeatures': True}</pre> <p>Similar to the parent MoleculeTransformer class, you can copy and serialize these featurizers</p> In\u00a0[4]: Copied! <pre>trans1.copy()\n</pre> trans1.copy() Out[4]: <pre>FPVecTransformer(kind=\"fcfp:6\", length=1024, dtype=np.float32)</pre> In\u00a0[5]: Copied! <pre>trans1.to_dict()\n</pre> trans1.to_dict() Out[5]: <pre>{'molfeat.trans.fp.FPVecTransformer': {'n_jobs': 1,\n  'dtype': numpy.float32,\n  'verbose': False,\n  'useBondTypes': False,\n  'kind': 'fcfp:6',\n  'length': 1024}}</pre> In\u00a0[6]: Copied! <pre>print(trans1.to_yaml())\n</pre> print(trans1.to_yaml()) <pre>molfeat.trans.fp.FPVecTransformer:\n  dtype: !!python/name:numpy.float32 ''\n  kind: fcfp:6\n  length: 1024\n  n_jobs: 1\n  useBondTypes: false\n  verbose: false\n\n</pre> In\u00a0[7]: Copied! <pre>X = trans1(data[\"smiles\"], enforce_dtype=True)[0]\nprint(X.shape, len(trans1.columns))\n</pre> X = trans1(data[\"smiles\"], enforce_dtype=True)[0] print(X.shape, len(trans1.columns)) <pre>(1024,) 1024\n</pre> <p>Let's check the effect of filtering out bits that are very rarely activate with <code>FPVecFilteredTransformer</code></p> In\u00a0[8]: Copied! <pre>trans2 = FPVecFilteredTransformer(\n    kind=\"fcfp:6\", length=1024, useBondTypes=False, del_invariant=False, occ_threshold=0\n)\n# the default behaviour should be the same as with the original FPVecTransformer\nX2 = trans2(data[\"smiles\"], enforce_dtype=True)[0]\nnp.all(X == X2)\n</pre> trans2 = FPVecFilteredTransformer(     kind=\"fcfp:6\", length=1024, useBondTypes=False, del_invariant=False, occ_threshold=0 ) # the default behaviour should be the same as with the original FPVecTransformer X2 = trans2(data[\"smiles\"], enforce_dtype=True)[0] np.all(X == X2) Out[8]: <pre>True</pre> In\u00a0[9]: Copied! <pre># here we want bits non activated at least 1% of the time or invariant columns to be removed.\ntrans2 = FPVecFilteredTransformer(\n    kind=\"fcfp:6\", length=1024, useBondTypes=False, del_invariant=True, occ_threshold=0.01\n)\n\n# Since we have not fitted the transformer yet\n# the behaviour would be the same as we do not have the fit parameter to located invariant in the training set\nX2 = trans2(data[\"smiles\"], enforce_dtype=True)[0]\nnp.all(X == X2)\n</pre> # here we want bits non activated at least 1% of the time or invariant columns to be removed. trans2 = FPVecFilteredTransformer(     kind=\"fcfp:6\", length=1024, useBondTypes=False, del_invariant=True, occ_threshold=0.01 )  # Since we have not fitted the transformer yet # the behaviour would be the same as we do not have the fit parameter to located invariant in the training set X2 = trans2(data[\"smiles\"], enforce_dtype=True)[0] np.all(X == X2) Out[9]: <pre>True</pre> In\u00a0[10]: Copied! <pre># Let's try to fit the fingerprint first instead\n# we will use a random sample from freesolve that is a bit larger and might not overlap with out test set\n\ntrain_data = dm.data.freesolv().sample(n=600)[\"smiles\"]\ntrans2.fit(train_data)\nX2 = trans2(data[\"smiles\"], enforce_dtype=True)[0]\nprint(X2.shape, len(trans2.columns))\n</pre> # Let's try to fit the fingerprint first instead # we will use a random sample from freesolve that is a bit larger and might not overlap with out test set  train_data = dm.data.freesolv().sample(n=600)[\"smiles\"] trans2.fit(train_data) X2 = trans2(data[\"smiles\"], enforce_dtype=True)[0] print(X2.shape, len(trans2.columns)) <pre>(219,) 219\n</pre> <p>Parallelize the transformation</p> In\u00a0[11]: Copied! <pre># Parallelization by setting n_jobs\ntrans3 = FPVecTransformer(kind=\"pharm2D\", length=2048, n_jobs=4)\nX3 = trans3(data[\"smiles\"], enforce_dtype=True)[0]\nprint(X3.shape, len(trans3.columns))\n</pre> # Parallelization by setting n_jobs trans3 = FPVecTransformer(kind=\"pharm2D\", length=2048, n_jobs=4) X3 = trans3(data[\"smiles\"], enforce_dtype=True)[0] print(X3.shape, len(trans3.columns)) <pre>(2048,) 2048\n</pre> In\u00a0[12]: Copied! <pre>from sklearn.ensemble import RandomForestRegressor\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.model_selection import GridSearchCV\n</pre> from sklearn.ensemble import RandomForestRegressor from sklearn.preprocessing import StandardScaler from sklearn.model_selection import train_test_split from sklearn.pipeline import Pipeline from sklearn.model_selection import GridSearchCV In\u00a0[13]: Copied! <pre>df = dm.data.freesolv()\nX, y = df[\"smiles\"], df[\"expt\"]\nX_train, X_test, y_train, y_test = train_test_split(X, y, random_state=0)\n</pre> df = dm.data.freesolv() X, y = df[\"smiles\"], df[\"expt\"] X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=0) In\u00a0[14]: Copied! <pre>feat = FPVecTransformer(kind=\"rdkit\")\npipe = Pipeline(\n    [(\"feat\", feat), (\"scaler\", StandardScaler()), (\"rf\", RandomForestRegressor(n_estimators=100))]\n)\n\nparam_grid = dict(\n    feat__kind=[\"fcfp:6\", \"rdkit\", \"pharm2D\"], feat__length=[512, 1024], rf__n_estimators=[100, 500]\n)\ngrid_search = GridSearchCV(pipe, param_grid=param_grid, n_jobs=-1)\n\ngrid_search.fit(X_train, y_train)\n</pre> feat = FPVecTransformer(kind=\"rdkit\") pipe = Pipeline(     [(\"feat\", feat), (\"scaler\", StandardScaler()), (\"rf\", RandomForestRegressor(n_estimators=100))] )  param_grid = dict(     feat__kind=[\"fcfp:6\", \"rdkit\", \"pharm2D\"], feat__length=[512, 1024], rf__n_estimators=[100, 500] ) grid_search = GridSearchCV(pipe, param_grid=param_grid, n_jobs=-1)  grid_search.fit(X_train, y_train) Out[14]: <pre>GridSearchCV(estimator=Pipeline(steps=[('feat', FPVecTransformer(kind='rdkit')),\n                                       ('scaler', StandardScaler()),\n                                       ('rf', RandomForestRegressor())]),\n             n_jobs=-1,\n             param_grid={'feat__kind': ['fcfp:6', 'rdkit', 'pharm2D'],\n                         'feat__length': [512, 1024],\n                         'rf__n_estimators': [100, 500]})</pre> In\u00a0[15]: Copied! <pre>grid_search.score(X_test, y_test)\n</pre> grid_search.score(X_test, y_test) Out[15]: <pre>0.8405142255762323</pre> In\u00a0[16]: Copied! <pre>grid_search.best_estimator_\n</pre> grid_search.best_estimator_ Out[16]: <pre>Pipeline(steps=[('feat', FPVecTransformer(kind='rdkit', length=1024)),\n                ('scaler', StandardScaler()), ('rf', RandomForestRegressor())])</pre>"},{"location":"tutorials/fpvector.html#Specialized-Fingerprint-transformer-classes","title":"Specialized Fingerprint transformer classes\u00b6","text":"<p>Aside from the generic molecular transformer classes, two specialized fingerprint vectors are also provided</p> <ul> <li><p><code>FPVecTransformer</code> is a wrapper around the original transformer that takes the parameters of the featurizer directly as input. A parameter called <code>kind</code> needs to be provided to specify which fingerprints should be initialized.</p> </li> <li><p><code>FPVecFilteredTransformer</code> add an additional feature that consist of checking non zeros occurence at each fingerprint position, as well as uniqueness of their values, then filtered out position not meeting some user-defined threshold.</p> </li> </ul>"},{"location":"tutorials/fpvector.html#Performing-grid-search-with-the-specialized-fingerprint-transformers","title":"Performing grid search with the specialized fingerprint transformers\u00b6","text":"<p>We will work on the same task again, the goal here is to search over an hyper-parameter space of the pipeline, which would include our featurizer parameters.</p> <p>This requires having a featurizer compatible with scikit-learn (some gymnastic to get this to work seemingly).</p>"},{"location":"tutorials/getting-started.html","title":"Getting Started","text":"In\u00a0[1]: Copied! <pre>%load_ext autoreload\n%autoreload 2\n</pre> %load_ext autoreload %autoreload 2 In\u00a0[2]: Copied! <pre>import datamol as dm\nimport random\nimport numpy as np\nfrom loguru import logger\n\n# set printing option\nnp.set_printoptions(threshold=10)\n\n# set random list\nnp.random.seed(10)\nrandom.seed(10)\n\ndata = dm.data.freesolv().sample(500).smiles.values\nmol2d = data[83]\n</pre> import datamol as dm import random import numpy as np from loguru import logger  # set printing option np.set_printoptions(threshold=10)  # set random list np.random.seed(10) random.seed(10)  data = dm.data.freesolv().sample(500).smiles.values mol2d = data[83] In\u00a0[3]: Copied! <pre>from molfeat.calc import RDKitDescriptors2D\n\ncalc = RDKitDescriptors2D()\ncalc(mol2d)\n</pre> from molfeat.calc import RDKitDescriptors2D  calc = RDKitDescriptors2D() calc(mol2d) <pre>Using backend: pytorch\n</pre> Out[3]: <pre>array([ 6.82415895, -1.37469136,  6.82415895, ...,  0.        ,\n        0.        ,  3.        ])</pre> In\u00a0[4]: Copied! <pre>import torch\nfrom molfeat.trans.fp import MoleculeTransformer\n</pre> import torch from molfeat.trans.fp import MoleculeTransformer In\u00a0[6]: Copied! <pre>%%timeit\n## Using the transformer with an input featurizer\n\ntrans = MoleculeTransformer(calc, n_jobs=4, verbose=True, dtype=torch.float)\nX = trans(data, enforce_dtype=True)\n</pre> %%timeit ## Using the transformer with an input featurizer  trans = MoleculeTransformer(calc, n_jobs=4, verbose=True, dtype=torch.float) X = trans(data, enforce_dtype=True) <pre>1.36 s \u00b1 152 ms per loop (mean \u00b1 std. dev. of 7 runs, 1 loop each)\n</pre> In\u00a0[7]: Copied! <pre>%%timeit\n## Using the transformer with an input featurizer\n\ntrans = MoleculeTransformer(calc, n_jobs=1, verbose=True, dtype=torch.float)\nX = trans(data, enforce_dtype=True)\n</pre> %%timeit ## Using the transformer with an input featurizer  trans = MoleculeTransformer(calc, n_jobs=1, verbose=True, dtype=torch.float) X = trans(data, enforce_dtype=True) <pre>3.96 s \u00b1 459 ms per loop (mean \u00b1 std. dev. of 7 runs, 1 loop each)\n</pre> In\u00a0[9]: Copied! <pre># pretty printing of the transformer\ntrans = MoleculeTransformer(calc, n_jobs=1, verbose=True, dtype=torch.float)\n\nprint(trans)\n</pre> # pretty printing of the transformer trans = MoleculeTransformer(calc, n_jobs=1, verbose=True, dtype=torch.float)  print(trans) <pre>MoleculeTransformer(dtype=torch.float32,\n                    featurizer=&lt;molfeat.calc.descriptors.RDKitDescriptors2D object at 0x7ff671945a50&gt;)\n</pre> In\u00a0[10]: Copied! <pre>from rdkit.Chem.rdMolDescriptors import CalcNumHeteroatoms\n\n\ndef custom_featurizer(mol):\n\"\"\"My custom featurizer\"\"\"\n    mol = dm.to_mol(mol)\n    return [mol.GetNumAtoms(), mol.GetNumBonds(), CalcNumHeteroatoms(mol), random.random()]\n</pre> from rdkit.Chem.rdMolDescriptors import CalcNumHeteroatoms   def custom_featurizer(mol):     \"\"\"My custom featurizer\"\"\"     mol = dm.to_mol(mol)     return [mol.GetNumAtoms(), mol.GetNumBonds(), CalcNumHeteroatoms(mol), random.random()] In\u00a0[11]: Copied! <pre>trans = MoleculeTransformer(custom_featurizer, n_jobs=0, verbose=True, dtype=float)\ntrans.transform(data[:10], ignore_errors=False)\n</pre> trans = MoleculeTransformer(custom_featurizer, n_jobs=0, verbose=True, dtype=float) trans.transform(data[:10], ignore_errors=False) Out[11]: <pre>[array([8.        , 7.        , 1.        , 0.17467059]),\n array([9.        , 9.        , 3.        , 0.30310511]),\n array([6.        , 5.        , 0.        , 0.36258741]),\n array([9.        , 8.        , 2.        , 0.45692842]),\n array([8.        , 8.        , 1.        , 0.86004914]),\n array([10.        , 11.        ,  1.        ,  0.23938029]),\n array([7.        , 7.        , 2.        , 0.43964778]),\n array([12.        , 12.        ,  8.        ,  0.37524299]),\n array([5.        , 4.        , 1.        , 0.58293156]),\n array([6.        , 5.        , 1.        , 0.23565393])]</pre> In\u00a0[12]: Copied! <pre>trans = MoleculeTransformer(\"ecfp\", n_jobs=0, verbose=True, dtype=float, length=32)\ntrans(data[:10], ignore_errors=False, enforce_dtype=True)\n</pre> trans = MoleculeTransformer(\"ecfp\", n_jobs=0, verbose=True, dtype=float, length=32) trans(data[:10], ignore_errors=False, enforce_dtype=True) Out[12]: <pre>array([[0., 1., 0., ..., 1., 1., 0.],\n       [0., 0., 0., ..., 0., 0., 0.],\n       [0., 1., 0., ..., 0., 0., 1.],\n       ...,\n       [1., 0., 0., ..., 0., 0., 0.],\n       [0., 1., 0., ..., 0., 0., 0.],\n       [0., 1., 1., ..., 1., 0., 0.]])</pre> In\u00a0[17]: Copied! <pre>from molfeat.calc import MordredDescriptors\n\n# 2D mordred descriptors\ndesc = MordredDescriptors(replace_nan=False, ignore_3D=True)\ntrans = MoleculeTransformer(desc, verbose=True, dtype=float, length=32)\n# has nan\nX = trans(data[:10], ignore_errors=False, enforce_dtype=True)\nprint(\n    \"Num Columns before fitting:\",\n    len(trans.columns),\n    \"\\nNum of nan before fitting:\",\n    np.isnan(X).sum(),\n    \"\\n-------\",\n)\n# fitting\ntrans.fit(data)\nX = trans(data[:10], ignore_errors=False, enforce_dtype=True)\nprint(\n    \"Num Columns after fitting:\",\n    len(trans.columns),\n    \"\\nNum of nan after fitting:\",\n    np.isnan(X).sum(),\n    \"\\n-------\",\n)\n</pre> from molfeat.calc import MordredDescriptors  # 2D mordred descriptors desc = MordredDescriptors(replace_nan=False, ignore_3D=True) trans = MoleculeTransformer(desc, verbose=True, dtype=float, length=32) # has nan X = trans(data[:10], ignore_errors=False, enforce_dtype=True) print(     \"Num Columns before fitting:\",     len(trans.columns),     \"\\nNum of nan before fitting:\",     np.isnan(X).sum(),     \"\\n-------\", ) # fitting trans.fit(data) X = trans(data[:10], ignore_errors=False, enforce_dtype=True) print(     \"Num Columns after fitting:\",     len(trans.columns),     \"\\nNum of nan after fitting:\",     np.isnan(X).sum(),     \"\\n-------\", ) <pre>Num Columns before fitting: 1613 \nNum of nan before fitting: 2774 \n-------\nNum Columns after fitting: 1066 \nNum of nan after fitting: 0 \n-------\n</pre> In\u00a0[18]: Copied! <pre>from sklearn.ensemble import RandomForestRegressor\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.pipeline import Pipeline\n</pre> from sklearn.ensemble import RandomForestRegressor from sklearn.preprocessing import StandardScaler from sklearn.model_selection import train_test_split from sklearn.pipeline import Pipeline In\u00a0[19]: Copied! <pre>df = dm.data.freesolv()\nX, y = df[\"smiles\"], df[\"expt\"]\nX_train, X_test, y_train, y_test = train_test_split(X, y, random_state=0)\n\nfeat = MoleculeTransformer(\"desc2d\")\npipe = Pipeline([(\"feat\", feat), (\"scaler\", StandardScaler()), (\"rf\", RandomForestRegressor())])\npipe.fit(X_train, y_train)\n</pre> df = dm.data.freesolv() X, y = df[\"smiles\"], df[\"expt\"] X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=0)  feat = MoleculeTransformer(\"desc2d\") pipe = Pipeline([(\"feat\", feat), (\"scaler\", StandardScaler()), (\"rf\", RandomForestRegressor())]) pipe.fit(X_train, y_train) Out[19]: <pre>Pipeline(steps=[('feat',\n                 MoleculeTransformer(featurizer=&lt;molfeat.calc.descriptors.RDKitDescriptors2D object at 0x7ff630220510&gt;)),\n                ('scaler', StandardScaler()), ('rf', RandomForestRegressor())])</pre> In\u00a0[20]: Copied! <pre>pipe.score(X_test, y_test)\n</pre> pipe.score(X_test, y_test) Out[20]: <pre>0.9020583487672389</pre> In\u00a0[21]: Copied! <pre>import seaborn as sns\n\nypred = pipe.predict(X)\ndf[\"rf_pred\"] = ypred\n\nsns.regplot(\"expt\", \"rf_pred\", data=df)\n</pre> import seaborn as sns  ypred = pipe.predict(X) df[\"rf_pred\"] = ypred  sns.regplot(\"expt\", \"rf_pred\", data=df) <pre>/Users/manu/.miniconda/envs/molfeat/lib/python3.7/site-packages/seaborn/_decorators.py:43: FutureWarning: Pass the following variables as keyword args: x, y. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n  FutureWarning\n</pre> Out[21]: <pre>&lt;AxesSubplot:xlabel='expt', ylabel='rf_pred'&gt;</pre>    &lt;rdf:RDF xmlns:cc=\"http://creativecommons.org/ns#\" xmlns:dc=\"http://purl.org/dc/elements/1.1/\" xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"&gt;    &lt;cc:Work&gt;     &lt;dc:type rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\"/&gt;     &lt;dc:date&gt;2021-07-16T17:28:55.253068&lt;/dc:date&gt;     &lt;dc:format&gt;image/svg+xml&lt;/dc:format&gt;     &lt;dc:creator&gt;      &lt;cc:Agent&gt;       &lt;dc:title&gt;Matplotlib v3.4.2, https://matplotlib.org/&lt;/dc:title&gt;      &lt;/cc:Agent&gt;     &lt;/dc:creator&gt;    &lt;/cc:Work&gt;   &lt;/rdf:RDF&gt;      &lt;style type=\"text/css\"&gt;*{stroke-linecap:butt;stroke-linejoin:round;}&lt;/style&gt;"},{"location":"tutorials/getting-started.html#MolFeat","title":"MolFeat\u00b6","text":""},{"location":"tutorials/getting-started.html#Concept","title":"Concept\u00b6","text":"<p>Molfeat is organized in two main modules:</p> <ul> <li><code>calc</code> which helps define a calculator function that transform a molecule into a vector of features</li> <li><code>trans</code> which provides a transformer interface to work with an ensemble of molecule and handles compatibility with scikit-learn, pytorch, dgl, etc</li> </ul>"},{"location":"tutorials/getting-started.html#Setup","title":"Setup\u00b6","text":""},{"location":"tutorials/getting-started.html#Using-the-calc-module","title":"Using the calc module\u00b6","text":""},{"location":"tutorials/getting-started.html#Using-the-trans-module","title":"Using the trans module\u00b6","text":"<p>Almost all transformers in <code>molfeat</code> are subclass of <code>MoleculeTransformer</code> which in turns implements <code>BaseFeaturizer</code> interface.  The base interface and transformer classes ensure some compatibility with the <code>scikit-learn</code> estimators as well as implementing commons features such as <code>__len__</code> and <code>collate_fn</code>.</p> <p><code>MoleculeTransformer</code> accepts as input a callable that represents the featurizer which would be applied on each indiviual molecule. It can compute features under a parallelization mode and can handle datatype conversion. The class also offers too endpoints for featurizing a set of molecules ( <code>transform</code> and  <code>__call__</code>). The advantage of using <code>__call__</code> is the return of both the featurized vector and the ids where featurization was successful.</p> <p>Note however that placing torch tensor to the GPU is not handled forcing users to appropriately optimize their code.</p>"},{"location":"tutorials/getting-started.html#Checking-the-effect-of-parallelization","title":"Checking the effect of parallelization\u00b6","text":""},{"location":"tutorials/getting-started.html#Providing-a-custom-featurizer","title":"Providing a custom featurizer\u00b6","text":""},{"location":"tutorials/getting-started.html#Providing-a-name-for-a-common-featurizer","title":"Providing a name for a common featurizer\u00b6","text":""},{"location":"tutorials/getting-started.html#Fitting-a-transformer-on-a-dataset-to-remove-columns-with-nan-values.","title":"Fitting a transformer on a dataset to remove columns with nan values.\u00b6","text":"<p>If you want to keep such columns or perform your own imputation, you should handle that at internal featurizer, or just not call <code>fit</code></p>"},{"location":"tutorials/getting-started.html#Training-a-scikit-learning-pipeline-to-predict-solubility","title":"Training a scikit-learning pipeline to predict solubility\u00b6","text":""},{"location":"tutorials/graphs.html","title":"Graph Featurizers","text":"In\u00a0[1]: Copied! <pre>%load_ext autoreload\n%autoreload 2\n</pre> %load_ext autoreload %autoreload 2 In\u00a0[2]: Copied! <pre>import datamol as dm\nfrom loguru import logger\nfrom molfeat.calc.atom import AtomCalculator\nfrom molfeat.calc.atom import AtomMaterialCalculator\n</pre> import datamol as dm from loguru import logger from molfeat.calc.atom import AtomCalculator from molfeat.calc.atom import AtomMaterialCalculator <pre>Using backend: pytorch\n</pre> <p>For each of the featurizer, you have the option to concatenate them or keep them as a collection. More than often you will want to concatenate them, explaining the default behaviour. The major addition is thus from <code>molfeat.calc._atom_bond_features.atom_extended_properties</code>.</p> In\u00a0[3]: Copied! <pre># do not concatenate ac\nac = AtomCalculator(concat=False)\n# concatenate amc and set the merged feature name as 'material' instead of the default\namc = AtomMaterialCalculator(name=\"material\")\n</pre> # do not concatenate ac ac = AtomCalculator(concat=False) # concatenate amc and set the merged feature name as 'material' instead of the default amc = AtomMaterialCalculator(name=\"material\") <p><code>AtomMaterialCalculator</code> is mainly just a wrapper around the AtomCalculator that defines new atom featurizers, including precomputed atomic properties collected from material science packages.</p> In\u00a0[4]: Copied! <pre>data = dm.data.freesolv()\n</pre> data = dm.data.freesolv() In\u00a0[5]: Copied! <pre># len will always return the sum of all featurization\nprint(len(ac))\nprint(len(amc))\n</pre> # len will always return the sum of all featurization print(len(ac)) print(len(amc)) <pre>82\n169\n</pre> In\u00a0[6]: Copied! <pre># you can still access to specific feature length\nprint(ac.feat_size(\"atom_one_hot\"))\n</pre> # you can still access to specific feature length print(ac.feat_size(\"atom_one_hot\")) <pre>43\n</pre> In\u00a0[7]: Copied! <pre>ac(data.smiles[0])\n</pre> ac(data.smiles[0]) Out[7]: <pre>{'atom_one_hot': array([[1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],\n        [0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],\n        [1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],\n        [1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],\n        [0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],\n        [1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],\n        [1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],\n        [1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],\n        [1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],\n        [1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],\n        [1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],\n        [0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],\n        [1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]], dtype=float32),\n 'atom_degree_one_hot': array([[0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.],\n        [0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.],\n        [0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.],\n        [0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.],\n        [0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.],\n        [0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.],\n        [0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.],\n        [0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.],\n        [0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.],\n        [0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.],\n        [0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.],\n        [0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.],\n        [0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.]], dtype=float32),\n 'atom_implicit_valence_one_hot': array([[0., 0., 0., 1., 0., 0., 0.],\n        [1., 0., 0., 0., 0., 0., 0.],\n        [0., 0., 0., 1., 0., 0., 0.],\n        [1., 0., 0., 0., 0., 0., 0.],\n        [1., 0., 0., 0., 0., 0., 0.],\n        [1., 0., 0., 0., 0., 0., 0.],\n        [0., 1., 0., 0., 0., 0., 0.],\n        [0., 1., 0., 0., 0., 0., 0.],\n        [1., 0., 0., 0., 0., 0., 0.],\n        [0., 1., 0., 0., 0., 0., 0.],\n        [0., 1., 0., 0., 0., 0., 0.],\n        [1., 0., 0., 0., 0., 0., 0.],\n        [0., 0., 0., 1., 0., 0., 0.]], dtype=float32),\n 'atom_hybridization_one_hot': array([[0., 0., 0., 1., 0., 0., 0.],\n        [0., 0., 0., 0., 1., 0., 0.],\n        [0., 0., 0., 1., 0., 0., 0.],\n        [0., 0., 0., 0., 1., 0., 0.],\n        [0., 0., 0., 0., 1., 0., 0.],\n        [0., 0., 0., 0., 1., 0., 0.],\n        [0., 0., 0., 0., 1., 0., 0.],\n        [0., 0., 0., 0., 1., 0., 0.],\n        [0., 0., 0., 0., 1., 0., 0.],\n        [0., 0., 0., 0., 1., 0., 0.],\n        [0., 0., 0., 0., 1., 0., 0.],\n        [0., 0., 0., 0., 1., 0., 0.],\n        [0., 0., 0., 1., 0., 0., 0.]], dtype=float32),\n 'atom_is_aromatic': array([[0.],\n        [0.],\n        [0.],\n        [0.],\n        [0.],\n        [1.],\n        [1.],\n        [1.],\n        [1.],\n        [1.],\n        [1.],\n        [0.],\n        [0.]], dtype=float32),\n 'atom_formal_charge': array([[0.],\n        [0.],\n        [0.],\n        [0.],\n        [0.],\n        [0.],\n        [0.],\n        [0.],\n        [0.],\n        [0.],\n        [0.],\n        [0.],\n        [0.]], dtype=float32),\n 'atom_num_radical_electrons': array([[0.],\n        [0.],\n        [0.],\n        [0.],\n        [0.],\n        [0.],\n        [0.],\n        [0.],\n        [0.],\n        [0.],\n        [0.],\n        [0.],\n        [0.]], dtype=float32),\n 'atom_is_in_ring': array([[0.],\n        [0.],\n        [0.],\n        [0.],\n        [0.],\n        [1.],\n        [1.],\n        [1.],\n        [1.],\n        [1.],\n        [1.],\n        [0.],\n        [0.]], dtype=float32),\n 'atom_total_num_H_one_hot': array([[0., 0., 0., 1., 0.],\n        [1., 0., 0., 0., 0.],\n        [0., 0., 0., 1., 0.],\n        [1., 0., 0., 0., 0.],\n        [1., 0., 0., 0., 0.],\n        [1., 0., 0., 0., 0.],\n        [0., 1., 0., 0., 0.],\n        [0., 1., 0., 0., 0.],\n        [1., 0., 0., 0., 0.],\n        [0., 1., 0., 0., 0.],\n        [0., 1., 0., 0., 0.],\n        [1., 0., 0., 0., 0.],\n        [0., 0., 0., 1., 0.]], dtype=float32),\n 'atom_chiral_tag_one_hot': array([[1., 0., 0., 0.],\n        [1., 0., 0., 0.],\n        [1., 0., 0., 0.],\n        [1., 0., 0., 0.],\n        [1., 0., 0., 0.],\n        [1., 0., 0., 0.],\n        [1., 0., 0., 0.],\n        [1., 0., 0., 0.],\n        [1., 0., 0., 0.],\n        [1., 0., 0., 0.],\n        [1., 0., 0., 0.],\n        [1., 0., 0., 0.],\n        [1., 0., 0., 0.]], dtype=float32),\n 'atom_is_chiral_center': array([[0.],\n        [0.],\n        [0.],\n        [0.],\n        [0.],\n        [0.],\n        [0.],\n        [0.],\n        [0.],\n        [0.],\n        [0.],\n        [0.],\n        [0.]], dtype=float32)}</pre> In\u00a0[8]: Copied! <pre>amc(data.smiles[0])\n</pre> amc(data.smiles[0]) Out[8]: <pre>{'material': array([[1., 0., 0., ..., 0., 0., 0.],\n        [1., 0., 0., ..., 0., 0., 0.],\n        [1., 0., 0., ..., 0., 0., 0.],\n        ...,\n        [1., 0., 0., ..., 0., 0., 0.],\n        [1., 0., 0., ..., 0., 0., 0.],\n        [1., 0., 0., ..., 0., 0., 0.]], dtype=float32)}</pre> <p>Defining some custom functions</p> In\u00a0[9]: Copied! <pre>def is_transition_metal(\n    atom,\n):\n\"\"\"Check whether an atom is a transition metal\"\"\"\n    n = atom.GetAtomicNum()\n    # we need to return an array\n    return [(n &gt;= 22 and n &lt;= 29) or (n &gt;= 40 and n &lt;= 47) or (n &gt;= 72 and n &lt;= 79)]\n\n\nmy_feats = AtomCalculator.DEFAULT_FEATURIZER.copy()\nmy_feats[\"is_transition_metal\"] = is_transition_metal\nmy_ac = AtomCalculator(featurizer_funcs=my_feats, name=\"custom_feat\")\nprint(\"My atom feat is\", len(my_ac), \", while default is \", len(ac))\n</pre> def is_transition_metal(     atom, ):     \"\"\"Check whether an atom is a transition metal\"\"\"     n = atom.GetAtomicNum()     # we need to return an array     return [(n &gt;= 22 and n &lt;= 29) or (n &gt;= 40 and n &lt;= 47) or (n &gt;= 72 and n &lt;= 79)]   my_feats = AtomCalculator.DEFAULT_FEATURIZER.copy() my_feats[\"is_transition_metal\"] = is_transition_metal my_ac = AtomCalculator(featurizer_funcs=my_feats, name=\"custom_feat\") print(\"My atom feat is\", len(my_ac), \", while default is \", len(ac)) <pre>My atom feat is 83 , while default is  82\n</pre> In\u00a0[10]: Copied! <pre>my_ac(data.smiles.values[-1])\n</pre> my_ac(data.smiles.values[-1]) Out[10]: <pre>{'custom_feat': array([[1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n         0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,\n         1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,\n         0., 0., 0.],\n        [1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n         0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,\n         1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,\n         0., 0., 0.],\n        [1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n         0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,\n         1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,\n         0., 0., 0.],\n        [1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n         0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,\n         1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,\n         0., 0., 0.],\n        [1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n         0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,\n         1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,\n         0., 0., 0.],\n        [1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n         0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,\n         1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,\n         0., 0., 0.]], dtype=float32)}</pre> <p>By default the input molecule is not ordered in any specific way, so if you want some canonical atom ranking, you would need to take care of that. This is handles by the <code>GraphTransformer</code> classes for you.</p> In\u00a0[11]: Copied! <pre>from molfeat.calc.bond import BondCalculator\n</pre> from molfeat.calc.bond import BondCalculator In\u00a0[12]: Copied! <pre>bc = BondCalculator(self_loop=False)\nout = bc(data.smiles[0])\nprint(out)\nprint(\"Length\", len(bc), \"Featurized Mol size\", out[\"he\"].shape)\n</pre> bc = BondCalculator(self_loop=False) out = bc(data.smiles[0]) print(out) print(\"Length\", len(bc), \"Featurized Mol size\", out[\"he\"].shape) <pre>{'he': array([[1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0],\n       [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0],\n       [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0],\n       [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0],\n       [1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0],\n       [1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0],\n       [1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0],\n       [1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0],\n       [1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0],\n       [1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0],\n       [1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n       [1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n       [1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n       [1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n       [1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n       [1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n       [1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n       [1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n       [1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n       [1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n       [1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0],\n       [1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0],\n       [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0],\n       [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0],\n       [1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n       [1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1]])}\nLength 15 Featurized Mol size (26, 15)\n</pre> In\u00a0[13]: Copied! <pre>from rdkit.Chem.Draw import IPythonConsole\n\nIPythonConsole.drawOptions.addBondIndices = True\nmol = dm.to_mol(data.smiles[0])\nmol\n</pre> from rdkit.Chem.Draw import IPythonConsole  IPythonConsole.drawOptions.addBondIndices = True mol = dm.to_mol(data.smiles[0]) mol Out[13]: <p>The above molecule has 13 bonds, explaining why we have 26 edges (bi-graph for each bond direction).</p> <p>In the example bellow, we have 39 edges features, because of adding self loops (as many as the 13 atoms). Then the concatenated features have one more columns that labels whether the edge is a self-loop or not.</p> In\u00a0[14]: Copied! <pre>bc2 = BondCalculator(self_loop=True)\nout2 = bc2(data.smiles[0])\nprint(out2)\nprint(\"Length\", len(bc2), \"Featurized Mol size\", out2[\"he\"].shape)\n</pre> bc2 = BondCalculator(self_loop=True) out2 = bc2(data.smiles[0]) print(out2) print(\"Length\", len(bc2), \"Featurized Mol size\", out2[\"he\"].shape) <pre>{'he': array([[1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.],\n       [1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.],\n       [1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.],\n       [1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.],\n       [1., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.],\n       [1., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.],\n       [1., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.],\n       [1., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.],\n       [1., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.],\n       [1., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.],\n       [1., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.],\n       [1., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.],\n       [1., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.],\n       [1., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.],\n       [1., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.],\n       [1., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.],\n       [1., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.],\n       [1., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.],\n       [1., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.],\n       [1., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.],\n       [1., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.],\n       [1., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.],\n       [1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.],\n       [1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.],\n       [1., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.],\n       [1., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.],\n       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.],\n       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.],\n       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.],\n       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.],\n       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.],\n       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.],\n       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.],\n       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.],\n       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.],\n       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.],\n       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.],\n       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.],\n       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.]])}\nLength 16 Featurized Mol size (39, 16)\n</pre> <p>In the following, we will give an overview of the EdgeMatCalculator. This edge featurizer defines the same bond featurizer but has an additional pairwise distance function.</p> <p>Due to its nature, all features need to be concatenated by default with this featurizer !</p> In\u00a0[15]: Copied! <pre>from molfeat.calc.bond import EdgeMatCalculator\n</pre> from molfeat.calc.bond import EdgeMatCalculator In\u00a0[16]: Copied! <pre>edge_feat = EdgeMatCalculator()\nprint(edge_feat.pairwise_atom_funcs)\n</pre> edge_feat = EdgeMatCalculator() print(edge_feat.pairwise_atom_funcs) <pre>{'pairwise_2D_dist': &lt;function pairwise_2D_dist at 0x7fd83920a560&gt;, 'pairwise_ring_membership': &lt;function pairwise_ring_membership at 0x7fd83920a710&gt;}\n</pre> In\u00a0[17]: Copied! <pre>edge_feat(data.smiles[0])[\"he\"].shape\n</pre> edge_feat(data.smiles[0])[\"he\"].shape Out[17]: <pre>(169, 17)</pre> <p>Let's replace the pairwise 2D distance by a 3D distance</p> In\u00a0[18]: Copied! <pre>from molfeat.calc._atom_bond_features import pairwise_3D_dist\n\nmy_edge_feat = dict(\n    pairwise_ring_membership=edge_feat.pairwise_atom_funcs[\"pairwise_ring_membership\"],\n    pairwise_3D_dist=pairwise_3D_dist,\n)\nnew_edge_feat = EdgeMatCalculator(pairwise_atom_funcs=my_edge_feat)\nlen(new_edge_feat)\n</pre> from molfeat.calc._atom_bond_features import pairwise_3D_dist  my_edge_feat = dict(     pairwise_ring_membership=edge_feat.pairwise_atom_funcs[\"pairwise_ring_membership\"],     pairwise_3D_dist=pairwise_3D_dist, ) new_edge_feat = EdgeMatCalculator(pairwise_atom_funcs=my_edge_feat) len(new_edge_feat) Out[18]: <pre>17</pre> In\u00a0[19]: Copied! <pre># Expect this to fail\ntry:\n    new_edge_feat(dm.to_mol(data.smiles[0]))\nexcept ValueError as e:\n    logger.error(e)\n</pre> # Expect this to fail try:     new_edge_feat(dm.to_mol(data.smiles[0])) except ValueError as e:     logger.error(e) <pre>2021-07-16 17:23:59.835 | ERROR    | __main__:&lt;module&gt;:5 - Expected a molecule with conformers information.\n</pre> In\u00a0[20]: Copied! <pre>mol = dm.to_mol(data.smiles[0])\nmol = dm.conformers.generate(mol)\n</pre> mol = dm.to_mol(data.smiles[0]) mol = dm.conformers.generate(mol) <p>Let's ask for a tensor and also instead of a $({N_{atoms}}^2, Feats)$ features, let ask for a $(N_{atoms}, N_{atoms}, Feats)$ matrix</p> In\u00a0[21]: Copied! <pre>import torch\n\nnew_edge_feat(mol, dtype=torch.float, flat=False)[\"he\"].shape\n</pre> import torch  new_edge_feat(mol, dtype=torch.float, flat=False)[\"he\"].shape Out[21]: <pre>torch.Size([13, 13, 17])</pre> <p>Important: the tensor-based featurizers only supports the EdgeMatCalculator featurizer an no BondCalculator for quite obvious reasons.</p> In\u00a0[22]: Copied! <pre>from molfeat.trans.graph import AdjGraphTransformer\nfrom molfeat.trans.graph import DistGraphTransformer3D\nfrom molfeat.trans.graph import DGLGraphTransformer\n</pre> from molfeat.trans.graph import AdjGraphTransformer from molfeat.trans.graph import DistGraphTransformer3D from molfeat.trans.graph import DGLGraphTransformer In\u00a0[23]: Copied! <pre># atom featurizer when not provided will fallback to the default\nadj_trans = AdjGraphTransformer(\n    atom_featurizer=AtomMaterialCalculator(),\n    bond_featurizer=EdgeMatCalculator(),\n    explicit_hydrogens=True,\n    self_loop=True,\n    canonical_atom_order=True,\n    dtype=torch.float,\n)\n</pre> # atom featurizer when not provided will fallback to the default adj_trans = AdjGraphTransformer(     atom_featurizer=AtomMaterialCalculator(),     bond_featurizer=EdgeMatCalculator(),     explicit_hydrogens=True,     self_loop=True,     canonical_atom_order=True,     dtype=torch.float, ) In\u00a0[24]: Copied! <pre>print(\"Atom dim:\", adj_trans.atom_dim, \"\\nBond dim:\", adj_trans.bond_dim)\n</pre> print(\"Atom dim:\", adj_trans.atom_dim, \"\\nBond dim:\", adj_trans.bond_dim) <pre>Atom dim: 169 \nBond dim: 17\n</pre> In\u00a0[25]: Copied! <pre>features, ids = adj_trans(data.smiles[:10], ignore_errors=True)\ngraph, atom_x, bond_x = features[0]\nprint(\"Graph:\", graph.shape, \"\\nAtomFeat:\", atom_x.shape, \"\\nBondFeat:\", bond_x.shape)\n</pre> features, ids = adj_trans(data.smiles[:10], ignore_errors=True) graph, atom_x, bond_x = features[0] print(\"Graph:\", graph.shape, \"\\nAtomFeat:\", atom_x.shape, \"\\nBondFeat:\", bond_x.shape) <pre>/Users/manu/.miniconda/envs/molfeat/lib/python3.7/site-packages/numpy/core/_asarray.py:102: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.\n  return array(a, dtype, copy=False, order=order)\n/Users/manu/.miniconda/envs/molfeat/lib/python3.7/site-packages/numpy/core/_asarray.py:102: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.\n  return array(a, dtype, copy=False, order=order)\nGraph: torch.Size([13, 13]) \nAtomFeat: torch.Size([13, 169]) \nBondFeat: torch.Size([13, 13, 17])\n</pre> In\u00a0[26]: Copied! <pre># atom featurizer when not provided will fallback to the default\n# if a bond featurizer is not provided, none will be used\nfrom molfeat.utils.callbacks import ConformerCallback\n\ndist_trans = DistGraphTransformer3D(\n    explicit_hydrogens=False,\n    canonical_atom_order=True,\n    dtype=torch.float,\n    callbacks=ConformerCallback(verbose=False),\n)\n</pre> # atom featurizer when not provided will fallback to the default # if a bond featurizer is not provided, none will be used from molfeat.utils.callbacks import ConformerCallback  dist_trans = DistGraphTransformer3D(     explicit_hydrogens=False,     canonical_atom_order=True,     dtype=torch.float,     callbacks=ConformerCallback(verbose=False), ) In\u00a0[27]: Copied! <pre>print(\"Atom dim:\", dist_trans.atom_dim, \"\\nBond dim:\", dist_trans.bond_dim)\n</pre> print(\"Atom dim:\", dist_trans.atom_dim, \"\\nBond dim:\", dist_trans.bond_dim) <pre>Atom dim: 82 \nBond dim: 0\n</pre> In\u00a0[28]: Copied! <pre># we don't have bond feature here\nfeatures, ids = dist_trans(data.smiles[:10], ignore_errors=True)\ngraph, atom_x = features[0]\nprint(\"Graph:\", graph.shape, \"\\nAtomFeat:\", atom_x.shape)\n</pre> # we don't have bond feature here features, ids = dist_trans(data.smiles[:10], ignore_errors=True) graph, atom_x = features[0] print(\"Graph:\", graph.shape, \"\\nAtomFeat:\", atom_x.shape) <pre>Graph: torch.Size([13, 13]) \nAtomFeat: torch.Size([13, 82])\n</pre> In\u00a0[29]: Copied! <pre>graph\n</pre> graph Out[29]: <pre>tensor([[0.0000, 1.4630, 2.5259, 2.5053, 2.8658, 3.8022, 4.9971, 6.2226, 6.4984,\n         5.6259, 4.2298, 7.8803, 8.5878],\n        [1.4630, 0.0000, 1.4651, 1.4408, 2.3328, 2.5534, 3.7730, 4.9470, 5.2164,\n         4.4104, 3.0339, 6.5963, 7.3484],\n        [2.5259, 1.4651, 0.0000, 2.5349, 3.5949, 3.0956, 4.2685, 5.2236, 5.2866,\n         4.3933, 3.1974, 6.5679, 7.1769],\n        [2.5053, 1.4408, 2.5349, 0.0000, 1.2615, 1.4819, 2.5019, 3.7874, 4.3030,\n         3.7940, 2.5106, 5.7050, 6.6431],\n        [2.8658, 2.3328, 3.5949, 1.2615, 0.0000, 2.3665, 2.8667, 4.2408, 5.0286,\n         4.7543, 3.5823, 6.3956, 7.4611],\n        [3.8022, 2.5534, 3.0956, 1.4819, 2.3665, 0.0000, 1.4045, 2.4322, 2.8212,\n         2.4335, 1.4050, 4.2233, 5.1855],\n        [4.9971, 3.7730, 4.2685, 2.5019, 2.8667, 1.4045, 0.0000, 1.3978, 2.4292,\n         2.7960, 2.4210, 3.6951, 4.9264],\n        [6.2226, 4.9470, 5.2236, 3.7874, 4.2408, 2.4322, 1.3978, 0.0000, 1.3990,\n         2.4200, 2.7943, 2.4065, 3.7465],\n        [6.4984, 5.2164, 5.2866, 4.3030, 5.0286, 2.8212, 2.4292, 1.3990, 0.0000,\n         1.4074, 2.4333, 1.4028, 2.5000],\n        [5.6259, 4.4104, 4.3933, 3.7940, 4.7543, 2.4335, 2.7960, 2.4200, 1.4074,\n         0.0000, 1.3981, 2.4633, 2.9619],\n        [4.2298, 3.0339, 3.1974, 2.5106, 3.5823, 1.4050, 2.4210, 2.7943, 2.4333,\n         1.3981, 0.0000, 3.7320, 4.3591],\n        [7.8803, 6.5963, 6.5679, 5.7050, 6.3956, 4.2233, 3.6951, 2.4065, 1.4028,\n         2.4633, 3.7320, 0.0000, 1.4239],\n        [8.5878, 7.3484, 7.1769, 6.6431, 7.4611, 5.1855, 4.9264, 3.7465, 2.5000,\n         2.9619, 4.3591, 1.4239, 0.0000]])</pre> <p>Let's show a last example with the DGLfeaturizer. One using the default featurizer and another using some <code>dgllife</code> featurizers</p> In\u00a0[30]: Copied! <pre># we need the bond featurizer to include self_loop if the featurizer is supposed too\ndgl_trans = DGLGraphTransformer(\n    self_loop=True,\n    bond_featurizer=BondCalculator(self_loop=True),\n    canonical_atom_order=True,\n    dtype=torch.float,\n)\n</pre> # we need the bond featurizer to include self_loop if the featurizer is supposed too dgl_trans = DGLGraphTransformer(     self_loop=True,     bond_featurizer=BondCalculator(self_loop=True),     canonical_atom_order=True,     dtype=torch.float, ) In\u00a0[31]: Copied! <pre>print(\"Atom dim:\", dgl_trans.atom_dim, \"\\nBond dim:\", dgl_trans.bond_dim)\n</pre> print(\"Atom dim:\", dgl_trans.atom_dim, \"\\nBond dim:\", dgl_trans.bond_dim) <pre>Atom dim: 82 \nBond dim: 16\n</pre> In\u00a0[33]: Copied! <pre># we don't have bond feature here\nfeatures, ids = dgl_trans(data.smiles[:10], ignore_errors=True)\nfeatures[0]\n</pre> # we don't have bond feature here features, ids = dgl_trans(data.smiles[:10], ignore_errors=True) features[0] <pre>/Users/manu/.miniconda/envs/molfeat/lib/python3.7/site-packages/dgl/base.py:45: DGLWarning: DGLGraph.__len__ is deprecated.Please directly call DGLGraph.number_of_nodes.\n  return warnings.warn(message, category=category, stacklevel=1)\n</pre> Out[33]: <pre>Graph(num_nodes=13, num_edges=39,\n      ndata_schemes={'hv': Scheme(shape=(82,), dtype=torch.float32)}\n      edata_schemes={'he': Scheme(shape=(16,), dtype=torch.float32)})</pre> In\u00a0[34]: Copied! <pre># let's use some dgllife featurizer\n</pre> # let's use some dgllife featurizer In\u00a0[35]: Copied! <pre>from dgllife.utils.featurizers import WeaveEdgeFeaturizer\nfrom dgllife.utils.featurizers import WeaveAtomFeaturizer\n</pre> from dgllife.utils.featurizers import WeaveEdgeFeaturizer from dgllife.utils.featurizers import WeaveAtomFeaturizer In\u00a0[36]: Copied! <pre># here we set complete graph to True, which requires compatibility from the atom and bond featurizer\ndgl_trans = DGLGraphTransformer(\n    self_loop=True,\n    atom_featurizer=WeaveAtomFeaturizer(),\n    bond_featurizer=WeaveEdgeFeaturizer(),\n    canonical_atom_order=True,\n    complete_graph=True,\n    verbose=True,\n    dtype=torch.float,\n)\n</pre> # here we set complete graph to True, which requires compatibility from the atom and bond featurizer dgl_trans = DGLGraphTransformer(     self_loop=True,     atom_featurizer=WeaveAtomFeaturizer(),     bond_featurizer=WeaveEdgeFeaturizer(),     canonical_atom_order=True,     complete_graph=True,     verbose=True,     dtype=torch.float, ) In\u00a0[37]: Copied! <pre>print(\"Atom dim:\", dgl_trans.atom_dim, \"\\nBond dim:\", dgl_trans.bond_dim)\n</pre> print(\"Atom dim:\", dgl_trans.atom_dim, \"\\nBond dim:\", dgl_trans.bond_dim) <pre>Atom dim: 27 \nBond dim: 12\n</pre> In\u00a0[40]: Copied! <pre>features, ids = dgl_trans(data.smiles[:10], ignore_errors=True)\n</pre> features, ids = dgl_trans(data.smiles[:10], ignore_errors=True) <pre>/Users/manu/.miniconda/envs/molfeat/lib/python3.7/site-packages/dgl/base.py:45: DGLWarning: DGLGraph.__len__ is deprecated.Please directly call DGLGraph.number_of_nodes.\n  return warnings.warn(message, category=category, stacklevel=1)\n</pre> In\u00a0[41]: Copied! <pre>features[0]\n</pre> features[0] Out[41]: <pre>Graph(num_nodes=13, num_edges=169,\n      ndata_schemes={'h': Scheme(shape=(27,), dtype=torch.float32)}\n      edata_schemes={'e': Scheme(shape=(12,), dtype=torch.float32)})</pre> In\u00a0[42]: Copied! <pre>from molfeat.trans.graph import MolTreeDecompositionTransformer\n</pre> from molfeat.trans.graph import MolTreeDecompositionTransformer In\u00a0[43]: Copied! <pre># we start with an unknown vocab that will be built on fit\ntree_trans = MolTreeDecompositionTransformer()\n</pre> # we start with an unknown vocab that will be built on fit tree_trans = MolTreeDecompositionTransformer() In\u00a0[44]: Copied! <pre>tree_trans.fit(data.smiles)\n</pre> tree_trans.fit(data.smiles) <pre>2021-07-16 17:24:33.477 | DEBUG    | molfeat.calc.tree:get_vocab:195 - A vocab of 101 elements has been generated\n</pre> Out[44]: <pre>MolTreeDecompositionTransformer(featurizer=&lt;molfeat.calc.tree.TreeDecomposer object at 0x7fd8316d24d0&gt;,\n                                n_jobs=1, verbose=True)</pre> In\u00a0[47]: Copied! <pre>features, ids = tree_trans(data.smiles[:10], ignore_errors=True)\nfeatures[0]\n</pre> features, ids = tree_trans(data.smiles[:10], ignore_errors=True) features[0] Out[47]: <pre>Graph(num_nodes=10, num_edges=18,\n      ndata_schemes={'hv': Scheme(shape=(), dtype=torch.int64)}\n      edata_schemes={})</pre>"},{"location":"tutorials/graphs.html#Graph-transformers","title":"Graph transformers\u00b6","text":"<p>Graph featurizers in <code>molfeat</code> are organized into pure tensor-based featurizers and  <code>dgl</code> backed graphs, both inheriting from <code>molfeat.trans.graph.GraphTransformer</code>.</p> <p>Similar to molecular descriptors and fingerprints, there is a notion of the atom and bond featurizers which you can define to build you own custom graph featurizers.</p> <p>Some of the dgl featurizers are deeply integrated into the <code>dgl</code> and <code>dgllife</code> API allowing you to directly use your custom featurizers with them.</p>"},{"location":"tutorials/graphs.html#AtomCalculator","title":"AtomCalculator\u00b6","text":"<p>Here we give an example of an atom featurizer. We will also build some custom properties to show how you can build you own.</p> <p>Each atom featurizer takes as input an atom (assuming information on its environment are maintained) and returns its properties.</p> <p>By default, two atom calculators are available.</p>"},{"location":"tutorials/graphs.html#BondCalculator","title":"BondCalculator\u00b6","text":"<p>Bond featurizer are similar in principle to the atom featurizers. They featurize bonds in a molecule. In <code>molfeat</code> we make the distinction between:</p> <ul> <li><code>BondCalculator</code>: a pure bond featurizer that will only featurize bonds in the molecules (we assume a bigraph)</li> <li><code>EdgeMatCalculator</code>: an edge featurizer that returns features between all pairs of atoms. For example you might want to define some distance based properties between pair of atoms.</li> </ul>"},{"location":"tutorials/graphs.html#Putting-all-together-with-the-Graph-transformers","title":"Putting all together with the Graph transformers\u00b6","text":"<p>With the ability to define our own node and edge featurizers, we can defined any graph featurizer of interest. Strong defaults are made available in <code>molfeat</code>.</p> <ul> <li><p><code>AdjGraphTransformer</code>:  adjacency tensor features that returns adjacency matrix as well as atom features and bond features when defined</p> </li> <li><p><code>CompleteGraphTransformer</code>:  featurizer that returns a complete graph (with or without self loops) matrix as well as atom features and bond features when defined</p> </li> <li><p><code>TopoDistGraphTransformer</code>:  topological distance based features that returns the pairwise path length matrix as graph matrix as well as atom features and bond features when defined.</p> </li> <li><p><code>DistGraphTransformer3D</code>:  real 3D distance-based features that returns the pairwise 3D distance matrix as graph matrix as well as atom features and bond features when defined. This featurizer requires molecules with conformers. Either precompute them, or use the appropriate callback function (<code>ConformerCallback</code>)</p> </li> <li><p><code>DGLGraphTransformer</code>: graph featurizer that returns a dgl graph. It's atom and bond featurizers are all compatible with the internal <code>dgllife</code> featurizer, however the class is made generic enough to work without <code>dgllife</code> allowing custom extension.</p> </li> </ul>"},{"location":"tutorials/graphs.html#Tree-Calculator","title":"Tree Calculator\u00b6","text":"<p>The tree calculator is pretty straightforward and only a dgl datatype is supported</p>"},{"location":"tutorials/pharmacophore.html","title":"Pharmacophore Featurizers","text":"<p>This notebook will highlight the features of the pharmacophore featurizers 2D and 3D.</p> In\u00a0[1]: Copied! <pre>%load_ext autoreload\n%autoreload 2\n\nimport numpy as np\nimport datamol as dm\nimport pandas as pd\n\nfrom molfeat.calc import Pharmacophore2D\nfrom molfeat.calc import Pharmacophore3D\n</pre> %load_ext autoreload %autoreload 2  import numpy as np import datamol as dm import pandas as pd  from molfeat.calc import Pharmacophore2D from molfeat.calc import Pharmacophore3D <pre>[11:16:01] /opt/dgl/src/runtime/tensordispatch.cc:Using backend: pytorch\n43: TensorDispatcher: dlopen failed: /home/hadim/local/conda/envs/molfeat/lib/python3.8/site-packages/dgl/tensoradapter/pytorch/libtensoradapter_pytorch_1.8.0.post3.so: cannot open shared object file: No such file or directory\n</pre> In\u00a0[3]: Copied! <pre># Get a molecule\nmol = dm.to_mol(\"Nc1cnn(-c2ccccc2)c(=O)c1Cl\")\n\nmol\n</pre> # Get a molecule mol = dm.to_mol(\"Nc1cnn(-c2ccccc2)c(=O)c1Cl\")  mol Out[3]: In\u00a0[5]: Copied! <pre># Create the featurizer\nfeaturizer = Pharmacophore2D(factory=\"pmapper\", length=2048)\n\nprint(len(featurizer))\n\n# Computing a fingerprint\nfp = featurizer(mol)\n\nprint(fp.shape)\nfp\n</pre> # Create the featurizer featurizer = Pharmacophore2D(factory=\"pmapper\", length=2048)  print(len(featurizer))  # Computing a fingerprint fp = featurizer(mol)  print(fp.shape) fp <pre>2048\n(2048,)\n</pre> Out[5]: <pre>array([0., 1., 0., ..., 0., 0., 0.])</pre> In\u00a0[6]: Copied! <pre># Get a molecule\nmol = dm.to_mol(\"Nc1cnn(-c2ccccc2)c(=O)c1Cl\")\nmol = dm.conformers.generate(mol, n_confs=1)\n\n# Build a conformer\n\nmol\n</pre> # Get a molecule mol = dm.to_mol(\"Nc1cnn(-c2ccccc2)c(=O)c1Cl\") mol = dm.conformers.generate(mol, n_confs=1)  # Build a conformer  mol Out[6]: <p>Note that <code>bin_step</code> is an important parameter that influence the \"bluriness\" of your pharmacophoric features. It will also impact the true size of the fingerprint and so also influences fingerprint collision when <code>length</code> is provided.</p> In\u00a0[7]: Copied! <pre># Create the featurizer\nfeaturizer = Pharmacophore3D(factory=\"pmapper\", length=2048, bin_step=1)\n\n# Extract the features\nfeatures = featurizer.get_features(mol)\n\nfeatures\n</pre> # Create the featurizer featurizer = Pharmacophore3D(factory=\"pmapper\", length=2048, bin_step=1)  # Extract the features features = featurizer.get_features(mol)  features Out[7]: feature_id feature_name feature_type atom_indices coords 0 1 a ar6 (1, 2, 3, 4, 11, 13) [1.6073308945212306, -0.36478682508765736, 0.1... 1 2 a ar6 (5, 6, 7, 8, 9, 10) [-2.5373606040975885, 0.26569516099436263, -0.... 2 3 D N_HBD (0,) [4.374047166053936, -0.7628191630259037, 0.243... 3 4 A N_HBA (3,) [0.7699593756605752, -1.3098389937058816, 0.56... 4 5 A O_HBA (12,) [0.6258053493478449, 1.8317635297679282, -0.79... 5 6 H ar6_hyd (1, 2, 3, 4, 11, 13) [1.6073308945212306, -0.36478682508765736, 0.1... 6 7 H ar6_hyd (5, 6, 7, 8, 9, 10) [-2.5373606040975885, 0.26569516099436263, -0.... 7 8 H hyd_1 (14,) [3.501330026469845, 1.8924330558014002, -0.888... <p>The extracted features are returned as a dataframe.</p> <p>Next is to compute the associated fingerprint.</p> In\u00a0[8]: Copied! <pre># Compute a fingerprint for a molecule\nfp = featurizer(mol)\n\nprint(fp.shape)\nprint(fp.sum())\nfp\n</pre> # Compute a fingerprint for a molecule fp = featurizer(mol)  print(fp.shape) print(fp.sum()) fp <pre>(2048,)\n76\n</pre> Out[8]: <pre>array([1, 0, 0, ..., 0, 0, 0])</pre> <p>It's also possible to visualize the features.</p> In\u00a0[9]: Copied! <pre># Show the conformer with the pharmacophoric features\nfeaturizer.show(mol, show_legend=True)\n</pre> # Show the conformer with the pharmacophoric features featurizer.show(mol, show_legend=True) <p>The 3D viz is not available in the documentation. Here is a screenshot.</p> <p></p> In\u00a0[10]: Copied! <pre># First generate conformers for our list of molecules\nsmiles_list = [\n    \"Nc1cnn(-c2ccccc2)c(=O)c1Cl\",\n    \"Cc1ccn(-c2ccccc2)c(=O)c1F\",\n    \"Cc1cnn(-c2ccccc2)c(=O)c1Cl\",\n    \"Cc1cnn(-c2ccccc2)c(=O)c1\",\n]\nmols = [dm.to_mol(smiles) for smiles in smiles_list]\nmols = [dm.conformers.generate(mol, n_confs=1) for mol in mols]\n\ndm.to_image(mols)\n</pre> # First generate conformers for our list of molecules smiles_list = [     \"Nc1cnn(-c2ccccc2)c(=O)c1Cl\",     \"Cc1ccn(-c2ccccc2)c(=O)c1F\",     \"Cc1cnn(-c2ccccc2)c(=O)c1Cl\",     \"Cc1cnn(-c2ccccc2)c(=O)c1\", ] mols = [dm.to_mol(smiles) for smiles in smiles_list] mols = [dm.conformers.generate(mol, n_confs=1) for mol in mols]  dm.to_image(mols) Out[10]: <p>You will notice that while similar the conformers are not aligned with respect to each other.</p> <p>In that specific example, since the conformers are not aligned, the features extraction will run an alignment step first. You can (and should) disable that step if your molecules already contains conformer of interest (such as poses for examples).</p> In\u00a0[11]: Copied! <pre># Initialize the featurizer\nfeaturizer = Pharmacophore3D(factory=\"pmapper\", bin_step=1, length=2048)\n</pre> # Initialize the featurizer featurizer = Pharmacophore3D(factory=\"pmapper\", bin_step=1, length=2048) In\u00a0[12]: Copied! <pre># Extract all the features from a list of molecules\nfeatures = featurizer.get_features_from_many(mols, align=True, keep_mols=True)\n\n# Extract the aligned molecules (optional)\nmols = features.groupby(\"mol_index\").first()[\"mol\"].tolist()\n\n# Visualize the aligned mols\ndm.to_image(mols)\n</pre> # Extract all the features from a list of molecules features = featurizer.get_features_from_many(mols, align=True, keep_mols=True)  # Extract the aligned molecules (optional) mols = features.groupby(\"mol_index\").first()[\"mol\"].tolist()  # Visualize the aligned mols dm.to_image(mols) Out[12]: <p>Notice the returned molecules are aligned. This is those conformers that are actually used for the features clustering.</p> <p>Now let's have a look at the extracted features. Note that those features are not clustered yet.</p> In\u00a0[13]: Copied! <pre>features\n</pre> features Out[13]: feature_id feature_name feature_type atom_indices coords mol_index mol 0 1 a ar6 (1, 2, 3, 4, 11, 13) [1.6073308945212306, -0.36478682508765736, 0.1... 0 &lt;img data-content=\"rdkit/molecule\" src=\"data:i... 1 2 a ar6 (5, 6, 7, 8, 9, 10) [-2.5373606040975885, 0.2656951609943626, -0.0... 0 &lt;img data-content=\"rdkit/molecule\" src=\"data:i... 2 3 D N_HBD (0,) [4.374047166053936, -0.7628191630259036, 0.243... 0 &lt;img data-content=\"rdkit/molecule\" src=\"data:i... 3 4 A N_HBA (3,) [0.7699593756605752, -1.3098389937058816, 0.56... 0 &lt;img data-content=\"rdkit/molecule\" src=\"data:i... 4 5 A O_HBA (12,) [0.6258053493478449, 1.8317635297679282, -0.79... 0 &lt;img data-content=\"rdkit/molecule\" src=\"data:i... 5 6 H ar6_hyd (1, 2, 3, 4, 11, 13) [1.6073308945212306, -0.36478682508765736, 0.1... 0 &lt;img data-content=\"rdkit/molecule\" src=\"data:i... 6 7 H ar6_hyd (5, 6, 7, 8, 9, 10) [-2.5373606040975885, 0.2656951609943626, -0.0... 0 &lt;img data-content=\"rdkit/molecule\" src=\"data:i... 7 8 H hyd_1 (14,) [3.501330026469845, 1.8924330558014002, -0.888... 0 &lt;img data-content=\"rdkit/molecule\" src=\"data:i... 8 1 a ar6 (1, 2, 3, 4, 11, 13) [1.6472469847044522, -0.33346691994497213, 0.1... 1 &lt;img data-content=\"rdkit/molecule\" src=\"data:i... 9 2 a ar6 (5, 6, 7, 8, 9, 10) [-2.537205754107394, 0.27521012778383225, -0.0... 1 &lt;img data-content=\"rdkit/molecule\" src=\"data:i... 10 3 A O_HBA (12,) [0.6115432042399305, 1.8876712335275594, -0.79... 1 &lt;img data-content=\"rdkit/molecule\" src=\"data:i... 11 4 H ar6_hyd (1, 2, 3, 4, 11, 13) [1.6472469847044522, -0.33346691994497213, 0.1... 1 &lt;img data-content=\"rdkit/molecule\" src=\"data:i... 12 5 H ar6_hyd (5, 6, 7, 8, 9, 10) [-2.537205754107394, 0.27521012778383225, -0.0... 1 &lt;img data-content=\"rdkit/molecule\" src=\"data:i... 13 6 H hyd_1 (0,) [4.502675021580601, -0.7001012151657882, 0.179... 1 &lt;img data-content=\"rdkit/molecule\" src=\"data:i... 14 7 H hyd_1 (14,) [3.2873072603371845, 1.645104915272015, -0.775... 1 &lt;img data-content=\"rdkit/molecule\" src=\"data:i... 15 1 a ar6 (1, 2, 3, 4, 11, 13) [1.5885348415634917, -0.3513699161774697, 0.12... 2 &lt;img data-content=\"rdkit/molecule\" src=\"data:i... 16 2 a ar6 (5, 6, 7, 8, 9, 10) [-2.5603671398687795, 0.225961309976679, -0.00... 2 &lt;img data-content=\"rdkit/molecule\" src=\"data:i... 17 3 A N_HBA (3,) [0.7179018976211062, -1.278721491357971, 0.548... 2 &lt;img data-content=\"rdkit/molecule\" src=\"data:i... 18 4 A O_HBA (12,) [0.6654966654607128, 1.9038869926122095, -0.81... 2 &lt;img data-content=\"rdkit/molecule\" src=\"data:i... 19 5 H ar6_hyd (1, 2, 3, 4, 11, 13) [1.5885348415634917, -0.3513699161774697, 0.12... 2 &lt;img data-content=\"rdkit/molecule\" src=\"data:i... 20 6 H ar6_hyd (5, 6, 7, 8, 9, 10) [-2.5603671398687795, 0.225961309976679, -0.00... 2 &lt;img data-content=\"rdkit/molecule\" src=\"data:i... 21 7 H hyd_1 (0,) [4.435874930017584, -0.7756874994731081, 0.229... 2 &lt;img data-content=\"rdkit/molecule\" src=\"data:i... 22 8 H hyd_1 (14,) [3.5442184878036715, 1.8625048142864429, -0.87... 2 &lt;img data-content=\"rdkit/molecule\" src=\"data:i... 23 1 a ar6 (1, 2, 3, 4, 11, 13) [1.6142175055366563, -0.32275141388056483, 0.1... 3 &lt;img data-content=\"rdkit/molecule\" src=\"data:i... 24 2 a ar6 (5, 6, 7, 8, 9, 10) [-2.56875904039992, 0.2837035722401502, 0.0238... 3 &lt;img data-content=\"rdkit/molecule\" src=\"data:i... 25 3 A N_HBA (3,) [0.774950525389591, -1.091122302896764, 0.8765... 3 &lt;img data-content=\"rdkit/molecule\" src=\"data:i... 26 4 A O_HBA (12,) [0.5947875917532608, 1.5963470277227887, -1.20... 3 &lt;img data-content=\"rdkit/molecule\" src=\"data:i... 27 5 H ar6_hyd (1, 2, 3, 4, 11, 13) [1.6142175055366563, -0.32275141388056483, 0.1... 3 &lt;img data-content=\"rdkit/molecule\" src=\"data:i... 28 6 H ar6_hyd (5, 6, 7, 8, 9, 10) [-2.56875904039992, 0.2837035722401502, 0.0238... 3 &lt;img data-content=\"rdkit/molecule\" src=\"data:i... 29 7 H hyd_1 (0,) [4.480532136001403, -0.788713951935018, 0.3040... 3 &lt;img data-content=\"rdkit/molecule\" src=\"data:i... <p>Now we can cluster those features. Here we do it manually but all those steps are performed automatically when you are computing the fingerprint.</p> <p>Two parameteres are important here:</p> <ul> <li><code>min_samples_ratio</code> decides the minimum percentage of points in a cluster to consider it as valid.</li> <li><code>eps</code> set the maximum distance between two feature points for one to be considered as in the neighborhood of the other.</li> </ul> <p>Those parameters will drastically influence the returned consensus features and so the computed fingerprint.</p> In\u00a0[14]: Copied! <pre># Cluster the features\nclustered_features = featurizer.cluster_features(\n    features,\n    min_samples_ratio=0.75,\n    eps=1,\n)\n\nclustered_features\n</pre> # Cluster the features clustered_features = featurizer.cluster_features(     features,     min_samples_ratio=0.75,     eps=1, )  clustered_features Out[14]: feature_id feature_name coords cluster_size 0 0 A [0.7542705995570907, -1.2265609293202056, 0.66... 3 1 1 A [0.6244082027004373, 1.8049171959076213, -0.90... 4 2 2 H [1.6143325565814577, -0.34309376877266595, 0.1... 4 3 3 H [-2.5509231346184205, 0.262642542748756, -0.01... 4 4 4 H [3.4442852582035672, 1.8000142617866193, -0.84... 3 5 5 H [4.4730273625331956, -0.7548342221913047, 0.23... 3 6 6 a [1.6143325565814577, -0.34309376877266595, 0.1... 4 7 7 a [-2.5509231346184205, 0.262642542748756, -0.01... 4 <p>Much less features are now returned. Not that <code>cluster_size</code> tell you how many feature points have participated to the associated consensus feature point. You can eventually use it as a \"weight\" in downstream application.</p> <p>Now, let's compute the consensus fingerprint.</p> In\u00a0[15]: Copied! <pre>consensus_fp = featurizer.consensus_fp(mols, align=True, eps=1, min_samples_ratio=0.5)\n\nprint(consensus_fp.shape)\nprint(consensus_fp.sum())\nconsensus_fp\n</pre> consensus_fp = featurizer.consensus_fp(mols, align=True, eps=1, min_samples_ratio=0.5)  print(consensus_fp.shape) print(consensus_fp.sum()) consensus_fp <pre>(2048,)\n69\n</pre> Out[15]: <pre>array([1, 0, 0, ..., 0, 0, 0])</pre> <p>You can also visualize the clustered features as well as the list of molecules used for the consensus.</p> In\u00a0[16]: Copied! <pre>featurizer.show_many(mols, align=True, eps=1, min_samples_ratio=0.5, show_legend=True)\n</pre> featurizer.show_many(mols, align=True, eps=1, min_samples_ratio=0.5, show_legend=True) <p>The 3D viz is not available in the documentation. Here is a screenshot.</p> <p></p> In\u00a0[18]: Copied! <pre>from scipy.spatial.distance import cdist\n\nsmiles_list = [\n    \"Nc1cnn(-c2ccccc2)c(=O)c1Cl\",\n    \"Cc1ccn(-c2ccccc2)c(=O)c1F\",\n    \"Cc1cnn(-c2ccccc2)c(=O)c1Cl\",\n    \"Cc1cnn(-c2ccccc2)c(=O)c1\",\n    \"c1ccc(cc1)C(F)(F)F\",\n    \"CC(=O)OC1=CC=CC=C1C(=O)O\"\n]\nmols = [dm.to_mol(smiles) for smiles in smiles_list]\nmols = [dm.conformers.generate(mol, n_confs=1) for mol in mols]\n\nfps = [featurizer(mol) for mol in mols]\n\ndistances = cdist([consensus_fp], fps, metric=\"jaccard\")\n\ndm.to_image(mols, legends=[f\"{d:.2f}\" for d in distances[0]])\n</pre> from scipy.spatial.distance import cdist  smiles_list = [     \"Nc1cnn(-c2ccccc2)c(=O)c1Cl\",     \"Cc1ccn(-c2ccccc2)c(=O)c1F\",     \"Cc1cnn(-c2ccccc2)c(=O)c1Cl\",     \"Cc1cnn(-c2ccccc2)c(=O)c1\",     \"c1ccc(cc1)C(F)(F)F\",     \"CC(=O)OC1=CC=CC=C1C(=O)O\" ] mols = [dm.to_mol(smiles) for smiles in smiles_list] mols = [dm.conformers.generate(mol, n_confs=1) for mol in mols]  fps = [featurizer(mol) for mol in mols]  distances = cdist([consensus_fp], fps, metric=\"jaccard\")  dm.to_image(mols, legends=[f\"{d:.2f}\" for d in distances[0]]) Out[18]: <p>Playing with the various consensus parameters will give you different distances.</p>"},{"location":"tutorials/pharmacophore.html#Pharmacophore-2D","title":"Pharmacophore 2D\u00b6","text":"<p>The pharmacophore 2D featurizer is similar to any other molfeat featurizers.</p> <ul> <li>The <code>factory</code> argument decides how the features are detected. You can choose from <code>\"default\", \"cats\", \"gobbi\" , \"pmapper\"</code> but you can also directly pass and RDKit <code>MolChemicalFeatureFactory</code> object or a path to a feature definition file.</li> <li><code>length</code> allows you to set the length of the fingerprint. It's 2048 by default. If set to None, the default depends on the <code>factory</code> used. We strongly recommend using a fixed length. But you should also check for collision and adapt the length for it. Usually, 2048 is a good tradeoff.</li> <li>Finally, you can set any parameters for the signature factory. Check the docstring for more details.<ul> <li><code>useCounts</code></li> <li><code>minPointCount</code></li> <li><code>maxPointCount</code></li> <li><code>shortestPathsOnly</code></li> <li><code>includeBondOrder</code></li> <li><code>skipFeats</code></li> <li><code>trianglePruneBins</code></li> <li><code>bins</code></li> </ul> </li> </ul>"},{"location":"tutorials/pharmacophore.html#Pharmacophore-3D","title":"Pharmacophore 3D\u00b6","text":"<p>The pharmacophore 3D featurizer is different from the 2D featurizer:</p> <ul> <li>It requires the molecules to have conformer.</li> <li>It allows extracting pharmacophoric features as dataframe.</li> <li>It ships a couple of 3D viz features.</li> <li>It supports building a consensus features list and fingerprint.</li> </ul>"},{"location":"tutorials/pharmacophore.html#Regular-one-molecule-featurizer","title":"Regular one-molecule featurizer\u00b6","text":"<p>In this section we are going to extract the feature for one molecule, compute the associated fingerprint and finally visualize the features in 3D.</p>"},{"location":"tutorials/pharmacophore.html#Consensus-pharmacophore","title":"Consensus pharmacophore\u00b6","text":"<p>A consensus pharamacophore combine multiple molecules together and build a list of features using a clustering approach.</p> <p>First we start with a list of similar molecules.</p>"},{"location":"tutorials/pharmacophore.html#Distance-from-the-consensus-fingerprint","title":"Distance from the consensus fingerprint\u00b6","text":"<p>Here we compute the Jaccard distances from the computed consensus fingerprint.</p>"},{"location":"tutorials/pretrained.html","title":"Pretrained Featurizers","text":"In\u00a0[1]: Copied! <pre>%load_ext autoreload\n%autoreload 2\n</pre> %load_ext autoreload %autoreload 2 In\u00a0[2]: Copied! <pre>import datamol as dm\nimport random\nimport numpy as np\n\n# set printing option\nnp.set_printoptions(threshold=10)\n\n# set random list\nnp.random.seed(10)\nrandom.seed(10)\n\ndata = dm.data.freesolv().sample(500)\n</pre> import datamol as dm import random import numpy as np  # set printing option np.set_printoptions(threshold=10)  # set random list np.random.seed(10) random.seed(10)  data = dm.data.freesolv().sample(500) In\u00a0[3]: Copied! <pre>import torch\nfrom molfeat.trans.pretrained import FCDTransformer\nfrom molfeat.trans.pretrained import PretrainedDGLTransformer\n</pre> import torch from molfeat.trans.pretrained import FCDTransformer from molfeat.trans.pretrained import PretrainedDGLTransformer In\u00a0[4]: Copied! <pre>fcd = FCDTransformer(dtype=\"df\")\n</pre> fcd = FCDTransformer(dtype=\"df\") In\u00a0[5]: Copied! <pre>fcd(data[\"smiles\"], enforce_dtype=True)[0]\n</pre> fcd(data[\"smiles\"], enforce_dtype=True)[0] Out[5]: <pre>0     -0.104110\n1      0.135386\n2      0.117059\n3      0.103226\n4     -0.259087\n         ...   \n495    0.053794\n496    0.124357\n497   -0.183770\n498    0.171897\n499   -0.055931\nName: 0, Length: 500, dtype: float32</pre> In\u00a0[6]: Copied! <pre>gin = PretrainedDGLTransformer(kind=\"gin_supervised_contextpred\", dtype=np.float32, preload=True, pooling=\"sum\")\ngin(data[\"smiles\"], enforce_dtype=True)[0]\n</pre> gin = PretrainedDGLTransformer(kind=\"gin_supervised_contextpred\", dtype=np.float32, preload=True, pooling=\"sum\") gin(data[\"smiles\"], enforce_dtype=True)[0] Out[6]: <pre>array([ 0.25235158,  0.8971151 , -0.58575034, ...,  0.23859033,\n       -0.4665837 , -1.3065432 ], dtype=float32)</pre> In\u00a0[8]: Copied! <pre>gin.set_params(kind=\"gin_supervised_contextpred\", pooling=\"sum\")\n</pre> gin.set_params(kind=\"gin_supervised_contextpred\", pooling=\"sum\") Out[8]: <pre>PretrainedDGLTransformer(kind=\"gin_supervised_contextpred\", pooling=\"sum\", dtype=np.float32)</pre>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.PretrainedDGLTransformer<pre>PretrainedDGLTransformer(kind=\"gin_supervised_contextpred\", pooling=\"sum\", dtype=np.float32)</pre> In\u00a0[9]: Copied! <pre>from sklearn.ensemble import RandomForestRegressor\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.model_selection import GridSearchCV\n</pre> from sklearn.ensemble import RandomForestRegressor from sklearn.preprocessing import StandardScaler from sklearn.model_selection import train_test_split from sklearn.pipeline import Pipeline from sklearn.model_selection import GridSearchCV In\u00a0[10]: Copied! <pre>df = dm.data.freesolv()\nX, y = df[\"smiles\"], df[\"expt\"]\nX_train, X_test, y_train, y_test = train_test_split(X, y, random_state=0)\n</pre> df = dm.data.freesolv() X, y = df[\"smiles\"], df[\"expt\"] X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=0) In\u00a0[13]: Copied! <pre>gin = PretrainedDGLTransformer(kind=\"gin_supervised_contextpred\",\n    dtype=np.float32, preload=True, pooling=\"sum\", verbose=False\n)\npipe = Pipeline(\n    [(\"feat\", gin), (\"scaler\", StandardScaler()), (\"rf\", RandomForestRegressor(n_estimators=100))]\n)\nparam_grid = dict(feat__pooling=[\"max\", \"mean\"])\ngrid_search = GridSearchCV(pipe, param_grid=param_grid, cv=2)\n\ngrid_search.fit(X_train, y_train)\n</pre> gin = PretrainedDGLTransformer(kind=\"gin_supervised_contextpred\",     dtype=np.float32, preload=True, pooling=\"sum\", verbose=False ) pipe = Pipeline(     [(\"feat\", gin), (\"scaler\", StandardScaler()), (\"rf\", RandomForestRegressor(n_estimators=100))] ) param_grid = dict(feat__pooling=[\"max\", \"mean\"]) grid_search = GridSearchCV(pipe, param_grid=param_grid, cv=2)  grid_search.fit(X_train, y_train) Out[13]: <pre>GridSearchCV(cv=2,\n             estimator=Pipeline(steps=[('feat',\n                                        PretrainedDGLTransformer(kind='gin_supervised_contextpred', n_jobs=1, pooling='sum', preload=True, verbose=False)),\n                                       ('scaler', StandardScaler()),\n                                       ('rf', RandomForestRegressor())]),\n             param_grid={'feat__pooling': ['max', 'mean']})</pre>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.GridSearchCV<pre>GridSearchCV(cv=2,\n             estimator=Pipeline(steps=[('feat',\n                                        PretrainedDGLTransformer(kind='gin_supervised_contextpred', n_jobs=1, pooling='sum', preload=True, verbose=False)),\n                                       ('scaler', StandardScaler()),\n                                       ('rf', RandomForestRegressor())]),\n             param_grid={'feat__pooling': ['max', 'mean']})</pre>estimator: Pipeline<pre>Pipeline(steps=[('feat',\n                 PretrainedDGLTransformer(kind='gin_supervised_contextpred', n_jobs=1, pooling='sum', preload=True, verbose=False)),\n                ('scaler', StandardScaler()), ('rf', RandomForestRegressor())])</pre>PretrainedDGLTransformer<pre>PretrainedDGLTransformer(kind=\"gin_supervised_contextpred\", pooling=\"sum\", dtype=np.float32)</pre>StandardScaler<pre>StandardScaler()</pre>RandomForestRegressor<pre>RandomForestRegressor()</pre> In\u00a0[13]: Copied! <pre>grid_search.best_estimator_[0]\n</pre> grid_search.best_estimator_[0] Out[13]: <pre>PretrainedDGLTransformer(kind=\"gin_contextpred\", pooling=\"max\", dtype=np.float32)</pre> In\u00a0[14]: Copied! <pre>grid_search.score(X_test, y_test)\n</pre> grid_search.score(X_test, y_test) Out[14]: <pre>0.7583147376911157</pre>"},{"location":"tutorials/pretrained.html#Pretrained-Featurizers","title":"Pretrained Featurizers\u00b6","text":"<p>Aside from computed featurizers, <code>molfeat</code> also offers some pretrained featurizers.</p> <p>All pretrained featurizers inherits from <code>molfeat.trans.pretrained.base.PretrainedMolTransformer</code> and most of them are based on models hosted on <code>ada</code></p>"},{"location":"tutorials/pretrained.html#Testing-the-pretrained-fingerprint-with-sklearn-model","title":"Testing the pretrained fingerprint with sklearn model\u00b6","text":""}]}